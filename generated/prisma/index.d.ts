
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Region
 * 
 */
export type Region = $Result.DefaultSelection<Prisma.$RegionPayload>
/**
 * Model Brand
 * 
 */
export type Brand = $Result.DefaultSelection<Prisma.$BrandPayload>
/**
 * Model Capacity
 * 
 */
export type Capacity = $Result.DefaultSelection<Prisma.$CapacityPayload>
/**
 * Model Size
 * 
 */
export type Size = $Result.DefaultSelection<Prisma.$SizePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Tools
 * 
 */
export type Tools = $Result.DefaultSelection<Prisma.$ToolsPayload>
/**
 * Model Master
 * 
 */
export type Master = $Result.DefaultSelection<Prisma.$MasterPayload>
/**
 * Model MasterProd
 * 
 */
export type MasterProd = $Result.DefaultSelection<Prisma.$MasterProdPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model Level
 * 
 */
export type Level = $Result.DefaultSelection<Prisma.$LevelPayload>
/**
 * Model ProductLevels
 * 
 */
export type ProductLevels = $Result.DefaultSelection<Prisma.$ProductLevelsPayload>
/**
 * Model ProductTools
 * 
 */
export type ProductTools = $Result.DefaultSelection<Prisma.$ProductToolsPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model OrderProducts
 * 
 */
export type OrderProducts = $Result.DefaultSelection<Prisma.$OrderProductsPayload>
/**
 * Model OrderMasters
 * 
 */
export type OrderMasters = $Result.DefaultSelection<Prisma.$OrderMastersPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model MasterRatings
 * 
 */
export type MasterRatings = $Result.DefaultSelection<Prisma.$MasterRatingsPayload>
/**
 * Model Basket
 * 
 */
export type Basket = $Result.DefaultSelection<Prisma.$BasketPayload>
/**
 * Model GeneralInfo
 * 
 */
export type GeneralInfo = $Result.DefaultSelection<Prisma.$GeneralInfoPayload>
/**
 * Model Contact
 * 
 */
export type Contact = $Result.DefaultSelection<Prisma.$ContactPayload>
/**
 * Model FAQ
 * 
 */
export type FAQ = $Result.DefaultSelection<Prisma.$FAQPayload>
/**
 * Model showCase
 * 
 */
export type showCase = $Result.DefaultSelection<Prisma.$showCasePayload>
/**
 * Model Partners
 * 
 */
export type Partners = $Result.DefaultSelection<Prisma.$PartnersPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const MasterDaily: {
  Daily: 'Daily',
  Hoursly: 'Hoursly'
};

export type MasterDaily = (typeof MasterDaily)[keyof typeof MasterDaily]


export const userRole: {
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN',
  VIEWER_ADMIN: 'VIEWER_ADMIN',
  USER_FIZ: 'USER_FIZ',
  USER_YUR: 'USER_YUR'
};

export type userRole = (typeof userRole)[keyof typeof userRole]


export const userStatus: {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  REJECTED: 'REJECTED'
};

export type userStatus = (typeof userStatus)[keyof typeof userStatus]


export const orderStatus: {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  REJECTED: 'REJECTED'
};

export type orderStatus = (typeof orderStatus)[keyof typeof orderStatus]


export const paymentType: {
  CREDIT_CARD: 'CREDIT_CARD',
  CASH: 'CASH',
  BANK_TRANSFER: 'BANK_TRANSFER'
};

export type paymentType = (typeof paymentType)[keyof typeof paymentType]

}

export type MasterDaily = $Enums.MasterDaily

export const MasterDaily: typeof $Enums.MasterDaily

export type userRole = $Enums.userRole

export const userRole: typeof $Enums.userRole

export type userStatus = $Enums.userStatus

export const userStatus: typeof $Enums.userStatus

export type orderStatus = $Enums.orderStatus

export const orderStatus: typeof $Enums.orderStatus

export type paymentType = $Enums.paymentType

export const paymentType: typeof $Enums.paymentType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Regions
 * const regions = await prisma.region.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Regions
   * const regions = await prisma.region.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.region`: Exposes CRUD operations for the **Region** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Regions
    * const regions = await prisma.region.findMany()
    * ```
    */
  get region(): Prisma.RegionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.brand`: Exposes CRUD operations for the **Brand** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brands
    * const brands = await prisma.brand.findMany()
    * ```
    */
  get brand(): Prisma.BrandDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.capacity`: Exposes CRUD operations for the **Capacity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Capacities
    * const capacities = await prisma.capacity.findMany()
    * ```
    */
  get capacity(): Prisma.CapacityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.size`: Exposes CRUD operations for the **Size** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sizes
    * const sizes = await prisma.size.findMany()
    * ```
    */
  get size(): Prisma.SizeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tools`: Exposes CRUD operations for the **Tools** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tools
    * const tools = await prisma.tools.findMany()
    * ```
    */
  get tools(): Prisma.ToolsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.master`: Exposes CRUD operations for the **Master** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Masters
    * const masters = await prisma.master.findMany()
    * ```
    */
  get master(): Prisma.MasterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.masterProd`: Exposes CRUD operations for the **MasterProd** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MasterProds
    * const masterProds = await prisma.masterProd.findMany()
    * ```
    */
  get masterProd(): Prisma.MasterProdDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.level`: Exposes CRUD operations for the **Level** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Levels
    * const levels = await prisma.level.findMany()
    * ```
    */
  get level(): Prisma.LevelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productLevels`: Exposes CRUD operations for the **ProductLevels** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductLevels
    * const productLevels = await prisma.productLevels.findMany()
    * ```
    */
  get productLevels(): Prisma.ProductLevelsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productTools`: Exposes CRUD operations for the **ProductTools** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductTools
    * const productTools = await prisma.productTools.findMany()
    * ```
    */
  get productTools(): Prisma.ProductToolsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderProducts`: Exposes CRUD operations for the **OrderProducts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderProducts
    * const orderProducts = await prisma.orderProducts.findMany()
    * ```
    */
  get orderProducts(): Prisma.OrderProductsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderMasters`: Exposes CRUD operations for the **OrderMasters** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderMasters
    * const orderMasters = await prisma.orderMasters.findMany()
    * ```
    */
  get orderMasters(): Prisma.OrderMastersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.masterRatings`: Exposes CRUD operations for the **MasterRatings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MasterRatings
    * const masterRatings = await prisma.masterRatings.findMany()
    * ```
    */
  get masterRatings(): Prisma.MasterRatingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.basket`: Exposes CRUD operations for the **Basket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Baskets
    * const baskets = await prisma.basket.findMany()
    * ```
    */
  get basket(): Prisma.BasketDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.generalInfo`: Exposes CRUD operations for the **GeneralInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GeneralInfos
    * const generalInfos = await prisma.generalInfo.findMany()
    * ```
    */
  get generalInfo(): Prisma.GeneralInfoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contact.findMany()
    * ```
    */
  get contact(): Prisma.ContactDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fAQ`: Exposes CRUD operations for the **FAQ** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FAQS
    * const fAQS = await prisma.fAQ.findMany()
    * ```
    */
  get fAQ(): Prisma.FAQDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.showCase`: Exposes CRUD operations for the **showCase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShowCases
    * const showCases = await prisma.showCase.findMany()
    * ```
    */
  get showCase(): Prisma.showCaseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.partners`: Exposes CRUD operations for the **Partners** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Partners
    * const partners = await prisma.partners.findMany()
    * ```
    */
  get partners(): Prisma.PartnersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Region: 'Region',
    Brand: 'Brand',
    Capacity: 'Capacity',
    Size: 'Size',
    User: 'User',
    Tools: 'Tools',
    Master: 'Master',
    MasterProd: 'MasterProd',
    Product: 'Product',
    Level: 'Level',
    ProductLevels: 'ProductLevels',
    ProductTools: 'ProductTools',
    Order: 'Order',
    OrderProducts: 'OrderProducts',
    OrderMasters: 'OrderMasters',
    Comment: 'Comment',
    MasterRatings: 'MasterRatings',
    Basket: 'Basket',
    GeneralInfo: 'GeneralInfo',
    Contact: 'Contact',
    FAQ: 'FAQ',
    showCase: 'showCase',
    Partners: 'Partners',
    Session: 'Session'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "region" | "brand" | "capacity" | "size" | "user" | "tools" | "master" | "masterProd" | "product" | "level" | "productLevels" | "productTools" | "order" | "orderProducts" | "orderMasters" | "comment" | "masterRatings" | "basket" | "generalInfo" | "contact" | "fAQ" | "showCase" | "partners" | "session"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Region: {
        payload: Prisma.$RegionPayload<ExtArgs>
        fields: Prisma.RegionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findFirst: {
            args: Prisma.RegionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findMany: {
            args: Prisma.RegionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          create: {
            args: Prisma.RegionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          createMany: {
            args: Prisma.RegionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          delete: {
            args: Prisma.RegionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          update: {
            args: Prisma.RegionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          deleteMany: {
            args: Prisma.RegionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RegionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          upsert: {
            args: Prisma.RegionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          aggregate: {
            args: Prisma.RegionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegion>
          }
          groupBy: {
            args: Prisma.RegionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegionCountArgs<ExtArgs>
            result: $Utils.Optional<RegionCountAggregateOutputType> | number
          }
        }
      }
      Brand: {
        payload: Prisma.$BrandPayload<ExtArgs>
        fields: Prisma.BrandFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BrandFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BrandFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findFirst: {
            args: Prisma.BrandFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BrandFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findMany: {
            args: Prisma.BrandFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          create: {
            args: Prisma.BrandCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          createMany: {
            args: Prisma.BrandCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BrandCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          delete: {
            args: Prisma.BrandDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          update: {
            args: Prisma.BrandUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          deleteMany: {
            args: Prisma.BrandDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BrandUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BrandUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          upsert: {
            args: Prisma.BrandUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          aggregate: {
            args: Prisma.BrandAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBrand>
          }
          groupBy: {
            args: Prisma.BrandGroupByArgs<ExtArgs>
            result: $Utils.Optional<BrandGroupByOutputType>[]
          }
          count: {
            args: Prisma.BrandCountArgs<ExtArgs>
            result: $Utils.Optional<BrandCountAggregateOutputType> | number
          }
        }
      }
      Capacity: {
        payload: Prisma.$CapacityPayload<ExtArgs>
        fields: Prisma.CapacityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CapacityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CapacityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>
          }
          findFirst: {
            args: Prisma.CapacityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CapacityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>
          }
          findMany: {
            args: Prisma.CapacityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>[]
          }
          create: {
            args: Prisma.CapacityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>
          }
          createMany: {
            args: Prisma.CapacityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CapacityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>[]
          }
          delete: {
            args: Prisma.CapacityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>
          }
          update: {
            args: Prisma.CapacityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>
          }
          deleteMany: {
            args: Prisma.CapacityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CapacityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CapacityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>[]
          }
          upsert: {
            args: Prisma.CapacityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapacityPayload>
          }
          aggregate: {
            args: Prisma.CapacityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCapacity>
          }
          groupBy: {
            args: Prisma.CapacityGroupByArgs<ExtArgs>
            result: $Utils.Optional<CapacityGroupByOutputType>[]
          }
          count: {
            args: Prisma.CapacityCountArgs<ExtArgs>
            result: $Utils.Optional<CapacityCountAggregateOutputType> | number
          }
        }
      }
      Size: {
        payload: Prisma.$SizePayload<ExtArgs>
        fields: Prisma.SizeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SizeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SizeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          findFirst: {
            args: Prisma.SizeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SizeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          findMany: {
            args: Prisma.SizeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>[]
          }
          create: {
            args: Prisma.SizeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          createMany: {
            args: Prisma.SizeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SizeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>[]
          }
          delete: {
            args: Prisma.SizeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          update: {
            args: Prisma.SizeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          deleteMany: {
            args: Prisma.SizeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SizeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SizeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>[]
          }
          upsert: {
            args: Prisma.SizeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          aggregate: {
            args: Prisma.SizeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSize>
          }
          groupBy: {
            args: Prisma.SizeGroupByArgs<ExtArgs>
            result: $Utils.Optional<SizeGroupByOutputType>[]
          }
          count: {
            args: Prisma.SizeCountArgs<ExtArgs>
            result: $Utils.Optional<SizeCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Tools: {
        payload: Prisma.$ToolsPayload<ExtArgs>
        fields: Prisma.ToolsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ToolsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ToolsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload>
          }
          findFirst: {
            args: Prisma.ToolsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ToolsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload>
          }
          findMany: {
            args: Prisma.ToolsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload>[]
          }
          create: {
            args: Prisma.ToolsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload>
          }
          createMany: {
            args: Prisma.ToolsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ToolsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload>[]
          }
          delete: {
            args: Prisma.ToolsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload>
          }
          update: {
            args: Prisma.ToolsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload>
          }
          deleteMany: {
            args: Prisma.ToolsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ToolsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ToolsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload>[]
          }
          upsert: {
            args: Prisma.ToolsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload>
          }
          aggregate: {
            args: Prisma.ToolsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTools>
          }
          groupBy: {
            args: Prisma.ToolsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ToolsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ToolsCountArgs<ExtArgs>
            result: $Utils.Optional<ToolsCountAggregateOutputType> | number
          }
        }
      }
      Master: {
        payload: Prisma.$MasterPayload<ExtArgs>
        fields: Prisma.MasterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MasterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MasterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          findFirst: {
            args: Prisma.MasterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MasterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          findMany: {
            args: Prisma.MasterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>[]
          }
          create: {
            args: Prisma.MasterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          createMany: {
            args: Prisma.MasterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MasterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>[]
          }
          delete: {
            args: Prisma.MasterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          update: {
            args: Prisma.MasterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          deleteMany: {
            args: Prisma.MasterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MasterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MasterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>[]
          }
          upsert: {
            args: Prisma.MasterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          aggregate: {
            args: Prisma.MasterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaster>
          }
          groupBy: {
            args: Prisma.MasterGroupByArgs<ExtArgs>
            result: $Utils.Optional<MasterGroupByOutputType>[]
          }
          count: {
            args: Prisma.MasterCountArgs<ExtArgs>
            result: $Utils.Optional<MasterCountAggregateOutputType> | number
          }
        }
      }
      MasterProd: {
        payload: Prisma.$MasterProdPayload<ExtArgs>
        fields: Prisma.MasterProdFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MasterProdFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProdPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MasterProdFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProdPayload>
          }
          findFirst: {
            args: Prisma.MasterProdFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProdPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MasterProdFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProdPayload>
          }
          findMany: {
            args: Prisma.MasterProdFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProdPayload>[]
          }
          create: {
            args: Prisma.MasterProdCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProdPayload>
          }
          createMany: {
            args: Prisma.MasterProdCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MasterProdCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProdPayload>[]
          }
          delete: {
            args: Prisma.MasterProdDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProdPayload>
          }
          update: {
            args: Prisma.MasterProdUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProdPayload>
          }
          deleteMany: {
            args: Prisma.MasterProdDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MasterProdUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MasterProdUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProdPayload>[]
          }
          upsert: {
            args: Prisma.MasterProdUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterProdPayload>
          }
          aggregate: {
            args: Prisma.MasterProdAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMasterProd>
          }
          groupBy: {
            args: Prisma.MasterProdGroupByArgs<ExtArgs>
            result: $Utils.Optional<MasterProdGroupByOutputType>[]
          }
          count: {
            args: Prisma.MasterProdCountArgs<ExtArgs>
            result: $Utils.Optional<MasterProdCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      Level: {
        payload: Prisma.$LevelPayload<ExtArgs>
        fields: Prisma.LevelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LevelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LevelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          findFirst: {
            args: Prisma.LevelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LevelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          findMany: {
            args: Prisma.LevelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>[]
          }
          create: {
            args: Prisma.LevelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          createMany: {
            args: Prisma.LevelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LevelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>[]
          }
          delete: {
            args: Prisma.LevelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          update: {
            args: Prisma.LevelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          deleteMany: {
            args: Prisma.LevelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LevelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LevelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>[]
          }
          upsert: {
            args: Prisma.LevelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          aggregate: {
            args: Prisma.LevelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLevel>
          }
          groupBy: {
            args: Prisma.LevelGroupByArgs<ExtArgs>
            result: $Utils.Optional<LevelGroupByOutputType>[]
          }
          count: {
            args: Prisma.LevelCountArgs<ExtArgs>
            result: $Utils.Optional<LevelCountAggregateOutputType> | number
          }
        }
      }
      ProductLevels: {
        payload: Prisma.$ProductLevelsPayload<ExtArgs>
        fields: Prisma.ProductLevelsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductLevelsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductLevelsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelsPayload>
          }
          findFirst: {
            args: Prisma.ProductLevelsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductLevelsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelsPayload>
          }
          findMany: {
            args: Prisma.ProductLevelsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelsPayload>[]
          }
          create: {
            args: Prisma.ProductLevelsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelsPayload>
          }
          createMany: {
            args: Prisma.ProductLevelsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductLevelsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelsPayload>[]
          }
          delete: {
            args: Prisma.ProductLevelsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelsPayload>
          }
          update: {
            args: Prisma.ProductLevelsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelsPayload>
          }
          deleteMany: {
            args: Prisma.ProductLevelsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductLevelsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductLevelsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelsPayload>[]
          }
          upsert: {
            args: Prisma.ProductLevelsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductLevelsPayload>
          }
          aggregate: {
            args: Prisma.ProductLevelsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductLevels>
          }
          groupBy: {
            args: Prisma.ProductLevelsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductLevelsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductLevelsCountArgs<ExtArgs>
            result: $Utils.Optional<ProductLevelsCountAggregateOutputType> | number
          }
        }
      }
      ProductTools: {
        payload: Prisma.$ProductToolsPayload<ExtArgs>
        fields: Prisma.ProductToolsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductToolsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductToolsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolsPayload>
          }
          findFirst: {
            args: Prisma.ProductToolsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductToolsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolsPayload>
          }
          findMany: {
            args: Prisma.ProductToolsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolsPayload>[]
          }
          create: {
            args: Prisma.ProductToolsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolsPayload>
          }
          createMany: {
            args: Prisma.ProductToolsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductToolsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolsPayload>[]
          }
          delete: {
            args: Prisma.ProductToolsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolsPayload>
          }
          update: {
            args: Prisma.ProductToolsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolsPayload>
          }
          deleteMany: {
            args: Prisma.ProductToolsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductToolsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductToolsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolsPayload>[]
          }
          upsert: {
            args: Prisma.ProductToolsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductToolsPayload>
          }
          aggregate: {
            args: Prisma.ProductToolsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductTools>
          }
          groupBy: {
            args: Prisma.ProductToolsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductToolsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductToolsCountArgs<ExtArgs>
            result: $Utils.Optional<ProductToolsCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      OrderProducts: {
        payload: Prisma.$OrderProductsPayload<ExtArgs>
        fields: Prisma.OrderProductsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderProductsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderProductsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductsPayload>
          }
          findFirst: {
            args: Prisma.OrderProductsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderProductsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductsPayload>
          }
          findMany: {
            args: Prisma.OrderProductsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductsPayload>[]
          }
          create: {
            args: Prisma.OrderProductsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductsPayload>
          }
          createMany: {
            args: Prisma.OrderProductsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderProductsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductsPayload>[]
          }
          delete: {
            args: Prisma.OrderProductsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductsPayload>
          }
          update: {
            args: Prisma.OrderProductsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductsPayload>
          }
          deleteMany: {
            args: Prisma.OrderProductsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderProductsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderProductsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductsPayload>[]
          }
          upsert: {
            args: Prisma.OrderProductsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderProductsPayload>
          }
          aggregate: {
            args: Prisma.OrderProductsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderProducts>
          }
          groupBy: {
            args: Prisma.OrderProductsGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderProductsGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderProductsCountArgs<ExtArgs>
            result: $Utils.Optional<OrderProductsCountAggregateOutputType> | number
          }
        }
      }
      OrderMasters: {
        payload: Prisma.$OrderMastersPayload<ExtArgs>
        fields: Prisma.OrderMastersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderMastersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMastersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderMastersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMastersPayload>
          }
          findFirst: {
            args: Prisma.OrderMastersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMastersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderMastersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMastersPayload>
          }
          findMany: {
            args: Prisma.OrderMastersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMastersPayload>[]
          }
          create: {
            args: Prisma.OrderMastersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMastersPayload>
          }
          createMany: {
            args: Prisma.OrderMastersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderMastersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMastersPayload>[]
          }
          delete: {
            args: Prisma.OrderMastersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMastersPayload>
          }
          update: {
            args: Prisma.OrderMastersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMastersPayload>
          }
          deleteMany: {
            args: Prisma.OrderMastersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderMastersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderMastersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMastersPayload>[]
          }
          upsert: {
            args: Prisma.OrderMastersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderMastersPayload>
          }
          aggregate: {
            args: Prisma.OrderMastersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderMasters>
          }
          groupBy: {
            args: Prisma.OrderMastersGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderMastersGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderMastersCountArgs<ExtArgs>
            result: $Utils.Optional<OrderMastersCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      MasterRatings: {
        payload: Prisma.$MasterRatingsPayload<ExtArgs>
        fields: Prisma.MasterRatingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MasterRatingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MasterRatingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>
          }
          findFirst: {
            args: Prisma.MasterRatingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MasterRatingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>
          }
          findMany: {
            args: Prisma.MasterRatingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>[]
          }
          create: {
            args: Prisma.MasterRatingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>
          }
          createMany: {
            args: Prisma.MasterRatingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MasterRatingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>[]
          }
          delete: {
            args: Prisma.MasterRatingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>
          }
          update: {
            args: Prisma.MasterRatingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>
          }
          deleteMany: {
            args: Prisma.MasterRatingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MasterRatingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MasterRatingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>[]
          }
          upsert: {
            args: Prisma.MasterRatingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterRatingsPayload>
          }
          aggregate: {
            args: Prisma.MasterRatingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMasterRatings>
          }
          groupBy: {
            args: Prisma.MasterRatingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<MasterRatingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.MasterRatingsCountArgs<ExtArgs>
            result: $Utils.Optional<MasterRatingsCountAggregateOutputType> | number
          }
        }
      }
      Basket: {
        payload: Prisma.$BasketPayload<ExtArgs>
        fields: Prisma.BasketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BasketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BasketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          findFirst: {
            args: Prisma.BasketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BasketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          findMany: {
            args: Prisma.BasketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>[]
          }
          create: {
            args: Prisma.BasketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          createMany: {
            args: Prisma.BasketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BasketCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>[]
          }
          delete: {
            args: Prisma.BasketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          update: {
            args: Prisma.BasketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          deleteMany: {
            args: Prisma.BasketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BasketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BasketUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>[]
          }
          upsert: {
            args: Prisma.BasketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          aggregate: {
            args: Prisma.BasketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBasket>
          }
          groupBy: {
            args: Prisma.BasketGroupByArgs<ExtArgs>
            result: $Utils.Optional<BasketGroupByOutputType>[]
          }
          count: {
            args: Prisma.BasketCountArgs<ExtArgs>
            result: $Utils.Optional<BasketCountAggregateOutputType> | number
          }
        }
      }
      GeneralInfo: {
        payload: Prisma.$GeneralInfoPayload<ExtArgs>
        fields: Prisma.GeneralInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GeneralInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GeneralInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload>
          }
          findFirst: {
            args: Prisma.GeneralInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GeneralInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload>
          }
          findMany: {
            args: Prisma.GeneralInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload>[]
          }
          create: {
            args: Prisma.GeneralInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload>
          }
          createMany: {
            args: Prisma.GeneralInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GeneralInfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload>[]
          }
          delete: {
            args: Prisma.GeneralInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload>
          }
          update: {
            args: Prisma.GeneralInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload>
          }
          deleteMany: {
            args: Prisma.GeneralInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GeneralInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GeneralInfoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload>[]
          }
          upsert: {
            args: Prisma.GeneralInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralInfoPayload>
          }
          aggregate: {
            args: Prisma.GeneralInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGeneralInfo>
          }
          groupBy: {
            args: Prisma.GeneralInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<GeneralInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.GeneralInfoCountArgs<ExtArgs>
            result: $Utils.Optional<GeneralInfoCountAggregateOutputType> | number
          }
        }
      }
      Contact: {
        payload: Prisma.$ContactPayload<ExtArgs>
        fields: Prisma.ContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findFirst: {
            args: Prisma.ContactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findMany: {
            args: Prisma.ContactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          create: {
            args: Prisma.ContactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          createMany: {
            args: Prisma.ContactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          delete: {
            args: Prisma.ContactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          update: {
            args: Prisma.ContactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          deleteMany: {
            args: Prisma.ContactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContactUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          upsert: {
            args: Prisma.ContactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          aggregate: {
            args: Prisma.ContactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContact>
          }
          groupBy: {
            args: Prisma.ContactGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactCountArgs<ExtArgs>
            result: $Utils.Optional<ContactCountAggregateOutputType> | number
          }
        }
      }
      FAQ: {
        payload: Prisma.$FAQPayload<ExtArgs>
        fields: Prisma.FAQFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FAQFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FAQFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          findFirst: {
            args: Prisma.FAQFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FAQFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          findMany: {
            args: Prisma.FAQFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>[]
          }
          create: {
            args: Prisma.FAQCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          createMany: {
            args: Prisma.FAQCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FAQCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>[]
          }
          delete: {
            args: Prisma.FAQDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          update: {
            args: Prisma.FAQUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          deleteMany: {
            args: Prisma.FAQDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FAQUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FAQUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>[]
          }
          upsert: {
            args: Prisma.FAQUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          aggregate: {
            args: Prisma.FAQAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFAQ>
          }
          groupBy: {
            args: Prisma.FAQGroupByArgs<ExtArgs>
            result: $Utils.Optional<FAQGroupByOutputType>[]
          }
          count: {
            args: Prisma.FAQCountArgs<ExtArgs>
            result: $Utils.Optional<FAQCountAggregateOutputType> | number
          }
        }
      }
      showCase: {
        payload: Prisma.$showCasePayload<ExtArgs>
        fields: Prisma.showCaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.showCaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$showCasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.showCaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$showCasePayload>
          }
          findFirst: {
            args: Prisma.showCaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$showCasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.showCaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$showCasePayload>
          }
          findMany: {
            args: Prisma.showCaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$showCasePayload>[]
          }
          create: {
            args: Prisma.showCaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$showCasePayload>
          }
          createMany: {
            args: Prisma.showCaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.showCaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$showCasePayload>[]
          }
          delete: {
            args: Prisma.showCaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$showCasePayload>
          }
          update: {
            args: Prisma.showCaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$showCasePayload>
          }
          deleteMany: {
            args: Prisma.showCaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.showCaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.showCaseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$showCasePayload>[]
          }
          upsert: {
            args: Prisma.showCaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$showCasePayload>
          }
          aggregate: {
            args: Prisma.ShowCaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShowCase>
          }
          groupBy: {
            args: Prisma.showCaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShowCaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.showCaseCountArgs<ExtArgs>
            result: $Utils.Optional<ShowCaseCountAggregateOutputType> | number
          }
        }
      }
      Partners: {
        payload: Prisma.$PartnersPayload<ExtArgs>
        fields: Prisma.PartnersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartnersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartnersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>
          }
          findFirst: {
            args: Prisma.PartnersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartnersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>
          }
          findMany: {
            args: Prisma.PartnersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>[]
          }
          create: {
            args: Prisma.PartnersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>
          }
          createMany: {
            args: Prisma.PartnersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PartnersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>[]
          }
          delete: {
            args: Prisma.PartnersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>
          }
          update: {
            args: Prisma.PartnersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>
          }
          deleteMany: {
            args: Prisma.PartnersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartnersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PartnersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>[]
          }
          upsert: {
            args: Prisma.PartnersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnersPayload>
          }
          aggregate: {
            args: Prisma.PartnersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePartners>
          }
          groupBy: {
            args: Prisma.PartnersGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartnersGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartnersCountArgs<ExtArgs>
            result: $Utils.Optional<PartnersCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    region?: RegionOmit
    brand?: BrandOmit
    capacity?: CapacityOmit
    size?: SizeOmit
    user?: UserOmit
    tools?: ToolsOmit
    master?: MasterOmit
    masterProd?: MasterProdOmit
    product?: ProductOmit
    level?: LevelOmit
    productLevels?: ProductLevelsOmit
    productTools?: ProductToolsOmit
    order?: OrderOmit
    orderProducts?: OrderProductsOmit
    orderMasters?: OrderMastersOmit
    comment?: CommentOmit
    masterRatings?: MasterRatingsOmit
    basket?: BasketOmit
    generalInfo?: GeneralInfoOmit
    contact?: ContactOmit
    fAQ?: FAQOmit
    showCase?: showCaseOmit
    partners?: PartnersOmit
    session?: SessionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type RegionCountOutputType
   */

  export type RegionCountOutputType = {
    User: number
  }

  export type RegionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | RegionCountOutputTypeCountUserArgs
  }

  // Custom InputTypes
  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionCountOutputType
     */
    select?: RegionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type BrandCountOutputType
   */

  export type BrandCountOutputType = {
    Tools: number
  }

  export type BrandCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Tools?: boolean | BrandCountOutputTypeCountToolsArgs
  }

  // Custom InputTypes
  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandCountOutputType
     */
    select?: BrandCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeCountToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolsWhereInput
  }


  /**
   * Count Type CapacityCountOutputType
   */

  export type CapacityCountOutputType = {
    Tools: number
  }

  export type CapacityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Tools?: boolean | CapacityCountOutputTypeCountToolsArgs
  }

  // Custom InputTypes
  /**
   * CapacityCountOutputType without action
   */
  export type CapacityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CapacityCountOutputType
     */
    select?: CapacityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CapacityCountOutputType without action
   */
  export type CapacityCountOutputTypeCountToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolsWhereInput
  }


  /**
   * Count Type SizeCountOutputType
   */

  export type SizeCountOutputType = {
    Tools: number
  }

  export type SizeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Tools?: boolean | SizeCountOutputTypeCountToolsArgs
  }

  // Custom InputTypes
  /**
   * SizeCountOutputType without action
   */
  export type SizeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeCountOutputType
     */
    select?: SizeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SizeCountOutputType without action
   */
  export type SizeCountOutputTypeCountToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolsWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    Basket: number
    Comment: number
    Order: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Basket?: boolean | UserCountOutputTypeCountBasketArgs
    Comment?: boolean | UserCountOutputTypeCountCommentArgs
    Order?: boolean | UserCountOutputTypeCountOrderArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBasketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BasketWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }


  /**
   * Count Type ToolsCountOutputType
   */

  export type ToolsCountOutputType = {
    Basket: number
    OrderProducts: number
    ProductTools: number
  }

  export type ToolsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Basket?: boolean | ToolsCountOutputTypeCountBasketArgs
    OrderProducts?: boolean | ToolsCountOutputTypeCountOrderProductsArgs
    ProductTools?: boolean | ToolsCountOutputTypeCountProductToolsArgs
  }

  // Custom InputTypes
  /**
   * ToolsCountOutputType without action
   */
  export type ToolsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ToolsCountOutputType
     */
    select?: ToolsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ToolsCountOutputType without action
   */
  export type ToolsCountOutputTypeCountBasketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BasketWhereInput
  }

  /**
   * ToolsCountOutputType without action
   */
  export type ToolsCountOutputTypeCountOrderProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderProductsWhereInput
  }

  /**
   * ToolsCountOutputType without action
   */
  export type ToolsCountOutputTypeCountProductToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductToolsWhereInput
  }


  /**
   * Count Type MasterCountOutputType
   */

  export type MasterCountOutputType = {
    MasterProd: number
    OrderMasters: number
    MasterRatings: number
  }

  export type MasterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MasterProd?: boolean | MasterCountOutputTypeCountMasterProdArgs
    OrderMasters?: boolean | MasterCountOutputTypeCountOrderMastersArgs
    MasterRatings?: boolean | MasterCountOutputTypeCountMasterRatingsArgs
  }

  // Custom InputTypes
  /**
   * MasterCountOutputType without action
   */
  export type MasterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterCountOutputType
     */
    select?: MasterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MasterCountOutputType without action
   */
  export type MasterCountOutputTypeCountMasterProdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterProdWhereInput
  }

  /**
   * MasterCountOutputType without action
   */
  export type MasterCountOutputTypeCountOrderMastersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderMastersWhereInput
  }

  /**
   * MasterCountOutputType without action
   */
  export type MasterCountOutputTypeCountMasterRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterRatingsWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    MasterProd: number
    Basket: number
    productLevels: number
    ProductTools: number
    OrderProducts: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MasterProd?: boolean | ProductCountOutputTypeCountMasterProdArgs
    Basket?: boolean | ProductCountOutputTypeCountBasketArgs
    productLevels?: boolean | ProductCountOutputTypeCountProductLevelsArgs
    ProductTools?: boolean | ProductCountOutputTypeCountProductToolsArgs
    OrderProducts?: boolean | ProductCountOutputTypeCountOrderProductsArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountMasterProdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterProdWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountBasketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BasketWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountProductLevelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductLevelsWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountProductToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductToolsWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountOrderProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderProductsWhereInput
  }


  /**
   * Count Type LevelCountOutputType
   */

  export type LevelCountOutputType = {
    MasterProd: number
    productLevels: number
    OrderProducts: number
    Basket: number
  }

  export type LevelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MasterProd?: boolean | LevelCountOutputTypeCountMasterProdArgs
    productLevels?: boolean | LevelCountOutputTypeCountProductLevelsArgs
    OrderProducts?: boolean | LevelCountOutputTypeCountOrderProductsArgs
    Basket?: boolean | LevelCountOutputTypeCountBasketArgs
  }

  // Custom InputTypes
  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelCountOutputType
     */
    select?: LevelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeCountMasterProdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterProdWhereInput
  }

  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeCountProductLevelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductLevelsWhereInput
  }

  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeCountOrderProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderProductsWhereInput
  }

  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeCountBasketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BasketWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    OrderProducts: number
    OrderMasters: number
    Comment: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    OrderProducts?: boolean | OrderCountOutputTypeCountOrderProductsArgs
    OrderMasters?: boolean | OrderCountOutputTypeCountOrderMastersArgs
    Comment?: boolean | OrderCountOutputTypeCountCommentArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountOrderProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderProductsWhereInput
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountOrderMastersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderMastersWhereInput
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Count Type CommentCountOutputType
   */

  export type CommentCountOutputType = {
    MasterRatings: number
  }

  export type CommentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MasterRatings?: boolean | CommentCountOutputTypeCountMasterRatingsArgs
  }

  // Custom InputTypes
  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentCountOutputType
     */
    select?: CommentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountMasterRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterRatingsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Region
   */

  export type AggregateRegion = {
    _count: RegionCountAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  export type RegionMinAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRU: string | null
    nameEng: string | null
  }

  export type RegionMaxAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRU: string | null
    nameEng: string | null
  }

  export type RegionCountAggregateOutputType = {
    id: number
    nameUz: number
    nameRU: number
    nameEng: number
    _all: number
  }


  export type RegionMinAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
  }

  export type RegionMaxAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
  }

  export type RegionCountAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
    _all?: true
  }

  export type RegionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Region to aggregate.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Regions
    **/
    _count?: true | RegionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegionMaxAggregateInputType
  }

  export type GetRegionAggregateType<T extends RegionAggregateArgs> = {
        [P in keyof T & keyof AggregateRegion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegion[P]>
      : GetScalarType<T[P], AggregateRegion[P]>
  }




  export type RegionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegionWhereInput
    orderBy?: RegionOrderByWithAggregationInput | RegionOrderByWithAggregationInput[]
    by: RegionScalarFieldEnum[] | RegionScalarFieldEnum
    having?: RegionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegionCountAggregateInputType | true
    _min?: RegionMinAggregateInputType
    _max?: RegionMaxAggregateInputType
  }

  export type RegionGroupByOutputType = {
    id: string
    nameUz: string
    nameRU: string
    nameEng: string
    _count: RegionCountAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  type GetRegionGroupByPayload<T extends RegionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegionGroupByOutputType[P]>
            : GetScalarType<T[P], RegionGroupByOutputType[P]>
        }
      >
    >


  export type RegionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
    User?: boolean | Region$UserArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["region"]>

  export type RegionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
  }, ExtArgs["result"]["region"]>

  export type RegionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
  }, ExtArgs["result"]["region"]>

  export type RegionSelectScalar = {
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
  }

  export type RegionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameUz" | "nameRU" | "nameEng", ExtArgs["result"]["region"]>
  export type RegionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | Region$UserArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RegionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RegionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RegionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Region"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameUz: string
      nameRU: string
      nameEng: string
    }, ExtArgs["result"]["region"]>
    composites: {}
  }

  type RegionGetPayload<S extends boolean | null | undefined | RegionDefaultArgs> = $Result.GetResult<Prisma.$RegionPayload, S>

  type RegionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RegionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RegionCountAggregateInputType | true
    }

  export interface RegionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Region'], meta: { name: 'Region' } }
    /**
     * Find zero or one Region that matches the filter.
     * @param {RegionFindUniqueArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegionFindUniqueArgs>(args: SelectSubset<T, RegionFindUniqueArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Region that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RegionFindUniqueOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegionFindUniqueOrThrowArgs>(args: SelectSubset<T, RegionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Region that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegionFindFirstArgs>(args?: SelectSubset<T, RegionFindFirstArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Region that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegionFindFirstOrThrowArgs>(args?: SelectSubset<T, RegionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Regions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Regions
     * const regions = await prisma.region.findMany()
     * 
     * // Get first 10 Regions
     * const regions = await prisma.region.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const regionWithIdOnly = await prisma.region.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RegionFindManyArgs>(args?: SelectSubset<T, RegionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Region.
     * @param {RegionCreateArgs} args - Arguments to create a Region.
     * @example
     * // Create one Region
     * const Region = await prisma.region.create({
     *   data: {
     *     // ... data to create a Region
     *   }
     * })
     * 
     */
    create<T extends RegionCreateArgs>(args: SelectSubset<T, RegionCreateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Regions.
     * @param {RegionCreateManyArgs} args - Arguments to create many Regions.
     * @example
     * // Create many Regions
     * const region = await prisma.region.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegionCreateManyArgs>(args?: SelectSubset<T, RegionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Regions and returns the data saved in the database.
     * @param {RegionCreateManyAndReturnArgs} args - Arguments to create many Regions.
     * @example
     * // Create many Regions
     * const region = await prisma.region.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Regions and only return the `id`
     * const regionWithIdOnly = await prisma.region.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegionCreateManyAndReturnArgs>(args?: SelectSubset<T, RegionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Region.
     * @param {RegionDeleteArgs} args - Arguments to delete one Region.
     * @example
     * // Delete one Region
     * const Region = await prisma.region.delete({
     *   where: {
     *     // ... filter to delete one Region
     *   }
     * })
     * 
     */
    delete<T extends RegionDeleteArgs>(args: SelectSubset<T, RegionDeleteArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Region.
     * @param {RegionUpdateArgs} args - Arguments to update one Region.
     * @example
     * // Update one Region
     * const region = await prisma.region.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegionUpdateArgs>(args: SelectSubset<T, RegionUpdateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Regions.
     * @param {RegionDeleteManyArgs} args - Arguments to filter Regions to delete.
     * @example
     * // Delete a few Regions
     * const { count } = await prisma.region.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegionDeleteManyArgs>(args?: SelectSubset<T, RegionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Regions
     * const region = await prisma.region.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegionUpdateManyArgs>(args: SelectSubset<T, RegionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Regions and returns the data updated in the database.
     * @param {RegionUpdateManyAndReturnArgs} args - Arguments to update many Regions.
     * @example
     * // Update many Regions
     * const region = await prisma.region.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Regions and only return the `id`
     * const regionWithIdOnly = await prisma.region.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RegionUpdateManyAndReturnArgs>(args: SelectSubset<T, RegionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Region.
     * @param {RegionUpsertArgs} args - Arguments to update or create a Region.
     * @example
     * // Update or create a Region
     * const region = await prisma.region.upsert({
     *   create: {
     *     // ... data to create a Region
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Region we want to update
     *   }
     * })
     */
    upsert<T extends RegionUpsertArgs>(args: SelectSubset<T, RegionUpsertArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionCountArgs} args - Arguments to filter Regions to count.
     * @example
     * // Count the number of Regions
     * const count = await prisma.region.count({
     *   where: {
     *     // ... the filter for the Regions we want to count
     *   }
     * })
    **/
    count<T extends RegionCountArgs>(
      args?: Subset<T, RegionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegionAggregateArgs>(args: Subset<T, RegionAggregateArgs>): Prisma.PrismaPromise<GetRegionAggregateType<T>>

    /**
     * Group by Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegionGroupByArgs['orderBy'] }
        : { orderBy?: RegionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Region model
   */
  readonly fields: RegionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Region.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends Region$UserArgs<ExtArgs> = {}>(args?: Subset<T, Region$UserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Region model
   */
  interface RegionFieldRefs {
    readonly id: FieldRef<"Region", 'String'>
    readonly nameUz: FieldRef<"Region", 'String'>
    readonly nameRU: FieldRef<"Region", 'String'>
    readonly nameEng: FieldRef<"Region", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Region findUnique
   */
  export type RegionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findUniqueOrThrow
   */
  export type RegionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findFirst
   */
  export type RegionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findFirstOrThrow
   */
  export type RegionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findMany
   */
  export type RegionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Regions to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region create
   */
  export type RegionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to create a Region.
     */
    data: XOR<RegionCreateInput, RegionUncheckedCreateInput>
  }

  /**
   * Region createMany
   */
  export type RegionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Region createManyAndReturn
   */
  export type RegionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Region update
   */
  export type RegionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to update a Region.
     */
    data: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
    /**
     * Choose, which Region to update.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region updateMany
   */
  export type RegionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Regions.
     */
    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
    /**
     * Filter which Regions to update
     */
    where?: RegionWhereInput
    /**
     * Limit how many Regions to update.
     */
    limit?: number
  }

  /**
   * Region updateManyAndReturn
   */
  export type RegionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * The data used to update Regions.
     */
    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
    /**
     * Filter which Regions to update
     */
    where?: RegionWhereInput
    /**
     * Limit how many Regions to update.
     */
    limit?: number
  }

  /**
   * Region upsert
   */
  export type RegionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The filter to search for the Region to update in case it exists.
     */
    where: RegionWhereUniqueInput
    /**
     * In case the Region found by the `where` argument doesn't exist, create a new Region with this data.
     */
    create: XOR<RegionCreateInput, RegionUncheckedCreateInput>
    /**
     * In case the Region was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
  }

  /**
   * Region delete
   */
  export type RegionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter which Region to delete.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region deleteMany
   */
  export type RegionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Regions to delete
     */
    where?: RegionWhereInput
    /**
     * Limit how many Regions to delete.
     */
    limit?: number
  }

  /**
   * Region.User
   */
  export type Region$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Region without action
   */
  export type RegionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
  }


  /**
   * Model Brand
   */

  export type AggregateBrand = {
    _count: BrandCountAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  export type BrandMinAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRU: string | null
    nameEng: string | null
  }

  export type BrandMaxAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRU: string | null
    nameEng: string | null
  }

  export type BrandCountAggregateOutputType = {
    id: number
    nameUz: number
    nameRU: number
    nameEng: number
    _all: number
  }


  export type BrandMinAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
  }

  export type BrandMaxAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
  }

  export type BrandCountAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
    _all?: true
  }

  export type BrandAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brand to aggregate.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Brands
    **/
    _count?: true | BrandCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrandMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrandMaxAggregateInputType
  }

  export type GetBrandAggregateType<T extends BrandAggregateArgs> = {
        [P in keyof T & keyof AggregateBrand]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrand[P]>
      : GetScalarType<T[P], AggregateBrand[P]>
  }




  export type BrandGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandWhereInput
    orderBy?: BrandOrderByWithAggregationInput | BrandOrderByWithAggregationInput[]
    by: BrandScalarFieldEnum[] | BrandScalarFieldEnum
    having?: BrandScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrandCountAggregateInputType | true
    _min?: BrandMinAggregateInputType
    _max?: BrandMaxAggregateInputType
  }

  export type BrandGroupByOutputType = {
    id: string
    nameUz: string
    nameRU: string
    nameEng: string
    _count: BrandCountAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  type GetBrandGroupByPayload<T extends BrandGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrandGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrandGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrandGroupByOutputType[P]>
            : GetScalarType<T[P], BrandGroupByOutputType[P]>
        }
      >
    >


  export type BrandSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
    Tools?: boolean | Brand$ToolsArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectScalar = {
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
  }

  export type BrandOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameUz" | "nameRU" | "nameEng", ExtArgs["result"]["brand"]>
  export type BrandInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Tools?: boolean | Brand$ToolsArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BrandIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type BrandIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BrandPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Brand"
    objects: {
      Tools: Prisma.$ToolsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameUz: string
      nameRU: string
      nameEng: string
    }, ExtArgs["result"]["brand"]>
    composites: {}
  }

  type BrandGetPayload<S extends boolean | null | undefined | BrandDefaultArgs> = $Result.GetResult<Prisma.$BrandPayload, S>

  type BrandCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BrandFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BrandCountAggregateInputType | true
    }

  export interface BrandDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Brand'], meta: { name: 'Brand' } }
    /**
     * Find zero or one Brand that matches the filter.
     * @param {BrandFindUniqueArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BrandFindUniqueArgs>(args: SelectSubset<T, BrandFindUniqueArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Brand that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BrandFindUniqueOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BrandFindUniqueOrThrowArgs>(args: SelectSubset<T, BrandFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BrandFindFirstArgs>(args?: SelectSubset<T, BrandFindFirstArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BrandFindFirstOrThrowArgs>(args?: SelectSubset<T, BrandFindFirstOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Brands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brands
     * const brands = await prisma.brand.findMany()
     * 
     * // Get first 10 Brands
     * const brands = await prisma.brand.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brandWithIdOnly = await prisma.brand.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BrandFindManyArgs>(args?: SelectSubset<T, BrandFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Brand.
     * @param {BrandCreateArgs} args - Arguments to create a Brand.
     * @example
     * // Create one Brand
     * const Brand = await prisma.brand.create({
     *   data: {
     *     // ... data to create a Brand
     *   }
     * })
     * 
     */
    create<T extends BrandCreateArgs>(args: SelectSubset<T, BrandCreateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Brands.
     * @param {BrandCreateManyArgs} args - Arguments to create many Brands.
     * @example
     * // Create many Brands
     * const brand = await prisma.brand.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BrandCreateManyArgs>(args?: SelectSubset<T, BrandCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Brands and returns the data saved in the database.
     * @param {BrandCreateManyAndReturnArgs} args - Arguments to create many Brands.
     * @example
     * // Create many Brands
     * const brand = await prisma.brand.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Brands and only return the `id`
     * const brandWithIdOnly = await prisma.brand.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BrandCreateManyAndReturnArgs>(args?: SelectSubset<T, BrandCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Brand.
     * @param {BrandDeleteArgs} args - Arguments to delete one Brand.
     * @example
     * // Delete one Brand
     * const Brand = await prisma.brand.delete({
     *   where: {
     *     // ... filter to delete one Brand
     *   }
     * })
     * 
     */
    delete<T extends BrandDeleteArgs>(args: SelectSubset<T, BrandDeleteArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Brand.
     * @param {BrandUpdateArgs} args - Arguments to update one Brand.
     * @example
     * // Update one Brand
     * const brand = await prisma.brand.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BrandUpdateArgs>(args: SelectSubset<T, BrandUpdateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Brands.
     * @param {BrandDeleteManyArgs} args - Arguments to filter Brands to delete.
     * @example
     * // Delete a few Brands
     * const { count } = await prisma.brand.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BrandDeleteManyArgs>(args?: SelectSubset<T, BrandDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brands
     * const brand = await prisma.brand.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BrandUpdateManyArgs>(args: SelectSubset<T, BrandUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands and returns the data updated in the database.
     * @param {BrandUpdateManyAndReturnArgs} args - Arguments to update many Brands.
     * @example
     * // Update many Brands
     * const brand = await prisma.brand.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Brands and only return the `id`
     * const brandWithIdOnly = await prisma.brand.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BrandUpdateManyAndReturnArgs>(args: SelectSubset<T, BrandUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Brand.
     * @param {BrandUpsertArgs} args - Arguments to update or create a Brand.
     * @example
     * // Update or create a Brand
     * const brand = await prisma.brand.upsert({
     *   create: {
     *     // ... data to create a Brand
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brand we want to update
     *   }
     * })
     */
    upsert<T extends BrandUpsertArgs>(args: SelectSubset<T, BrandUpsertArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandCountArgs} args - Arguments to filter Brands to count.
     * @example
     * // Count the number of Brands
     * const count = await prisma.brand.count({
     *   where: {
     *     // ... the filter for the Brands we want to count
     *   }
     * })
    **/
    count<T extends BrandCountArgs>(
      args?: Subset<T, BrandCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrandCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrandAggregateArgs>(args: Subset<T, BrandAggregateArgs>): Prisma.PrismaPromise<GetBrandAggregateType<T>>

    /**
     * Group by Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BrandGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BrandGroupByArgs['orderBy'] }
        : { orderBy?: BrandGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BrandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Brand model
   */
  readonly fields: BrandFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Brand.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BrandClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Tools<T extends Brand$ToolsArgs<ExtArgs> = {}>(args?: Subset<T, Brand$ToolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Brand model
   */
  interface BrandFieldRefs {
    readonly id: FieldRef<"Brand", 'String'>
    readonly nameUz: FieldRef<"Brand", 'String'>
    readonly nameRU: FieldRef<"Brand", 'String'>
    readonly nameEng: FieldRef<"Brand", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Brand findUnique
   */
  export type BrandFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findUniqueOrThrow
   */
  export type BrandFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findFirst
   */
  export type BrandFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findFirstOrThrow
   */
  export type BrandFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findMany
   */
  export type BrandFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brands to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand create
   */
  export type BrandCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to create a Brand.
     */
    data: XOR<BrandCreateInput, BrandUncheckedCreateInput>
  }

  /**
   * Brand createMany
   */
  export type BrandCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Brands.
     */
    data: BrandCreateManyInput | BrandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Brand createManyAndReturn
   */
  export type BrandCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * The data used to create many Brands.
     */
    data: BrandCreateManyInput | BrandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Brand update
   */
  export type BrandUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to update a Brand.
     */
    data: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
    /**
     * Choose, which Brand to update.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand updateMany
   */
  export type BrandUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Brands.
     */
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to update.
     */
    limit?: number
  }

  /**
   * Brand updateManyAndReturn
   */
  export type BrandUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * The data used to update Brands.
     */
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to update.
     */
    limit?: number
  }

  /**
   * Brand upsert
   */
  export type BrandUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The filter to search for the Brand to update in case it exists.
     */
    where: BrandWhereUniqueInput
    /**
     * In case the Brand found by the `where` argument doesn't exist, create a new Brand with this data.
     */
    create: XOR<BrandCreateInput, BrandUncheckedCreateInput>
    /**
     * In case the Brand was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
  }

  /**
   * Brand delete
   */
  export type BrandDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter which Brand to delete.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand deleteMany
   */
  export type BrandDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brands to delete
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to delete.
     */
    limit?: number
  }

  /**
   * Brand.Tools
   */
  export type Brand$ToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    where?: ToolsWhereInput
    orderBy?: ToolsOrderByWithRelationInput | ToolsOrderByWithRelationInput[]
    cursor?: ToolsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ToolsScalarFieldEnum | ToolsScalarFieldEnum[]
  }

  /**
   * Brand without action
   */
  export type BrandDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
  }


  /**
   * Model Capacity
   */

  export type AggregateCapacity = {
    _count: CapacityCountAggregateOutputType | null
    _min: CapacityMinAggregateOutputType | null
    _max: CapacityMaxAggregateOutputType | null
  }

  export type CapacityMinAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRU: string | null
    nameEng: string | null
  }

  export type CapacityMaxAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRU: string | null
    nameEng: string | null
  }

  export type CapacityCountAggregateOutputType = {
    id: number
    nameUz: number
    nameRU: number
    nameEng: number
    _all: number
  }


  export type CapacityMinAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
  }

  export type CapacityMaxAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
  }

  export type CapacityCountAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
    _all?: true
  }

  export type CapacityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Capacity to aggregate.
     */
    where?: CapacityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Capacities to fetch.
     */
    orderBy?: CapacityOrderByWithRelationInput | CapacityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CapacityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Capacities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Capacities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Capacities
    **/
    _count?: true | CapacityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CapacityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CapacityMaxAggregateInputType
  }

  export type GetCapacityAggregateType<T extends CapacityAggregateArgs> = {
        [P in keyof T & keyof AggregateCapacity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCapacity[P]>
      : GetScalarType<T[P], AggregateCapacity[P]>
  }




  export type CapacityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CapacityWhereInput
    orderBy?: CapacityOrderByWithAggregationInput | CapacityOrderByWithAggregationInput[]
    by: CapacityScalarFieldEnum[] | CapacityScalarFieldEnum
    having?: CapacityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CapacityCountAggregateInputType | true
    _min?: CapacityMinAggregateInputType
    _max?: CapacityMaxAggregateInputType
  }

  export type CapacityGroupByOutputType = {
    id: string
    nameUz: string
    nameRU: string
    nameEng: string
    _count: CapacityCountAggregateOutputType | null
    _min: CapacityMinAggregateOutputType | null
    _max: CapacityMaxAggregateOutputType | null
  }

  type GetCapacityGroupByPayload<T extends CapacityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CapacityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CapacityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CapacityGroupByOutputType[P]>
            : GetScalarType<T[P], CapacityGroupByOutputType[P]>
        }
      >
    >


  export type CapacitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
    Tools?: boolean | Capacity$ToolsArgs<ExtArgs>
    _count?: boolean | CapacityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["capacity"]>

  export type CapacitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
  }, ExtArgs["result"]["capacity"]>

  export type CapacitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
  }, ExtArgs["result"]["capacity"]>

  export type CapacitySelectScalar = {
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
  }

  export type CapacityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameUz" | "nameRU" | "nameEng", ExtArgs["result"]["capacity"]>
  export type CapacityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Tools?: boolean | Capacity$ToolsArgs<ExtArgs>
    _count?: boolean | CapacityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CapacityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CapacityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CapacityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Capacity"
    objects: {
      Tools: Prisma.$ToolsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameUz: string
      nameRU: string
      nameEng: string
    }, ExtArgs["result"]["capacity"]>
    composites: {}
  }

  type CapacityGetPayload<S extends boolean | null | undefined | CapacityDefaultArgs> = $Result.GetResult<Prisma.$CapacityPayload, S>

  type CapacityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CapacityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CapacityCountAggregateInputType | true
    }

  export interface CapacityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Capacity'], meta: { name: 'Capacity' } }
    /**
     * Find zero or one Capacity that matches the filter.
     * @param {CapacityFindUniqueArgs} args - Arguments to find a Capacity
     * @example
     * // Get one Capacity
     * const capacity = await prisma.capacity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CapacityFindUniqueArgs>(args: SelectSubset<T, CapacityFindUniqueArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Capacity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CapacityFindUniqueOrThrowArgs} args - Arguments to find a Capacity
     * @example
     * // Get one Capacity
     * const capacity = await prisma.capacity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CapacityFindUniqueOrThrowArgs>(args: SelectSubset<T, CapacityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Capacity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapacityFindFirstArgs} args - Arguments to find a Capacity
     * @example
     * // Get one Capacity
     * const capacity = await prisma.capacity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CapacityFindFirstArgs>(args?: SelectSubset<T, CapacityFindFirstArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Capacity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapacityFindFirstOrThrowArgs} args - Arguments to find a Capacity
     * @example
     * // Get one Capacity
     * const capacity = await prisma.capacity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CapacityFindFirstOrThrowArgs>(args?: SelectSubset<T, CapacityFindFirstOrThrowArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Capacities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapacityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Capacities
     * const capacities = await prisma.capacity.findMany()
     * 
     * // Get first 10 Capacities
     * const capacities = await prisma.capacity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const capacityWithIdOnly = await prisma.capacity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CapacityFindManyArgs>(args?: SelectSubset<T, CapacityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Capacity.
     * @param {CapacityCreateArgs} args - Arguments to create a Capacity.
     * @example
     * // Create one Capacity
     * const Capacity = await prisma.capacity.create({
     *   data: {
     *     // ... data to create a Capacity
     *   }
     * })
     * 
     */
    create<T extends CapacityCreateArgs>(args: SelectSubset<T, CapacityCreateArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Capacities.
     * @param {CapacityCreateManyArgs} args - Arguments to create many Capacities.
     * @example
     * // Create many Capacities
     * const capacity = await prisma.capacity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CapacityCreateManyArgs>(args?: SelectSubset<T, CapacityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Capacities and returns the data saved in the database.
     * @param {CapacityCreateManyAndReturnArgs} args - Arguments to create many Capacities.
     * @example
     * // Create many Capacities
     * const capacity = await prisma.capacity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Capacities and only return the `id`
     * const capacityWithIdOnly = await prisma.capacity.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CapacityCreateManyAndReturnArgs>(args?: SelectSubset<T, CapacityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Capacity.
     * @param {CapacityDeleteArgs} args - Arguments to delete one Capacity.
     * @example
     * // Delete one Capacity
     * const Capacity = await prisma.capacity.delete({
     *   where: {
     *     // ... filter to delete one Capacity
     *   }
     * })
     * 
     */
    delete<T extends CapacityDeleteArgs>(args: SelectSubset<T, CapacityDeleteArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Capacity.
     * @param {CapacityUpdateArgs} args - Arguments to update one Capacity.
     * @example
     * // Update one Capacity
     * const capacity = await prisma.capacity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CapacityUpdateArgs>(args: SelectSubset<T, CapacityUpdateArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Capacities.
     * @param {CapacityDeleteManyArgs} args - Arguments to filter Capacities to delete.
     * @example
     * // Delete a few Capacities
     * const { count } = await prisma.capacity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CapacityDeleteManyArgs>(args?: SelectSubset<T, CapacityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Capacities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapacityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Capacities
     * const capacity = await prisma.capacity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CapacityUpdateManyArgs>(args: SelectSubset<T, CapacityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Capacities and returns the data updated in the database.
     * @param {CapacityUpdateManyAndReturnArgs} args - Arguments to update many Capacities.
     * @example
     * // Update many Capacities
     * const capacity = await prisma.capacity.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Capacities and only return the `id`
     * const capacityWithIdOnly = await prisma.capacity.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CapacityUpdateManyAndReturnArgs>(args: SelectSubset<T, CapacityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Capacity.
     * @param {CapacityUpsertArgs} args - Arguments to update or create a Capacity.
     * @example
     * // Update or create a Capacity
     * const capacity = await prisma.capacity.upsert({
     *   create: {
     *     // ... data to create a Capacity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Capacity we want to update
     *   }
     * })
     */
    upsert<T extends CapacityUpsertArgs>(args: SelectSubset<T, CapacityUpsertArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Capacities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapacityCountArgs} args - Arguments to filter Capacities to count.
     * @example
     * // Count the number of Capacities
     * const count = await prisma.capacity.count({
     *   where: {
     *     // ... the filter for the Capacities we want to count
     *   }
     * })
    **/
    count<T extends CapacityCountArgs>(
      args?: Subset<T, CapacityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CapacityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Capacity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapacityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CapacityAggregateArgs>(args: Subset<T, CapacityAggregateArgs>): Prisma.PrismaPromise<GetCapacityAggregateType<T>>

    /**
     * Group by Capacity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapacityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CapacityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CapacityGroupByArgs['orderBy'] }
        : { orderBy?: CapacityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CapacityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCapacityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Capacity model
   */
  readonly fields: CapacityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Capacity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CapacityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Tools<T extends Capacity$ToolsArgs<ExtArgs> = {}>(args?: Subset<T, Capacity$ToolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Capacity model
   */
  interface CapacityFieldRefs {
    readonly id: FieldRef<"Capacity", 'String'>
    readonly nameUz: FieldRef<"Capacity", 'String'>
    readonly nameRU: FieldRef<"Capacity", 'String'>
    readonly nameEng: FieldRef<"Capacity", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Capacity findUnique
   */
  export type CapacityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * Filter, which Capacity to fetch.
     */
    where: CapacityWhereUniqueInput
  }

  /**
   * Capacity findUniqueOrThrow
   */
  export type CapacityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * Filter, which Capacity to fetch.
     */
    where: CapacityWhereUniqueInput
  }

  /**
   * Capacity findFirst
   */
  export type CapacityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * Filter, which Capacity to fetch.
     */
    where?: CapacityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Capacities to fetch.
     */
    orderBy?: CapacityOrderByWithRelationInput | CapacityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Capacities.
     */
    cursor?: CapacityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Capacities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Capacities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Capacities.
     */
    distinct?: CapacityScalarFieldEnum | CapacityScalarFieldEnum[]
  }

  /**
   * Capacity findFirstOrThrow
   */
  export type CapacityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * Filter, which Capacity to fetch.
     */
    where?: CapacityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Capacities to fetch.
     */
    orderBy?: CapacityOrderByWithRelationInput | CapacityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Capacities.
     */
    cursor?: CapacityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Capacities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Capacities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Capacities.
     */
    distinct?: CapacityScalarFieldEnum | CapacityScalarFieldEnum[]
  }

  /**
   * Capacity findMany
   */
  export type CapacityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * Filter, which Capacities to fetch.
     */
    where?: CapacityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Capacities to fetch.
     */
    orderBy?: CapacityOrderByWithRelationInput | CapacityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Capacities.
     */
    cursor?: CapacityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Capacities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Capacities.
     */
    skip?: number
    distinct?: CapacityScalarFieldEnum | CapacityScalarFieldEnum[]
  }

  /**
   * Capacity create
   */
  export type CapacityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * The data needed to create a Capacity.
     */
    data: XOR<CapacityCreateInput, CapacityUncheckedCreateInput>
  }

  /**
   * Capacity createMany
   */
  export type CapacityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Capacities.
     */
    data: CapacityCreateManyInput | CapacityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Capacity createManyAndReturn
   */
  export type CapacityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * The data used to create many Capacities.
     */
    data: CapacityCreateManyInput | CapacityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Capacity update
   */
  export type CapacityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * The data needed to update a Capacity.
     */
    data: XOR<CapacityUpdateInput, CapacityUncheckedUpdateInput>
    /**
     * Choose, which Capacity to update.
     */
    where: CapacityWhereUniqueInput
  }

  /**
   * Capacity updateMany
   */
  export type CapacityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Capacities.
     */
    data: XOR<CapacityUpdateManyMutationInput, CapacityUncheckedUpdateManyInput>
    /**
     * Filter which Capacities to update
     */
    where?: CapacityWhereInput
    /**
     * Limit how many Capacities to update.
     */
    limit?: number
  }

  /**
   * Capacity updateManyAndReturn
   */
  export type CapacityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * The data used to update Capacities.
     */
    data: XOR<CapacityUpdateManyMutationInput, CapacityUncheckedUpdateManyInput>
    /**
     * Filter which Capacities to update
     */
    where?: CapacityWhereInput
    /**
     * Limit how many Capacities to update.
     */
    limit?: number
  }

  /**
   * Capacity upsert
   */
  export type CapacityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * The filter to search for the Capacity to update in case it exists.
     */
    where: CapacityWhereUniqueInput
    /**
     * In case the Capacity found by the `where` argument doesn't exist, create a new Capacity with this data.
     */
    create: XOR<CapacityCreateInput, CapacityUncheckedCreateInput>
    /**
     * In case the Capacity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CapacityUpdateInput, CapacityUncheckedUpdateInput>
  }

  /**
   * Capacity delete
   */
  export type CapacityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
    /**
     * Filter which Capacity to delete.
     */
    where: CapacityWhereUniqueInput
  }

  /**
   * Capacity deleteMany
   */
  export type CapacityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Capacities to delete
     */
    where?: CapacityWhereInput
    /**
     * Limit how many Capacities to delete.
     */
    limit?: number
  }

  /**
   * Capacity.Tools
   */
  export type Capacity$ToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    where?: ToolsWhereInput
    orderBy?: ToolsOrderByWithRelationInput | ToolsOrderByWithRelationInput[]
    cursor?: ToolsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ToolsScalarFieldEnum | ToolsScalarFieldEnum[]
  }

  /**
   * Capacity without action
   */
  export type CapacityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capacity
     */
    select?: CapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Capacity
     */
    omit?: CapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapacityInclude<ExtArgs> | null
  }


  /**
   * Model Size
   */

  export type AggregateSize = {
    _count: SizeCountAggregateOutputType | null
    _min: SizeMinAggregateOutputType | null
    _max: SizeMaxAggregateOutputType | null
  }

  export type SizeMinAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRU: string | null
    nameEng: string | null
  }

  export type SizeMaxAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRU: string | null
    nameEng: string | null
  }

  export type SizeCountAggregateOutputType = {
    id: number
    nameUz: number
    nameRU: number
    nameEng: number
    _all: number
  }


  export type SizeMinAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
  }

  export type SizeMaxAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
  }

  export type SizeCountAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
    _all?: true
  }

  export type SizeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Size to aggregate.
     */
    where?: SizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizeOrderByWithRelationInput | SizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sizes
    **/
    _count?: true | SizeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SizeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SizeMaxAggregateInputType
  }

  export type GetSizeAggregateType<T extends SizeAggregateArgs> = {
        [P in keyof T & keyof AggregateSize]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSize[P]>
      : GetScalarType<T[P], AggregateSize[P]>
  }




  export type SizeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SizeWhereInput
    orderBy?: SizeOrderByWithAggregationInput | SizeOrderByWithAggregationInput[]
    by: SizeScalarFieldEnum[] | SizeScalarFieldEnum
    having?: SizeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SizeCountAggregateInputType | true
    _min?: SizeMinAggregateInputType
    _max?: SizeMaxAggregateInputType
  }

  export type SizeGroupByOutputType = {
    id: string
    nameUz: string
    nameRU: string
    nameEng: string
    _count: SizeCountAggregateOutputType | null
    _min: SizeMinAggregateOutputType | null
    _max: SizeMaxAggregateOutputType | null
  }

  type GetSizeGroupByPayload<T extends SizeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SizeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SizeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SizeGroupByOutputType[P]>
            : GetScalarType<T[P], SizeGroupByOutputType[P]>
        }
      >
    >


  export type SizeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
    Tools?: boolean | Size$ToolsArgs<ExtArgs>
    _count?: boolean | SizeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["size"]>

  export type SizeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
  }, ExtArgs["result"]["size"]>

  export type SizeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
  }, ExtArgs["result"]["size"]>

  export type SizeSelectScalar = {
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
  }

  export type SizeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameUz" | "nameRU" | "nameEng", ExtArgs["result"]["size"]>
  export type SizeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Tools?: boolean | Size$ToolsArgs<ExtArgs>
    _count?: boolean | SizeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SizeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SizeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SizePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Size"
    objects: {
      Tools: Prisma.$ToolsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameUz: string
      nameRU: string
      nameEng: string
    }, ExtArgs["result"]["size"]>
    composites: {}
  }

  type SizeGetPayload<S extends boolean | null | undefined | SizeDefaultArgs> = $Result.GetResult<Prisma.$SizePayload, S>

  type SizeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SizeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SizeCountAggregateInputType | true
    }

  export interface SizeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Size'], meta: { name: 'Size' } }
    /**
     * Find zero or one Size that matches the filter.
     * @param {SizeFindUniqueArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SizeFindUniqueArgs>(args: SelectSubset<T, SizeFindUniqueArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Size that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SizeFindUniqueOrThrowArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SizeFindUniqueOrThrowArgs>(args: SelectSubset<T, SizeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Size that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeFindFirstArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SizeFindFirstArgs>(args?: SelectSubset<T, SizeFindFirstArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Size that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeFindFirstOrThrowArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SizeFindFirstOrThrowArgs>(args?: SelectSubset<T, SizeFindFirstOrThrowArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sizes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sizes
     * const sizes = await prisma.size.findMany()
     * 
     * // Get first 10 Sizes
     * const sizes = await prisma.size.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sizeWithIdOnly = await prisma.size.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SizeFindManyArgs>(args?: SelectSubset<T, SizeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Size.
     * @param {SizeCreateArgs} args - Arguments to create a Size.
     * @example
     * // Create one Size
     * const Size = await prisma.size.create({
     *   data: {
     *     // ... data to create a Size
     *   }
     * })
     * 
     */
    create<T extends SizeCreateArgs>(args: SelectSubset<T, SizeCreateArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sizes.
     * @param {SizeCreateManyArgs} args - Arguments to create many Sizes.
     * @example
     * // Create many Sizes
     * const size = await prisma.size.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SizeCreateManyArgs>(args?: SelectSubset<T, SizeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sizes and returns the data saved in the database.
     * @param {SizeCreateManyAndReturnArgs} args - Arguments to create many Sizes.
     * @example
     * // Create many Sizes
     * const size = await prisma.size.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sizes and only return the `id`
     * const sizeWithIdOnly = await prisma.size.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SizeCreateManyAndReturnArgs>(args?: SelectSubset<T, SizeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Size.
     * @param {SizeDeleteArgs} args - Arguments to delete one Size.
     * @example
     * // Delete one Size
     * const Size = await prisma.size.delete({
     *   where: {
     *     // ... filter to delete one Size
     *   }
     * })
     * 
     */
    delete<T extends SizeDeleteArgs>(args: SelectSubset<T, SizeDeleteArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Size.
     * @param {SizeUpdateArgs} args - Arguments to update one Size.
     * @example
     * // Update one Size
     * const size = await prisma.size.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SizeUpdateArgs>(args: SelectSubset<T, SizeUpdateArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sizes.
     * @param {SizeDeleteManyArgs} args - Arguments to filter Sizes to delete.
     * @example
     * // Delete a few Sizes
     * const { count } = await prisma.size.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SizeDeleteManyArgs>(args?: SelectSubset<T, SizeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sizes
     * const size = await prisma.size.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SizeUpdateManyArgs>(args: SelectSubset<T, SizeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sizes and returns the data updated in the database.
     * @param {SizeUpdateManyAndReturnArgs} args - Arguments to update many Sizes.
     * @example
     * // Update many Sizes
     * const size = await prisma.size.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sizes and only return the `id`
     * const sizeWithIdOnly = await prisma.size.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SizeUpdateManyAndReturnArgs>(args: SelectSubset<T, SizeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Size.
     * @param {SizeUpsertArgs} args - Arguments to update or create a Size.
     * @example
     * // Update or create a Size
     * const size = await prisma.size.upsert({
     *   create: {
     *     // ... data to create a Size
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Size we want to update
     *   }
     * })
     */
    upsert<T extends SizeUpsertArgs>(args: SelectSubset<T, SizeUpsertArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeCountArgs} args - Arguments to filter Sizes to count.
     * @example
     * // Count the number of Sizes
     * const count = await prisma.size.count({
     *   where: {
     *     // ... the filter for the Sizes we want to count
     *   }
     * })
    **/
    count<T extends SizeCountArgs>(
      args?: Subset<T, SizeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SizeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Size.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SizeAggregateArgs>(args: Subset<T, SizeAggregateArgs>): Prisma.PrismaPromise<GetSizeAggregateType<T>>

    /**
     * Group by Size.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SizeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SizeGroupByArgs['orderBy'] }
        : { orderBy?: SizeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SizeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSizeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Size model
   */
  readonly fields: SizeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Size.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SizeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Tools<T extends Size$ToolsArgs<ExtArgs> = {}>(args?: Subset<T, Size$ToolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Size model
   */
  interface SizeFieldRefs {
    readonly id: FieldRef<"Size", 'String'>
    readonly nameUz: FieldRef<"Size", 'String'>
    readonly nameRU: FieldRef<"Size", 'String'>
    readonly nameEng: FieldRef<"Size", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Size findUnique
   */
  export type SizeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Size to fetch.
     */
    where: SizeWhereUniqueInput
  }

  /**
   * Size findUniqueOrThrow
   */
  export type SizeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Size to fetch.
     */
    where: SizeWhereUniqueInput
  }

  /**
   * Size findFirst
   */
  export type SizeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Size to fetch.
     */
    where?: SizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizeOrderByWithRelationInput | SizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sizes.
     */
    cursor?: SizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sizes.
     */
    distinct?: SizeScalarFieldEnum | SizeScalarFieldEnum[]
  }

  /**
   * Size findFirstOrThrow
   */
  export type SizeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Size to fetch.
     */
    where?: SizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizeOrderByWithRelationInput | SizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sizes.
     */
    cursor?: SizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sizes.
     */
    distinct?: SizeScalarFieldEnum | SizeScalarFieldEnum[]
  }

  /**
   * Size findMany
   */
  export type SizeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Sizes to fetch.
     */
    where?: SizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizeOrderByWithRelationInput | SizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sizes.
     */
    cursor?: SizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    distinct?: SizeScalarFieldEnum | SizeScalarFieldEnum[]
  }

  /**
   * Size create
   */
  export type SizeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * The data needed to create a Size.
     */
    data: XOR<SizeCreateInput, SizeUncheckedCreateInput>
  }

  /**
   * Size createMany
   */
  export type SizeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sizes.
     */
    data: SizeCreateManyInput | SizeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Size createManyAndReturn
   */
  export type SizeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * The data used to create many Sizes.
     */
    data: SizeCreateManyInput | SizeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Size update
   */
  export type SizeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * The data needed to update a Size.
     */
    data: XOR<SizeUpdateInput, SizeUncheckedUpdateInput>
    /**
     * Choose, which Size to update.
     */
    where: SizeWhereUniqueInput
  }

  /**
   * Size updateMany
   */
  export type SizeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sizes.
     */
    data: XOR<SizeUpdateManyMutationInput, SizeUncheckedUpdateManyInput>
    /**
     * Filter which Sizes to update
     */
    where?: SizeWhereInput
    /**
     * Limit how many Sizes to update.
     */
    limit?: number
  }

  /**
   * Size updateManyAndReturn
   */
  export type SizeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * The data used to update Sizes.
     */
    data: XOR<SizeUpdateManyMutationInput, SizeUncheckedUpdateManyInput>
    /**
     * Filter which Sizes to update
     */
    where?: SizeWhereInput
    /**
     * Limit how many Sizes to update.
     */
    limit?: number
  }

  /**
   * Size upsert
   */
  export type SizeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * The filter to search for the Size to update in case it exists.
     */
    where: SizeWhereUniqueInput
    /**
     * In case the Size found by the `where` argument doesn't exist, create a new Size with this data.
     */
    create: XOR<SizeCreateInput, SizeUncheckedCreateInput>
    /**
     * In case the Size was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SizeUpdateInput, SizeUncheckedUpdateInput>
  }

  /**
   * Size delete
   */
  export type SizeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter which Size to delete.
     */
    where: SizeWhereUniqueInput
  }

  /**
   * Size deleteMany
   */
  export type SizeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sizes to delete
     */
    where?: SizeWhereInput
    /**
     * Limit how many Sizes to delete.
     */
    limit?: number
  }

  /**
   * Size.Tools
   */
  export type Size$ToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    where?: ToolsWhereInput
    orderBy?: ToolsOrderByWithRelationInput | ToolsOrderByWithRelationInput[]
    cursor?: ToolsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ToolsScalarFieldEnum | ToolsScalarFieldEnum[]
  }

  /**
   * Size without action
   */
  export type SizeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    fullName: string | null
    password: string | null
    phoneNumber: string | null
    regionId: string | null
    IIN: string | null
    MFO: string | null
    RS: string | null
    Bank: string | null
    OKED: string | null
    ADDRESS: string | null
    role: $Enums.userRole | null
    status: $Enums.userStatus | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    fullName: string | null
    password: string | null
    phoneNumber: string | null
    regionId: string | null
    IIN: string | null
    MFO: string | null
    RS: string | null
    Bank: string | null
    OKED: string | null
    ADDRESS: string | null
    role: $Enums.userRole | null
    status: $Enums.userStatus | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    fullName: number
    password: number
    phoneNumber: number
    regionId: number
    IIN: number
    MFO: number
    RS: number
    Bank: number
    OKED: number
    ADDRESS: number
    role: number
    status: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    fullName?: true
    password?: true
    phoneNumber?: true
    regionId?: true
    IIN?: true
    MFO?: true
    RS?: true
    Bank?: true
    OKED?: true
    ADDRESS?: true
    role?: true
    status?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    fullName?: true
    password?: true
    phoneNumber?: true
    regionId?: true
    IIN?: true
    MFO?: true
    RS?: true
    Bank?: true
    OKED?: true
    ADDRESS?: true
    role?: true
    status?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    fullName?: true
    password?: true
    phoneNumber?: true
    regionId?: true
    IIN?: true
    MFO?: true
    RS?: true
    Bank?: true
    OKED?: true
    ADDRESS?: true
    role?: true
    status?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    fullName: string
    password: string
    phoneNumber: string
    regionId: string
    IIN: string | null
    MFO: string | null
    RS: string | null
    Bank: string | null
    OKED: string | null
    ADDRESS: string
    role: $Enums.userRole
    status: $Enums.userStatus
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    password?: boolean
    phoneNumber?: boolean
    regionId?: boolean
    IIN?: boolean
    MFO?: boolean
    RS?: boolean
    Bank?: boolean
    OKED?: boolean
    ADDRESS?: boolean
    role?: boolean
    status?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
    Basket?: boolean | User$BasketArgs<ExtArgs>
    Comment?: boolean | User$CommentArgs<ExtArgs>
    Order?: boolean | User$OrderArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    password?: boolean
    phoneNumber?: boolean
    regionId?: boolean
    IIN?: boolean
    MFO?: boolean
    RS?: boolean
    Bank?: boolean
    OKED?: boolean
    ADDRESS?: boolean
    role?: boolean
    status?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    password?: boolean
    phoneNumber?: boolean
    regionId?: boolean
    IIN?: boolean
    MFO?: boolean
    RS?: boolean
    Bank?: boolean
    OKED?: boolean
    ADDRESS?: boolean
    role?: boolean
    status?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    fullName?: boolean
    password?: boolean
    phoneNumber?: boolean
    regionId?: boolean
    IIN?: boolean
    MFO?: boolean
    RS?: boolean
    Bank?: boolean
    OKED?: boolean
    ADDRESS?: boolean
    role?: boolean
    status?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fullName" | "password" | "phoneNumber" | "regionId" | "IIN" | "MFO" | "RS" | "Bank" | "OKED" | "ADDRESS" | "role" | "status", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
    Basket?: boolean | User$BasketArgs<ExtArgs>
    Comment?: boolean | User$CommentArgs<ExtArgs>
    Order?: boolean | User$OrderArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      region: Prisma.$RegionPayload<ExtArgs>
      Basket: Prisma.$BasketPayload<ExtArgs>[]
      Comment: Prisma.$CommentPayload<ExtArgs>[]
      Order: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullName: string
      password: string
      phoneNumber: string
      regionId: string
      IIN: string | null
      MFO: string | null
      RS: string | null
      Bank: string | null
      OKED: string | null
      ADDRESS: string
      role: $Enums.userRole
      status: $Enums.userStatus
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    region<T extends RegionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RegionDefaultArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Basket<T extends User$BasketArgs<ExtArgs> = {}>(args?: Subset<T, User$BasketArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Comment<T extends User$CommentArgs<ExtArgs> = {}>(args?: Subset<T, User$CommentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Order<T extends User$OrderArgs<ExtArgs> = {}>(args?: Subset<T, User$OrderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly regionId: FieldRef<"User", 'String'>
    readonly IIN: FieldRef<"User", 'String'>
    readonly MFO: FieldRef<"User", 'String'>
    readonly RS: FieldRef<"User", 'String'>
    readonly Bank: FieldRef<"User", 'String'>
    readonly OKED: FieldRef<"User", 'String'>
    readonly ADDRESS: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'userRole'>
    readonly status: FieldRef<"User", 'userStatus'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.Basket
   */
  export type User$BasketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    where?: BasketWhereInput
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    cursor?: BasketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * User.Comment
   */
  export type User$CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.Order
   */
  export type User$OrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Tools
   */

  export type AggregateTools = {
    _count: ToolsCountAggregateOutputType | null
    _avg: ToolsAvgAggregateOutputType | null
    _sum: ToolsSumAggregateOutputType | null
    _min: ToolsMinAggregateOutputType | null
    _max: ToolsMaxAggregateOutputType | null
  }

  export type ToolsAvgAggregateOutputType = {
    price: number | null
    quantity: number | null
    code: number | null
  }

  export type ToolsSumAggregateOutputType = {
    price: number | null
    quantity: number | null
    code: number | null
  }

  export type ToolsMinAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRU: string | null
    nameEng: string | null
    descriptionUz: string | null
    descriptionRU: string | null
    descriptionEng: string | null
    price: number | null
    quantity: number | null
    code: number | null
    image: string | null
    brandId: string | null
    isActive: boolean | null
    capacityId: string | null
    sizeId: string | null
  }

  export type ToolsMaxAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRU: string | null
    nameEng: string | null
    descriptionUz: string | null
    descriptionRU: string | null
    descriptionEng: string | null
    price: number | null
    quantity: number | null
    code: number | null
    image: string | null
    brandId: string | null
    isActive: boolean | null
    capacityId: string | null
    sizeId: string | null
  }

  export type ToolsCountAggregateOutputType = {
    id: number
    nameUz: number
    nameRU: number
    nameEng: number
    descriptionUz: number
    descriptionRU: number
    descriptionEng: number
    price: number
    quantity: number
    code: number
    image: number
    brandId: number
    isActive: number
    capacityId: number
    sizeId: number
    _all: number
  }


  export type ToolsAvgAggregateInputType = {
    price?: true
    quantity?: true
    code?: true
  }

  export type ToolsSumAggregateInputType = {
    price?: true
    quantity?: true
    code?: true
  }

  export type ToolsMinAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
    descriptionUz?: true
    descriptionRU?: true
    descriptionEng?: true
    price?: true
    quantity?: true
    code?: true
    image?: true
    brandId?: true
    isActive?: true
    capacityId?: true
    sizeId?: true
  }

  export type ToolsMaxAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
    descriptionUz?: true
    descriptionRU?: true
    descriptionEng?: true
    price?: true
    quantity?: true
    code?: true
    image?: true
    brandId?: true
    isActive?: true
    capacityId?: true
    sizeId?: true
  }

  export type ToolsCountAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
    descriptionUz?: true
    descriptionRU?: true
    descriptionEng?: true
    price?: true
    quantity?: true
    code?: true
    image?: true
    brandId?: true
    isActive?: true
    capacityId?: true
    sizeId?: true
    _all?: true
  }

  export type ToolsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tools to aggregate.
     */
    where?: ToolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tools to fetch.
     */
    orderBy?: ToolsOrderByWithRelationInput | ToolsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ToolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tools
    **/
    _count?: true | ToolsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ToolsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ToolsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ToolsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ToolsMaxAggregateInputType
  }

  export type GetToolsAggregateType<T extends ToolsAggregateArgs> = {
        [P in keyof T & keyof AggregateTools]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTools[P]>
      : GetScalarType<T[P], AggregateTools[P]>
  }




  export type ToolsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolsWhereInput
    orderBy?: ToolsOrderByWithAggregationInput | ToolsOrderByWithAggregationInput[]
    by: ToolsScalarFieldEnum[] | ToolsScalarFieldEnum
    having?: ToolsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ToolsCountAggregateInputType | true
    _avg?: ToolsAvgAggregateInputType
    _sum?: ToolsSumAggregateInputType
    _min?: ToolsMinAggregateInputType
    _max?: ToolsMaxAggregateInputType
  }

  export type ToolsGroupByOutputType = {
    id: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    price: number
    quantity: number
    code: number
    image: string
    brandId: string
    isActive: boolean
    capacityId: string
    sizeId: string
    _count: ToolsCountAggregateOutputType | null
    _avg: ToolsAvgAggregateOutputType | null
    _sum: ToolsSumAggregateOutputType | null
    _min: ToolsMinAggregateOutputType | null
    _max: ToolsMaxAggregateOutputType | null
  }

  type GetToolsGroupByPayload<T extends ToolsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ToolsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ToolsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ToolsGroupByOutputType[P]>
            : GetScalarType<T[P], ToolsGroupByOutputType[P]>
        }
      >
    >


  export type ToolsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
    descriptionUz?: boolean
    descriptionRU?: boolean
    descriptionEng?: boolean
    price?: boolean
    quantity?: boolean
    code?: boolean
    image?: boolean
    brandId?: boolean
    isActive?: boolean
    capacityId?: boolean
    sizeId?: boolean
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    capacity?: boolean | CapacityDefaultArgs<ExtArgs>
    size?: boolean | SizeDefaultArgs<ExtArgs>
    Basket?: boolean | Tools$BasketArgs<ExtArgs>
    OrderProducts?: boolean | Tools$OrderProductsArgs<ExtArgs>
    ProductTools?: boolean | Tools$ProductToolsArgs<ExtArgs>
    _count?: boolean | ToolsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tools"]>

  export type ToolsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
    descriptionUz?: boolean
    descriptionRU?: boolean
    descriptionEng?: boolean
    price?: boolean
    quantity?: boolean
    code?: boolean
    image?: boolean
    brandId?: boolean
    isActive?: boolean
    capacityId?: boolean
    sizeId?: boolean
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    capacity?: boolean | CapacityDefaultArgs<ExtArgs>
    size?: boolean | SizeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tools"]>

  export type ToolsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
    descriptionUz?: boolean
    descriptionRU?: boolean
    descriptionEng?: boolean
    price?: boolean
    quantity?: boolean
    code?: boolean
    image?: boolean
    brandId?: boolean
    isActive?: boolean
    capacityId?: boolean
    sizeId?: boolean
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    capacity?: boolean | CapacityDefaultArgs<ExtArgs>
    size?: boolean | SizeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tools"]>

  export type ToolsSelectScalar = {
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
    descriptionUz?: boolean
    descriptionRU?: boolean
    descriptionEng?: boolean
    price?: boolean
    quantity?: boolean
    code?: boolean
    image?: boolean
    brandId?: boolean
    isActive?: boolean
    capacityId?: boolean
    sizeId?: boolean
  }

  export type ToolsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameUz" | "nameRU" | "nameEng" | "descriptionUz" | "descriptionRU" | "descriptionEng" | "price" | "quantity" | "code" | "image" | "brandId" | "isActive" | "capacityId" | "sizeId", ExtArgs["result"]["tools"]>
  export type ToolsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    capacity?: boolean | CapacityDefaultArgs<ExtArgs>
    size?: boolean | SizeDefaultArgs<ExtArgs>
    Basket?: boolean | Tools$BasketArgs<ExtArgs>
    OrderProducts?: boolean | Tools$OrderProductsArgs<ExtArgs>
    ProductTools?: boolean | Tools$ProductToolsArgs<ExtArgs>
    _count?: boolean | ToolsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ToolsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    capacity?: boolean | CapacityDefaultArgs<ExtArgs>
    size?: boolean | SizeDefaultArgs<ExtArgs>
  }
  export type ToolsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    capacity?: boolean | CapacityDefaultArgs<ExtArgs>
    size?: boolean | SizeDefaultArgs<ExtArgs>
  }

  export type $ToolsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tools"
    objects: {
      brand: Prisma.$BrandPayload<ExtArgs>
      capacity: Prisma.$CapacityPayload<ExtArgs>
      size: Prisma.$SizePayload<ExtArgs>
      Basket: Prisma.$BasketPayload<ExtArgs>[]
      OrderProducts: Prisma.$OrderProductsPayload<ExtArgs>[]
      ProductTools: Prisma.$ProductToolsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameUz: string
      nameRU: string
      nameEng: string
      descriptionUz: string
      descriptionRU: string
      descriptionEng: string
      price: number
      quantity: number
      code: number
      image: string
      brandId: string
      isActive: boolean
      capacityId: string
      sizeId: string
    }, ExtArgs["result"]["tools"]>
    composites: {}
  }

  type ToolsGetPayload<S extends boolean | null | undefined | ToolsDefaultArgs> = $Result.GetResult<Prisma.$ToolsPayload, S>

  type ToolsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ToolsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ToolsCountAggregateInputType | true
    }

  export interface ToolsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tools'], meta: { name: 'Tools' } }
    /**
     * Find zero or one Tools that matches the filter.
     * @param {ToolsFindUniqueArgs} args - Arguments to find a Tools
     * @example
     * // Get one Tools
     * const tools = await prisma.tools.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ToolsFindUniqueArgs>(args: SelectSubset<T, ToolsFindUniqueArgs<ExtArgs>>): Prisma__ToolsClient<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tools that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ToolsFindUniqueOrThrowArgs} args - Arguments to find a Tools
     * @example
     * // Get one Tools
     * const tools = await prisma.tools.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ToolsFindUniqueOrThrowArgs>(args: SelectSubset<T, ToolsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ToolsClient<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolsFindFirstArgs} args - Arguments to find a Tools
     * @example
     * // Get one Tools
     * const tools = await prisma.tools.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ToolsFindFirstArgs>(args?: SelectSubset<T, ToolsFindFirstArgs<ExtArgs>>): Prisma__ToolsClient<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tools that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolsFindFirstOrThrowArgs} args - Arguments to find a Tools
     * @example
     * // Get one Tools
     * const tools = await prisma.tools.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ToolsFindFirstOrThrowArgs>(args?: SelectSubset<T, ToolsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ToolsClient<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tools
     * const tools = await prisma.tools.findMany()
     * 
     * // Get first 10 Tools
     * const tools = await prisma.tools.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const toolsWithIdOnly = await prisma.tools.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ToolsFindManyArgs>(args?: SelectSubset<T, ToolsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tools.
     * @param {ToolsCreateArgs} args - Arguments to create a Tools.
     * @example
     * // Create one Tools
     * const Tools = await prisma.tools.create({
     *   data: {
     *     // ... data to create a Tools
     *   }
     * })
     * 
     */
    create<T extends ToolsCreateArgs>(args: SelectSubset<T, ToolsCreateArgs<ExtArgs>>): Prisma__ToolsClient<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tools.
     * @param {ToolsCreateManyArgs} args - Arguments to create many Tools.
     * @example
     * // Create many Tools
     * const tools = await prisma.tools.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ToolsCreateManyArgs>(args?: SelectSubset<T, ToolsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tools and returns the data saved in the database.
     * @param {ToolsCreateManyAndReturnArgs} args - Arguments to create many Tools.
     * @example
     * // Create many Tools
     * const tools = await prisma.tools.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tools and only return the `id`
     * const toolsWithIdOnly = await prisma.tools.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ToolsCreateManyAndReturnArgs>(args?: SelectSubset<T, ToolsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tools.
     * @param {ToolsDeleteArgs} args - Arguments to delete one Tools.
     * @example
     * // Delete one Tools
     * const Tools = await prisma.tools.delete({
     *   where: {
     *     // ... filter to delete one Tools
     *   }
     * })
     * 
     */
    delete<T extends ToolsDeleteArgs>(args: SelectSubset<T, ToolsDeleteArgs<ExtArgs>>): Prisma__ToolsClient<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tools.
     * @param {ToolsUpdateArgs} args - Arguments to update one Tools.
     * @example
     * // Update one Tools
     * const tools = await prisma.tools.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ToolsUpdateArgs>(args: SelectSubset<T, ToolsUpdateArgs<ExtArgs>>): Prisma__ToolsClient<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tools.
     * @param {ToolsDeleteManyArgs} args - Arguments to filter Tools to delete.
     * @example
     * // Delete a few Tools
     * const { count } = await prisma.tools.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ToolsDeleteManyArgs>(args?: SelectSubset<T, ToolsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tools
     * const tools = await prisma.tools.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ToolsUpdateManyArgs>(args: SelectSubset<T, ToolsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tools and returns the data updated in the database.
     * @param {ToolsUpdateManyAndReturnArgs} args - Arguments to update many Tools.
     * @example
     * // Update many Tools
     * const tools = await prisma.tools.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tools and only return the `id`
     * const toolsWithIdOnly = await prisma.tools.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ToolsUpdateManyAndReturnArgs>(args: SelectSubset<T, ToolsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tools.
     * @param {ToolsUpsertArgs} args - Arguments to update or create a Tools.
     * @example
     * // Update or create a Tools
     * const tools = await prisma.tools.upsert({
     *   create: {
     *     // ... data to create a Tools
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tools we want to update
     *   }
     * })
     */
    upsert<T extends ToolsUpsertArgs>(args: SelectSubset<T, ToolsUpsertArgs<ExtArgs>>): Prisma__ToolsClient<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolsCountArgs} args - Arguments to filter Tools to count.
     * @example
     * // Count the number of Tools
     * const count = await prisma.tools.count({
     *   where: {
     *     // ... the filter for the Tools we want to count
     *   }
     * })
    **/
    count<T extends ToolsCountArgs>(
      args?: Subset<T, ToolsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ToolsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ToolsAggregateArgs>(args: Subset<T, ToolsAggregateArgs>): Prisma.PrismaPromise<GetToolsAggregateType<T>>

    /**
     * Group by Tools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ToolsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ToolsGroupByArgs['orderBy'] }
        : { orderBy?: ToolsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ToolsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetToolsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tools model
   */
  readonly fields: ToolsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tools.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ToolsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brand<T extends BrandDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BrandDefaultArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    capacity<T extends CapacityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CapacityDefaultArgs<ExtArgs>>): Prisma__CapacityClient<$Result.GetResult<Prisma.$CapacityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    size<T extends SizeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SizeDefaultArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Basket<T extends Tools$BasketArgs<ExtArgs> = {}>(args?: Subset<T, Tools$BasketArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    OrderProducts<T extends Tools$OrderProductsArgs<ExtArgs> = {}>(args?: Subset<T, Tools$OrderProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderProductsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ProductTools<T extends Tools$ProductToolsArgs<ExtArgs> = {}>(args?: Subset<T, Tools$ProductToolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductToolsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tools model
   */
  interface ToolsFieldRefs {
    readonly id: FieldRef<"Tools", 'String'>
    readonly nameUz: FieldRef<"Tools", 'String'>
    readonly nameRU: FieldRef<"Tools", 'String'>
    readonly nameEng: FieldRef<"Tools", 'String'>
    readonly descriptionUz: FieldRef<"Tools", 'String'>
    readonly descriptionRU: FieldRef<"Tools", 'String'>
    readonly descriptionEng: FieldRef<"Tools", 'String'>
    readonly price: FieldRef<"Tools", 'Int'>
    readonly quantity: FieldRef<"Tools", 'Int'>
    readonly code: FieldRef<"Tools", 'Int'>
    readonly image: FieldRef<"Tools", 'String'>
    readonly brandId: FieldRef<"Tools", 'String'>
    readonly isActive: FieldRef<"Tools", 'Boolean'>
    readonly capacityId: FieldRef<"Tools", 'String'>
    readonly sizeId: FieldRef<"Tools", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tools findUnique
   */
  export type ToolsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    /**
     * Filter, which Tools to fetch.
     */
    where: ToolsWhereUniqueInput
  }

  /**
   * Tools findUniqueOrThrow
   */
  export type ToolsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    /**
     * Filter, which Tools to fetch.
     */
    where: ToolsWhereUniqueInput
  }

  /**
   * Tools findFirst
   */
  export type ToolsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    /**
     * Filter, which Tools to fetch.
     */
    where?: ToolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tools to fetch.
     */
    orderBy?: ToolsOrderByWithRelationInput | ToolsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tools.
     */
    cursor?: ToolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tools.
     */
    distinct?: ToolsScalarFieldEnum | ToolsScalarFieldEnum[]
  }

  /**
   * Tools findFirstOrThrow
   */
  export type ToolsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    /**
     * Filter, which Tools to fetch.
     */
    where?: ToolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tools to fetch.
     */
    orderBy?: ToolsOrderByWithRelationInput | ToolsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tools.
     */
    cursor?: ToolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tools.
     */
    distinct?: ToolsScalarFieldEnum | ToolsScalarFieldEnum[]
  }

  /**
   * Tools findMany
   */
  export type ToolsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    /**
     * Filter, which Tools to fetch.
     */
    where?: ToolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tools to fetch.
     */
    orderBy?: ToolsOrderByWithRelationInput | ToolsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tools.
     */
    cursor?: ToolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tools.
     */
    skip?: number
    distinct?: ToolsScalarFieldEnum | ToolsScalarFieldEnum[]
  }

  /**
   * Tools create
   */
  export type ToolsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    /**
     * The data needed to create a Tools.
     */
    data: XOR<ToolsCreateInput, ToolsUncheckedCreateInput>
  }

  /**
   * Tools createMany
   */
  export type ToolsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tools.
     */
    data: ToolsCreateManyInput | ToolsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tools createManyAndReturn
   */
  export type ToolsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * The data used to create many Tools.
     */
    data: ToolsCreateManyInput | ToolsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tools update
   */
  export type ToolsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    /**
     * The data needed to update a Tools.
     */
    data: XOR<ToolsUpdateInput, ToolsUncheckedUpdateInput>
    /**
     * Choose, which Tools to update.
     */
    where: ToolsWhereUniqueInput
  }

  /**
   * Tools updateMany
   */
  export type ToolsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tools.
     */
    data: XOR<ToolsUpdateManyMutationInput, ToolsUncheckedUpdateManyInput>
    /**
     * Filter which Tools to update
     */
    where?: ToolsWhereInput
    /**
     * Limit how many Tools to update.
     */
    limit?: number
  }

  /**
   * Tools updateManyAndReturn
   */
  export type ToolsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * The data used to update Tools.
     */
    data: XOR<ToolsUpdateManyMutationInput, ToolsUncheckedUpdateManyInput>
    /**
     * Filter which Tools to update
     */
    where?: ToolsWhereInput
    /**
     * Limit how many Tools to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tools upsert
   */
  export type ToolsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    /**
     * The filter to search for the Tools to update in case it exists.
     */
    where: ToolsWhereUniqueInput
    /**
     * In case the Tools found by the `where` argument doesn't exist, create a new Tools with this data.
     */
    create: XOR<ToolsCreateInput, ToolsUncheckedCreateInput>
    /**
     * In case the Tools was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ToolsUpdateInput, ToolsUncheckedUpdateInput>
  }

  /**
   * Tools delete
   */
  export type ToolsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    /**
     * Filter which Tools to delete.
     */
    where: ToolsWhereUniqueInput
  }

  /**
   * Tools deleteMany
   */
  export type ToolsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tools to delete
     */
    where?: ToolsWhereInput
    /**
     * Limit how many Tools to delete.
     */
    limit?: number
  }

  /**
   * Tools.Basket
   */
  export type Tools$BasketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    where?: BasketWhereInput
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    cursor?: BasketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * Tools.OrderProducts
   */
  export type Tools$OrderProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProducts
     */
    select?: OrderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProducts
     */
    omit?: OrderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductsInclude<ExtArgs> | null
    where?: OrderProductsWhereInput
    orderBy?: OrderProductsOrderByWithRelationInput | OrderProductsOrderByWithRelationInput[]
    cursor?: OrderProductsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderProductsScalarFieldEnum | OrderProductsScalarFieldEnum[]
  }

  /**
   * Tools.ProductTools
   */
  export type Tools$ProductToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTools
     */
    select?: ProductToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTools
     */
    omit?: ProductToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolsInclude<ExtArgs> | null
    where?: ProductToolsWhereInput
    orderBy?: ProductToolsOrderByWithRelationInput | ProductToolsOrderByWithRelationInput[]
    cursor?: ProductToolsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductToolsScalarFieldEnum | ProductToolsScalarFieldEnum[]
  }

  /**
   * Tools without action
   */
  export type ToolsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
  }


  /**
   * Model Master
   */

  export type AggregateMaster = {
    _count: MasterCountAggregateOutputType | null
    _avg: MasterAvgAggregateOutputType | null
    _sum: MasterSumAggregateOutputType | null
    _min: MasterMinAggregateOutputType | null
    _max: MasterMaxAggregateOutputType | null
  }

  export type MasterAvgAggregateOutputType = {
    year: number | null
  }

  export type MasterSumAggregateOutputType = {
    year: number | null
  }

  export type MasterMinAggregateOutputType = {
    id: string | null
    fullName: string | null
    phone: string | null
    isActive: boolean | null
    year: number | null
    image: string | null
    passportImage: string | null
    about: string | null
  }

  export type MasterMaxAggregateOutputType = {
    id: string | null
    fullName: string | null
    phone: string | null
    isActive: boolean | null
    year: number | null
    image: string | null
    passportImage: string | null
    about: string | null
  }

  export type MasterCountAggregateOutputType = {
    id: number
    fullName: number
    phone: number
    isActive: number
    year: number
    image: number
    passportImage: number
    about: number
    _all: number
  }


  export type MasterAvgAggregateInputType = {
    year?: true
  }

  export type MasterSumAggregateInputType = {
    year?: true
  }

  export type MasterMinAggregateInputType = {
    id?: true
    fullName?: true
    phone?: true
    isActive?: true
    year?: true
    image?: true
    passportImage?: true
    about?: true
  }

  export type MasterMaxAggregateInputType = {
    id?: true
    fullName?: true
    phone?: true
    isActive?: true
    year?: true
    image?: true
    passportImage?: true
    about?: true
  }

  export type MasterCountAggregateInputType = {
    id?: true
    fullName?: true
    phone?: true
    isActive?: true
    year?: true
    image?: true
    passportImage?: true
    about?: true
    _all?: true
  }

  export type MasterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Master to aggregate.
     */
    where?: MasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masters to fetch.
     */
    orderBy?: MasterOrderByWithRelationInput | MasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Masters
    **/
    _count?: true | MasterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MasterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MasterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MasterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MasterMaxAggregateInputType
  }

  export type GetMasterAggregateType<T extends MasterAggregateArgs> = {
        [P in keyof T & keyof AggregateMaster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaster[P]>
      : GetScalarType<T[P], AggregateMaster[P]>
  }




  export type MasterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterWhereInput
    orderBy?: MasterOrderByWithAggregationInput | MasterOrderByWithAggregationInput[]
    by: MasterScalarFieldEnum[] | MasterScalarFieldEnum
    having?: MasterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MasterCountAggregateInputType | true
    _avg?: MasterAvgAggregateInputType
    _sum?: MasterSumAggregateInputType
    _min?: MasterMinAggregateInputType
    _max?: MasterMaxAggregateInputType
  }

  export type MasterGroupByOutputType = {
    id: string
    fullName: string
    phone: string
    isActive: boolean
    year: number
    image: string
    passportImage: string
    about: string
    _count: MasterCountAggregateOutputType | null
    _avg: MasterAvgAggregateOutputType | null
    _sum: MasterSumAggregateOutputType | null
    _min: MasterMinAggregateOutputType | null
    _max: MasterMaxAggregateOutputType | null
  }

  type GetMasterGroupByPayload<T extends MasterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MasterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MasterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MasterGroupByOutputType[P]>
            : GetScalarType<T[P], MasterGroupByOutputType[P]>
        }
      >
    >


  export type MasterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    phone?: boolean
    isActive?: boolean
    year?: boolean
    image?: boolean
    passportImage?: boolean
    about?: boolean
    MasterProd?: boolean | Master$MasterProdArgs<ExtArgs>
    OrderMasters?: boolean | Master$OrderMastersArgs<ExtArgs>
    MasterRatings?: boolean | Master$MasterRatingsArgs<ExtArgs>
    _count?: boolean | MasterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["master"]>

  export type MasterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    phone?: boolean
    isActive?: boolean
    year?: boolean
    image?: boolean
    passportImage?: boolean
    about?: boolean
  }, ExtArgs["result"]["master"]>

  export type MasterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    phone?: boolean
    isActive?: boolean
    year?: boolean
    image?: boolean
    passportImage?: boolean
    about?: boolean
  }, ExtArgs["result"]["master"]>

  export type MasterSelectScalar = {
    id?: boolean
    fullName?: boolean
    phone?: boolean
    isActive?: boolean
    year?: boolean
    image?: boolean
    passportImage?: boolean
    about?: boolean
  }

  export type MasterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fullName" | "phone" | "isActive" | "year" | "image" | "passportImage" | "about", ExtArgs["result"]["master"]>
  export type MasterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MasterProd?: boolean | Master$MasterProdArgs<ExtArgs>
    OrderMasters?: boolean | Master$OrderMastersArgs<ExtArgs>
    MasterRatings?: boolean | Master$MasterRatingsArgs<ExtArgs>
    _count?: boolean | MasterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MasterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MasterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MasterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Master"
    objects: {
      MasterProd: Prisma.$MasterProdPayload<ExtArgs>[]
      OrderMasters: Prisma.$OrderMastersPayload<ExtArgs>[]
      MasterRatings: Prisma.$MasterRatingsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullName: string
      phone: string
      isActive: boolean
      year: number
      image: string
      passportImage: string
      about: string
    }, ExtArgs["result"]["master"]>
    composites: {}
  }

  type MasterGetPayload<S extends boolean | null | undefined | MasterDefaultArgs> = $Result.GetResult<Prisma.$MasterPayload, S>

  type MasterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MasterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MasterCountAggregateInputType | true
    }

  export interface MasterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Master'], meta: { name: 'Master' } }
    /**
     * Find zero or one Master that matches the filter.
     * @param {MasterFindUniqueArgs} args - Arguments to find a Master
     * @example
     * // Get one Master
     * const master = await prisma.master.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MasterFindUniqueArgs>(args: SelectSubset<T, MasterFindUniqueArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Master that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MasterFindUniqueOrThrowArgs} args - Arguments to find a Master
     * @example
     * // Get one Master
     * const master = await prisma.master.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MasterFindUniqueOrThrowArgs>(args: SelectSubset<T, MasterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Master that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterFindFirstArgs} args - Arguments to find a Master
     * @example
     * // Get one Master
     * const master = await prisma.master.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MasterFindFirstArgs>(args?: SelectSubset<T, MasterFindFirstArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Master that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterFindFirstOrThrowArgs} args - Arguments to find a Master
     * @example
     * // Get one Master
     * const master = await prisma.master.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MasterFindFirstOrThrowArgs>(args?: SelectSubset<T, MasterFindFirstOrThrowArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Masters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Masters
     * const masters = await prisma.master.findMany()
     * 
     * // Get first 10 Masters
     * const masters = await prisma.master.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const masterWithIdOnly = await prisma.master.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MasterFindManyArgs>(args?: SelectSubset<T, MasterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Master.
     * @param {MasterCreateArgs} args - Arguments to create a Master.
     * @example
     * // Create one Master
     * const Master = await prisma.master.create({
     *   data: {
     *     // ... data to create a Master
     *   }
     * })
     * 
     */
    create<T extends MasterCreateArgs>(args: SelectSubset<T, MasterCreateArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Masters.
     * @param {MasterCreateManyArgs} args - Arguments to create many Masters.
     * @example
     * // Create many Masters
     * const master = await prisma.master.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MasterCreateManyArgs>(args?: SelectSubset<T, MasterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Masters and returns the data saved in the database.
     * @param {MasterCreateManyAndReturnArgs} args - Arguments to create many Masters.
     * @example
     * // Create many Masters
     * const master = await prisma.master.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Masters and only return the `id`
     * const masterWithIdOnly = await prisma.master.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MasterCreateManyAndReturnArgs>(args?: SelectSubset<T, MasterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Master.
     * @param {MasterDeleteArgs} args - Arguments to delete one Master.
     * @example
     * // Delete one Master
     * const Master = await prisma.master.delete({
     *   where: {
     *     // ... filter to delete one Master
     *   }
     * })
     * 
     */
    delete<T extends MasterDeleteArgs>(args: SelectSubset<T, MasterDeleteArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Master.
     * @param {MasterUpdateArgs} args - Arguments to update one Master.
     * @example
     * // Update one Master
     * const master = await prisma.master.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MasterUpdateArgs>(args: SelectSubset<T, MasterUpdateArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Masters.
     * @param {MasterDeleteManyArgs} args - Arguments to filter Masters to delete.
     * @example
     * // Delete a few Masters
     * const { count } = await prisma.master.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MasterDeleteManyArgs>(args?: SelectSubset<T, MasterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Masters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Masters
     * const master = await prisma.master.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MasterUpdateManyArgs>(args: SelectSubset<T, MasterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Masters and returns the data updated in the database.
     * @param {MasterUpdateManyAndReturnArgs} args - Arguments to update many Masters.
     * @example
     * // Update many Masters
     * const master = await prisma.master.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Masters and only return the `id`
     * const masterWithIdOnly = await prisma.master.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MasterUpdateManyAndReturnArgs>(args: SelectSubset<T, MasterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Master.
     * @param {MasterUpsertArgs} args - Arguments to update or create a Master.
     * @example
     * // Update or create a Master
     * const master = await prisma.master.upsert({
     *   create: {
     *     // ... data to create a Master
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Master we want to update
     *   }
     * })
     */
    upsert<T extends MasterUpsertArgs>(args: SelectSubset<T, MasterUpsertArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Masters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterCountArgs} args - Arguments to filter Masters to count.
     * @example
     * // Count the number of Masters
     * const count = await prisma.master.count({
     *   where: {
     *     // ... the filter for the Masters we want to count
     *   }
     * })
    **/
    count<T extends MasterCountArgs>(
      args?: Subset<T, MasterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MasterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Master.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MasterAggregateArgs>(args: Subset<T, MasterAggregateArgs>): Prisma.PrismaPromise<GetMasterAggregateType<T>>

    /**
     * Group by Master.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MasterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MasterGroupByArgs['orderBy'] }
        : { orderBy?: MasterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MasterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMasterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Master model
   */
  readonly fields: MasterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Master.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MasterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    MasterProd<T extends Master$MasterProdArgs<ExtArgs> = {}>(args?: Subset<T, Master$MasterProdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterProdPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    OrderMasters<T extends Master$OrderMastersArgs<ExtArgs> = {}>(args?: Subset<T, Master$OrderMastersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderMastersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    MasterRatings<T extends Master$MasterRatingsArgs<ExtArgs> = {}>(args?: Subset<T, Master$MasterRatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Master model
   */
  interface MasterFieldRefs {
    readonly id: FieldRef<"Master", 'String'>
    readonly fullName: FieldRef<"Master", 'String'>
    readonly phone: FieldRef<"Master", 'String'>
    readonly isActive: FieldRef<"Master", 'Boolean'>
    readonly year: FieldRef<"Master", 'Int'>
    readonly image: FieldRef<"Master", 'String'>
    readonly passportImage: FieldRef<"Master", 'String'>
    readonly about: FieldRef<"Master", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Master findUnique
   */
  export type MasterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Master to fetch.
     */
    where: MasterWhereUniqueInput
  }

  /**
   * Master findUniqueOrThrow
   */
  export type MasterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Master to fetch.
     */
    where: MasterWhereUniqueInput
  }

  /**
   * Master findFirst
   */
  export type MasterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Master to fetch.
     */
    where?: MasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masters to fetch.
     */
    orderBy?: MasterOrderByWithRelationInput | MasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Masters.
     */
    cursor?: MasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Masters.
     */
    distinct?: MasterScalarFieldEnum | MasterScalarFieldEnum[]
  }

  /**
   * Master findFirstOrThrow
   */
  export type MasterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Master to fetch.
     */
    where?: MasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masters to fetch.
     */
    orderBy?: MasterOrderByWithRelationInput | MasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Masters.
     */
    cursor?: MasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Masters.
     */
    distinct?: MasterScalarFieldEnum | MasterScalarFieldEnum[]
  }

  /**
   * Master findMany
   */
  export type MasterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Masters to fetch.
     */
    where?: MasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masters to fetch.
     */
    orderBy?: MasterOrderByWithRelationInput | MasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Masters.
     */
    cursor?: MasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masters.
     */
    skip?: number
    distinct?: MasterScalarFieldEnum | MasterScalarFieldEnum[]
  }

  /**
   * Master create
   */
  export type MasterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * The data needed to create a Master.
     */
    data: XOR<MasterCreateInput, MasterUncheckedCreateInput>
  }

  /**
   * Master createMany
   */
  export type MasterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Masters.
     */
    data: MasterCreateManyInput | MasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Master createManyAndReturn
   */
  export type MasterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * The data used to create many Masters.
     */
    data: MasterCreateManyInput | MasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Master update
   */
  export type MasterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * The data needed to update a Master.
     */
    data: XOR<MasterUpdateInput, MasterUncheckedUpdateInput>
    /**
     * Choose, which Master to update.
     */
    where: MasterWhereUniqueInput
  }

  /**
   * Master updateMany
   */
  export type MasterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Masters.
     */
    data: XOR<MasterUpdateManyMutationInput, MasterUncheckedUpdateManyInput>
    /**
     * Filter which Masters to update
     */
    where?: MasterWhereInput
    /**
     * Limit how many Masters to update.
     */
    limit?: number
  }

  /**
   * Master updateManyAndReturn
   */
  export type MasterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * The data used to update Masters.
     */
    data: XOR<MasterUpdateManyMutationInput, MasterUncheckedUpdateManyInput>
    /**
     * Filter which Masters to update
     */
    where?: MasterWhereInput
    /**
     * Limit how many Masters to update.
     */
    limit?: number
  }

  /**
   * Master upsert
   */
  export type MasterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * The filter to search for the Master to update in case it exists.
     */
    where: MasterWhereUniqueInput
    /**
     * In case the Master found by the `where` argument doesn't exist, create a new Master with this data.
     */
    create: XOR<MasterCreateInput, MasterUncheckedCreateInput>
    /**
     * In case the Master was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MasterUpdateInput, MasterUncheckedUpdateInput>
  }

  /**
   * Master delete
   */
  export type MasterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter which Master to delete.
     */
    where: MasterWhereUniqueInput
  }

  /**
   * Master deleteMany
   */
  export type MasterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Masters to delete
     */
    where?: MasterWhereInput
    /**
     * Limit how many Masters to delete.
     */
    limit?: number
  }

  /**
   * Master.MasterProd
   */
  export type Master$MasterProdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProd
     */
    select?: MasterProdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProd
     */
    omit?: MasterProdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProdInclude<ExtArgs> | null
    where?: MasterProdWhereInput
    orderBy?: MasterProdOrderByWithRelationInput | MasterProdOrderByWithRelationInput[]
    cursor?: MasterProdWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterProdScalarFieldEnum | MasterProdScalarFieldEnum[]
  }

  /**
   * Master.OrderMasters
   */
  export type Master$OrderMastersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMasters
     */
    select?: OrderMastersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMasters
     */
    omit?: OrderMastersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMastersInclude<ExtArgs> | null
    where?: OrderMastersWhereInput
    orderBy?: OrderMastersOrderByWithRelationInput | OrderMastersOrderByWithRelationInput[]
    cursor?: OrderMastersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderMastersScalarFieldEnum | OrderMastersScalarFieldEnum[]
  }

  /**
   * Master.MasterRatings
   */
  export type Master$MasterRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    where?: MasterRatingsWhereInput
    orderBy?: MasterRatingsOrderByWithRelationInput | MasterRatingsOrderByWithRelationInput[]
    cursor?: MasterRatingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterRatingsScalarFieldEnum | MasterRatingsScalarFieldEnum[]
  }

  /**
   * Master without action
   */
  export type MasterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
  }


  /**
   * Model MasterProd
   */

  export type AggregateMasterProd = {
    _count: MasterProdCountAggregateOutputType | null
    _avg: MasterProdAvgAggregateOutputType | null
    _sum: MasterProdSumAggregateOutputType | null
    _min: MasterProdMinAggregateOutputType | null
    _max: MasterProdMaxAggregateOutputType | null
  }

  export type MasterProdAvgAggregateOutputType = {
    minWorkingHour: number | null
    priceHourly: number | null
    priceDaily: number | null
    experience: number | null
  }

  export type MasterProdSumAggregateOutputType = {
    minWorkingHour: number | null
    priceHourly: number | null
    priceDaily: number | null
    experience: number | null
  }

  export type MasterProdMinAggregateOutputType = {
    id: string | null
    masterId: string | null
    productId: string | null
    minWorkingHour: number | null
    levelId: string | null
    priceHourly: number | null
    priceDaily: number | null
    experience: number | null
  }

  export type MasterProdMaxAggregateOutputType = {
    id: string | null
    masterId: string | null
    productId: string | null
    minWorkingHour: number | null
    levelId: string | null
    priceHourly: number | null
    priceDaily: number | null
    experience: number | null
  }

  export type MasterProdCountAggregateOutputType = {
    id: number
    masterId: number
    productId: number
    minWorkingHour: number
    levelId: number
    priceHourly: number
    priceDaily: number
    experience: number
    _all: number
  }


  export type MasterProdAvgAggregateInputType = {
    minWorkingHour?: true
    priceHourly?: true
    priceDaily?: true
    experience?: true
  }

  export type MasterProdSumAggregateInputType = {
    minWorkingHour?: true
    priceHourly?: true
    priceDaily?: true
    experience?: true
  }

  export type MasterProdMinAggregateInputType = {
    id?: true
    masterId?: true
    productId?: true
    minWorkingHour?: true
    levelId?: true
    priceHourly?: true
    priceDaily?: true
    experience?: true
  }

  export type MasterProdMaxAggregateInputType = {
    id?: true
    masterId?: true
    productId?: true
    minWorkingHour?: true
    levelId?: true
    priceHourly?: true
    priceDaily?: true
    experience?: true
  }

  export type MasterProdCountAggregateInputType = {
    id?: true
    masterId?: true
    productId?: true
    minWorkingHour?: true
    levelId?: true
    priceHourly?: true
    priceDaily?: true
    experience?: true
    _all?: true
  }

  export type MasterProdAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterProd to aggregate.
     */
    where?: MasterProdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterProds to fetch.
     */
    orderBy?: MasterProdOrderByWithRelationInput | MasterProdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MasterProdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterProds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterProds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MasterProds
    **/
    _count?: true | MasterProdCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MasterProdAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MasterProdSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MasterProdMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MasterProdMaxAggregateInputType
  }

  export type GetMasterProdAggregateType<T extends MasterProdAggregateArgs> = {
        [P in keyof T & keyof AggregateMasterProd]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMasterProd[P]>
      : GetScalarType<T[P], AggregateMasterProd[P]>
  }




  export type MasterProdGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterProdWhereInput
    orderBy?: MasterProdOrderByWithAggregationInput | MasterProdOrderByWithAggregationInput[]
    by: MasterProdScalarFieldEnum[] | MasterProdScalarFieldEnum
    having?: MasterProdScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MasterProdCountAggregateInputType | true
    _avg?: MasterProdAvgAggregateInputType
    _sum?: MasterProdSumAggregateInputType
    _min?: MasterProdMinAggregateInputType
    _max?: MasterProdMaxAggregateInputType
  }

  export type MasterProdGroupByOutputType = {
    id: string
    masterId: string
    productId: string
    minWorkingHour: number
    levelId: string
    priceHourly: number
    priceDaily: number
    experience: number
    _count: MasterProdCountAggregateOutputType | null
    _avg: MasterProdAvgAggregateOutputType | null
    _sum: MasterProdSumAggregateOutputType | null
    _min: MasterProdMinAggregateOutputType | null
    _max: MasterProdMaxAggregateOutputType | null
  }

  type GetMasterProdGroupByPayload<T extends MasterProdGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MasterProdGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MasterProdGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MasterProdGroupByOutputType[P]>
            : GetScalarType<T[P], MasterProdGroupByOutputType[P]>
        }
      >
    >


  export type MasterProdSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    masterId?: boolean
    productId?: boolean
    minWorkingHour?: boolean
    levelId?: boolean
    priceHourly?: boolean
    priceDaily?: boolean
    experience?: boolean
    master?: boolean | MasterDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterProd"]>

  export type MasterProdSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    masterId?: boolean
    productId?: boolean
    minWorkingHour?: boolean
    levelId?: boolean
    priceHourly?: boolean
    priceDaily?: boolean
    experience?: boolean
    master?: boolean | MasterDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterProd"]>

  export type MasterProdSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    masterId?: boolean
    productId?: boolean
    minWorkingHour?: boolean
    levelId?: boolean
    priceHourly?: boolean
    priceDaily?: boolean
    experience?: boolean
    master?: boolean | MasterDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterProd"]>

  export type MasterProdSelectScalar = {
    id?: boolean
    masterId?: boolean
    productId?: boolean
    minWorkingHour?: boolean
    levelId?: boolean
    priceHourly?: boolean
    priceDaily?: boolean
    experience?: boolean
  }

  export type MasterProdOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "masterId" | "productId" | "minWorkingHour" | "levelId" | "priceHourly" | "priceDaily" | "experience", ExtArgs["result"]["masterProd"]>
  export type MasterProdInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    master?: boolean | MasterDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }
  export type MasterProdIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    master?: boolean | MasterDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }
  export type MasterProdIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    master?: boolean | MasterDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }

  export type $MasterProdPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MasterProd"
    objects: {
      master: Prisma.$MasterPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
      level: Prisma.$LevelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      masterId: string
      productId: string
      minWorkingHour: number
      levelId: string
      priceHourly: number
      priceDaily: number
      experience: number
    }, ExtArgs["result"]["masterProd"]>
    composites: {}
  }

  type MasterProdGetPayload<S extends boolean | null | undefined | MasterProdDefaultArgs> = $Result.GetResult<Prisma.$MasterProdPayload, S>

  type MasterProdCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MasterProdFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MasterProdCountAggregateInputType | true
    }

  export interface MasterProdDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MasterProd'], meta: { name: 'MasterProd' } }
    /**
     * Find zero or one MasterProd that matches the filter.
     * @param {MasterProdFindUniqueArgs} args - Arguments to find a MasterProd
     * @example
     * // Get one MasterProd
     * const masterProd = await prisma.masterProd.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MasterProdFindUniqueArgs>(args: SelectSubset<T, MasterProdFindUniqueArgs<ExtArgs>>): Prisma__MasterProdClient<$Result.GetResult<Prisma.$MasterProdPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MasterProd that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MasterProdFindUniqueOrThrowArgs} args - Arguments to find a MasterProd
     * @example
     * // Get one MasterProd
     * const masterProd = await prisma.masterProd.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MasterProdFindUniqueOrThrowArgs>(args: SelectSubset<T, MasterProdFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MasterProdClient<$Result.GetResult<Prisma.$MasterProdPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MasterProd that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterProdFindFirstArgs} args - Arguments to find a MasterProd
     * @example
     * // Get one MasterProd
     * const masterProd = await prisma.masterProd.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MasterProdFindFirstArgs>(args?: SelectSubset<T, MasterProdFindFirstArgs<ExtArgs>>): Prisma__MasterProdClient<$Result.GetResult<Prisma.$MasterProdPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MasterProd that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterProdFindFirstOrThrowArgs} args - Arguments to find a MasterProd
     * @example
     * // Get one MasterProd
     * const masterProd = await prisma.masterProd.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MasterProdFindFirstOrThrowArgs>(args?: SelectSubset<T, MasterProdFindFirstOrThrowArgs<ExtArgs>>): Prisma__MasterProdClient<$Result.GetResult<Prisma.$MasterProdPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MasterProds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterProdFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MasterProds
     * const masterProds = await prisma.masterProd.findMany()
     * 
     * // Get first 10 MasterProds
     * const masterProds = await prisma.masterProd.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const masterProdWithIdOnly = await prisma.masterProd.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MasterProdFindManyArgs>(args?: SelectSubset<T, MasterProdFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterProdPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MasterProd.
     * @param {MasterProdCreateArgs} args - Arguments to create a MasterProd.
     * @example
     * // Create one MasterProd
     * const MasterProd = await prisma.masterProd.create({
     *   data: {
     *     // ... data to create a MasterProd
     *   }
     * })
     * 
     */
    create<T extends MasterProdCreateArgs>(args: SelectSubset<T, MasterProdCreateArgs<ExtArgs>>): Prisma__MasterProdClient<$Result.GetResult<Prisma.$MasterProdPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MasterProds.
     * @param {MasterProdCreateManyArgs} args - Arguments to create many MasterProds.
     * @example
     * // Create many MasterProds
     * const masterProd = await prisma.masterProd.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MasterProdCreateManyArgs>(args?: SelectSubset<T, MasterProdCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MasterProds and returns the data saved in the database.
     * @param {MasterProdCreateManyAndReturnArgs} args - Arguments to create many MasterProds.
     * @example
     * // Create many MasterProds
     * const masterProd = await prisma.masterProd.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MasterProds and only return the `id`
     * const masterProdWithIdOnly = await prisma.masterProd.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MasterProdCreateManyAndReturnArgs>(args?: SelectSubset<T, MasterProdCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterProdPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MasterProd.
     * @param {MasterProdDeleteArgs} args - Arguments to delete one MasterProd.
     * @example
     * // Delete one MasterProd
     * const MasterProd = await prisma.masterProd.delete({
     *   where: {
     *     // ... filter to delete one MasterProd
     *   }
     * })
     * 
     */
    delete<T extends MasterProdDeleteArgs>(args: SelectSubset<T, MasterProdDeleteArgs<ExtArgs>>): Prisma__MasterProdClient<$Result.GetResult<Prisma.$MasterProdPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MasterProd.
     * @param {MasterProdUpdateArgs} args - Arguments to update one MasterProd.
     * @example
     * // Update one MasterProd
     * const masterProd = await prisma.masterProd.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MasterProdUpdateArgs>(args: SelectSubset<T, MasterProdUpdateArgs<ExtArgs>>): Prisma__MasterProdClient<$Result.GetResult<Prisma.$MasterProdPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MasterProds.
     * @param {MasterProdDeleteManyArgs} args - Arguments to filter MasterProds to delete.
     * @example
     * // Delete a few MasterProds
     * const { count } = await prisma.masterProd.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MasterProdDeleteManyArgs>(args?: SelectSubset<T, MasterProdDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MasterProds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterProdUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MasterProds
     * const masterProd = await prisma.masterProd.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MasterProdUpdateManyArgs>(args: SelectSubset<T, MasterProdUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MasterProds and returns the data updated in the database.
     * @param {MasterProdUpdateManyAndReturnArgs} args - Arguments to update many MasterProds.
     * @example
     * // Update many MasterProds
     * const masterProd = await prisma.masterProd.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MasterProds and only return the `id`
     * const masterProdWithIdOnly = await prisma.masterProd.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MasterProdUpdateManyAndReturnArgs>(args: SelectSubset<T, MasterProdUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterProdPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MasterProd.
     * @param {MasterProdUpsertArgs} args - Arguments to update or create a MasterProd.
     * @example
     * // Update or create a MasterProd
     * const masterProd = await prisma.masterProd.upsert({
     *   create: {
     *     // ... data to create a MasterProd
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MasterProd we want to update
     *   }
     * })
     */
    upsert<T extends MasterProdUpsertArgs>(args: SelectSubset<T, MasterProdUpsertArgs<ExtArgs>>): Prisma__MasterProdClient<$Result.GetResult<Prisma.$MasterProdPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MasterProds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterProdCountArgs} args - Arguments to filter MasterProds to count.
     * @example
     * // Count the number of MasterProds
     * const count = await prisma.masterProd.count({
     *   where: {
     *     // ... the filter for the MasterProds we want to count
     *   }
     * })
    **/
    count<T extends MasterProdCountArgs>(
      args?: Subset<T, MasterProdCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MasterProdCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MasterProd.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterProdAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MasterProdAggregateArgs>(args: Subset<T, MasterProdAggregateArgs>): Prisma.PrismaPromise<GetMasterProdAggregateType<T>>

    /**
     * Group by MasterProd.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterProdGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MasterProdGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MasterProdGroupByArgs['orderBy'] }
        : { orderBy?: MasterProdGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MasterProdGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMasterProdGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MasterProd model
   */
  readonly fields: MasterProdFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MasterProd.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MasterProdClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    master<T extends MasterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MasterDefaultArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    level<T extends LevelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LevelDefaultArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MasterProd model
   */
  interface MasterProdFieldRefs {
    readonly id: FieldRef<"MasterProd", 'String'>
    readonly masterId: FieldRef<"MasterProd", 'String'>
    readonly productId: FieldRef<"MasterProd", 'String'>
    readonly minWorkingHour: FieldRef<"MasterProd", 'Int'>
    readonly levelId: FieldRef<"MasterProd", 'String'>
    readonly priceHourly: FieldRef<"MasterProd", 'Int'>
    readonly priceDaily: FieldRef<"MasterProd", 'Int'>
    readonly experience: FieldRef<"MasterProd", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * MasterProd findUnique
   */
  export type MasterProdFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProd
     */
    select?: MasterProdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProd
     */
    omit?: MasterProdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProdInclude<ExtArgs> | null
    /**
     * Filter, which MasterProd to fetch.
     */
    where: MasterProdWhereUniqueInput
  }

  /**
   * MasterProd findUniqueOrThrow
   */
  export type MasterProdFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProd
     */
    select?: MasterProdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProd
     */
    omit?: MasterProdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProdInclude<ExtArgs> | null
    /**
     * Filter, which MasterProd to fetch.
     */
    where: MasterProdWhereUniqueInput
  }

  /**
   * MasterProd findFirst
   */
  export type MasterProdFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProd
     */
    select?: MasterProdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProd
     */
    omit?: MasterProdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProdInclude<ExtArgs> | null
    /**
     * Filter, which MasterProd to fetch.
     */
    where?: MasterProdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterProds to fetch.
     */
    orderBy?: MasterProdOrderByWithRelationInput | MasterProdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterProds.
     */
    cursor?: MasterProdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterProds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterProds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterProds.
     */
    distinct?: MasterProdScalarFieldEnum | MasterProdScalarFieldEnum[]
  }

  /**
   * MasterProd findFirstOrThrow
   */
  export type MasterProdFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProd
     */
    select?: MasterProdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProd
     */
    omit?: MasterProdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProdInclude<ExtArgs> | null
    /**
     * Filter, which MasterProd to fetch.
     */
    where?: MasterProdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterProds to fetch.
     */
    orderBy?: MasterProdOrderByWithRelationInput | MasterProdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterProds.
     */
    cursor?: MasterProdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterProds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterProds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterProds.
     */
    distinct?: MasterProdScalarFieldEnum | MasterProdScalarFieldEnum[]
  }

  /**
   * MasterProd findMany
   */
  export type MasterProdFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProd
     */
    select?: MasterProdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProd
     */
    omit?: MasterProdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProdInclude<ExtArgs> | null
    /**
     * Filter, which MasterProds to fetch.
     */
    where?: MasterProdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterProds to fetch.
     */
    orderBy?: MasterProdOrderByWithRelationInput | MasterProdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MasterProds.
     */
    cursor?: MasterProdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterProds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterProds.
     */
    skip?: number
    distinct?: MasterProdScalarFieldEnum | MasterProdScalarFieldEnum[]
  }

  /**
   * MasterProd create
   */
  export type MasterProdCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProd
     */
    select?: MasterProdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProd
     */
    omit?: MasterProdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProdInclude<ExtArgs> | null
    /**
     * The data needed to create a MasterProd.
     */
    data: XOR<MasterProdCreateInput, MasterProdUncheckedCreateInput>
  }

  /**
   * MasterProd createMany
   */
  export type MasterProdCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MasterProds.
     */
    data: MasterProdCreateManyInput | MasterProdCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MasterProd createManyAndReturn
   */
  export type MasterProdCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProd
     */
    select?: MasterProdSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProd
     */
    omit?: MasterProdOmit<ExtArgs> | null
    /**
     * The data used to create many MasterProds.
     */
    data: MasterProdCreateManyInput | MasterProdCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProdIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MasterProd update
   */
  export type MasterProdUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProd
     */
    select?: MasterProdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProd
     */
    omit?: MasterProdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProdInclude<ExtArgs> | null
    /**
     * The data needed to update a MasterProd.
     */
    data: XOR<MasterProdUpdateInput, MasterProdUncheckedUpdateInput>
    /**
     * Choose, which MasterProd to update.
     */
    where: MasterProdWhereUniqueInput
  }

  /**
   * MasterProd updateMany
   */
  export type MasterProdUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MasterProds.
     */
    data: XOR<MasterProdUpdateManyMutationInput, MasterProdUncheckedUpdateManyInput>
    /**
     * Filter which MasterProds to update
     */
    where?: MasterProdWhereInput
    /**
     * Limit how many MasterProds to update.
     */
    limit?: number
  }

  /**
   * MasterProd updateManyAndReturn
   */
  export type MasterProdUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProd
     */
    select?: MasterProdSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProd
     */
    omit?: MasterProdOmit<ExtArgs> | null
    /**
     * The data used to update MasterProds.
     */
    data: XOR<MasterProdUpdateManyMutationInput, MasterProdUncheckedUpdateManyInput>
    /**
     * Filter which MasterProds to update
     */
    where?: MasterProdWhereInput
    /**
     * Limit how many MasterProds to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProdIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MasterProd upsert
   */
  export type MasterProdUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProd
     */
    select?: MasterProdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProd
     */
    omit?: MasterProdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProdInclude<ExtArgs> | null
    /**
     * The filter to search for the MasterProd to update in case it exists.
     */
    where: MasterProdWhereUniqueInput
    /**
     * In case the MasterProd found by the `where` argument doesn't exist, create a new MasterProd with this data.
     */
    create: XOR<MasterProdCreateInput, MasterProdUncheckedCreateInput>
    /**
     * In case the MasterProd was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MasterProdUpdateInput, MasterProdUncheckedUpdateInput>
  }

  /**
   * MasterProd delete
   */
  export type MasterProdDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProd
     */
    select?: MasterProdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProd
     */
    omit?: MasterProdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProdInclude<ExtArgs> | null
    /**
     * Filter which MasterProd to delete.
     */
    where: MasterProdWhereUniqueInput
  }

  /**
   * MasterProd deleteMany
   */
  export type MasterProdDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterProds to delete
     */
    where?: MasterProdWhereInput
    /**
     * Limit how many MasterProds to delete.
     */
    limit?: number
  }

  /**
   * MasterProd without action
   */
  export type MasterProdDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProd
     */
    select?: MasterProdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProd
     */
    omit?: MasterProdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProdInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRU: string | null
    nameEng: string | null
    image: string | null
    isActive: boolean | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRU: string | null
    nameEng: string | null
    image: string | null
    isActive: boolean | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    nameUz: number
    nameRU: number
    nameEng: number
    image: number
    isActive: number
    _all: number
  }


  export type ProductMinAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
    image?: true
    isActive?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
    image?: true
    isActive?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
    image?: true
    isActive?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    nameUz: string
    nameRU: string
    nameEng: string
    image: string
    isActive: boolean
    _count: ProductCountAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
    image?: boolean
    isActive?: boolean
    MasterProd?: boolean | Product$MasterProdArgs<ExtArgs>
    Basket?: boolean | Product$BasketArgs<ExtArgs>
    productLevels?: boolean | Product$productLevelsArgs<ExtArgs>
    ProductTools?: boolean | Product$ProductToolsArgs<ExtArgs>
    OrderProducts?: boolean | Product$OrderProductsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
    image?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["product"]>

  export type ProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
    image?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
    image?: boolean
    isActive?: boolean
  }

  export type ProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameUz" | "nameRU" | "nameEng" | "image" | "isActive", ExtArgs["result"]["product"]>
  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MasterProd?: boolean | Product$MasterProdArgs<ExtArgs>
    Basket?: boolean | Product$BasketArgs<ExtArgs>
    productLevels?: boolean | Product$productLevelsArgs<ExtArgs>
    ProductTools?: boolean | Product$ProductToolsArgs<ExtArgs>
    OrderProducts?: boolean | Product$OrderProductsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      MasterProd: Prisma.$MasterProdPayload<ExtArgs>[]
      Basket: Prisma.$BasketPayload<ExtArgs>[]
      productLevels: Prisma.$ProductLevelsPayload<ExtArgs>[]
      ProductTools: Prisma.$ProductToolsPayload<ExtArgs>[]
      OrderProducts: Prisma.$OrderProductsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameUz: string
      nameRU: string
      nameEng: string
      image: string
      isActive: boolean
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products and returns the data updated in the database.
     * @param {ProductUpdateManyAndReturnArgs} args - Arguments to update many Products.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Products and only return the `id`
     * const productWithIdOnly = await prisma.product.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    MasterProd<T extends Product$MasterProdArgs<ExtArgs> = {}>(args?: Subset<T, Product$MasterProdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterProdPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Basket<T extends Product$BasketArgs<ExtArgs> = {}>(args?: Subset<T, Product$BasketArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    productLevels<T extends Product$productLevelsArgs<ExtArgs> = {}>(args?: Subset<T, Product$productLevelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductLevelsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ProductTools<T extends Product$ProductToolsArgs<ExtArgs> = {}>(args?: Subset<T, Product$ProductToolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductToolsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    OrderProducts<T extends Product$OrderProductsArgs<ExtArgs> = {}>(args?: Subset<T, Product$OrderProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderProductsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly nameUz: FieldRef<"Product", 'String'>
    readonly nameRU: FieldRef<"Product", 'String'>
    readonly nameEng: FieldRef<"Product", 'String'>
    readonly image: FieldRef<"Product", 'String'>
    readonly isActive: FieldRef<"Product", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product updateManyAndReturn
   */
  export type ProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to delete.
     */
    limit?: number
  }

  /**
   * Product.MasterProd
   */
  export type Product$MasterProdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProd
     */
    select?: MasterProdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProd
     */
    omit?: MasterProdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProdInclude<ExtArgs> | null
    where?: MasterProdWhereInput
    orderBy?: MasterProdOrderByWithRelationInput | MasterProdOrderByWithRelationInput[]
    cursor?: MasterProdWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterProdScalarFieldEnum | MasterProdScalarFieldEnum[]
  }

  /**
   * Product.Basket
   */
  export type Product$BasketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    where?: BasketWhereInput
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    cursor?: BasketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * Product.productLevels
   */
  export type Product$productLevelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevels
     */
    select?: ProductLevelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevels
     */
    omit?: ProductLevelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelsInclude<ExtArgs> | null
    where?: ProductLevelsWhereInput
    orderBy?: ProductLevelsOrderByWithRelationInput | ProductLevelsOrderByWithRelationInput[]
    cursor?: ProductLevelsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductLevelsScalarFieldEnum | ProductLevelsScalarFieldEnum[]
  }

  /**
   * Product.ProductTools
   */
  export type Product$ProductToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTools
     */
    select?: ProductToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTools
     */
    omit?: ProductToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolsInclude<ExtArgs> | null
    where?: ProductToolsWhereInput
    orderBy?: ProductToolsOrderByWithRelationInput | ProductToolsOrderByWithRelationInput[]
    cursor?: ProductToolsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductToolsScalarFieldEnum | ProductToolsScalarFieldEnum[]
  }

  /**
   * Product.OrderProducts
   */
  export type Product$OrderProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProducts
     */
    select?: OrderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProducts
     */
    omit?: OrderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductsInclude<ExtArgs> | null
    where?: OrderProductsWhereInput
    orderBy?: OrderProductsOrderByWithRelationInput | OrderProductsOrderByWithRelationInput[]
    cursor?: OrderProductsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderProductsScalarFieldEnum | OrderProductsScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model Level
   */

  export type AggregateLevel = {
    _count: LevelCountAggregateOutputType | null
    _min: LevelMinAggregateOutputType | null
    _max: LevelMaxAggregateOutputType | null
  }

  export type LevelMinAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRU: string | null
    nameEng: string | null
  }

  export type LevelMaxAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRU: string | null
    nameEng: string | null
  }

  export type LevelCountAggregateOutputType = {
    id: number
    nameUz: number
    nameRU: number
    nameEng: number
    _all: number
  }


  export type LevelMinAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
  }

  export type LevelMaxAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
  }

  export type LevelCountAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
    _all?: true
  }

  export type LevelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Level to aggregate.
     */
    where?: LevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelOrderByWithRelationInput | LevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Levels
    **/
    _count?: true | LevelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LevelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LevelMaxAggregateInputType
  }

  export type GetLevelAggregateType<T extends LevelAggregateArgs> = {
        [P in keyof T & keyof AggregateLevel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLevel[P]>
      : GetScalarType<T[P], AggregateLevel[P]>
  }




  export type LevelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LevelWhereInput
    orderBy?: LevelOrderByWithAggregationInput | LevelOrderByWithAggregationInput[]
    by: LevelScalarFieldEnum[] | LevelScalarFieldEnum
    having?: LevelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LevelCountAggregateInputType | true
    _min?: LevelMinAggregateInputType
    _max?: LevelMaxAggregateInputType
  }

  export type LevelGroupByOutputType = {
    id: string
    nameUz: string
    nameRU: string
    nameEng: string
    _count: LevelCountAggregateOutputType | null
    _min: LevelMinAggregateOutputType | null
    _max: LevelMaxAggregateOutputType | null
  }

  type GetLevelGroupByPayload<T extends LevelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LevelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LevelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LevelGroupByOutputType[P]>
            : GetScalarType<T[P], LevelGroupByOutputType[P]>
        }
      >
    >


  export type LevelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
    MasterProd?: boolean | Level$MasterProdArgs<ExtArgs>
    productLevels?: boolean | Level$productLevelsArgs<ExtArgs>
    OrderProducts?: boolean | Level$OrderProductsArgs<ExtArgs>
    Basket?: boolean | Level$BasketArgs<ExtArgs>
    _count?: boolean | LevelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["level"]>

  export type LevelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
  }, ExtArgs["result"]["level"]>

  export type LevelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
  }, ExtArgs["result"]["level"]>

  export type LevelSelectScalar = {
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
  }

  export type LevelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameUz" | "nameRU" | "nameEng", ExtArgs["result"]["level"]>
  export type LevelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MasterProd?: boolean | Level$MasterProdArgs<ExtArgs>
    productLevels?: boolean | Level$productLevelsArgs<ExtArgs>
    OrderProducts?: boolean | Level$OrderProductsArgs<ExtArgs>
    Basket?: boolean | Level$BasketArgs<ExtArgs>
    _count?: boolean | LevelCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LevelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type LevelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LevelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Level"
    objects: {
      MasterProd: Prisma.$MasterProdPayload<ExtArgs>[]
      productLevels: Prisma.$ProductLevelsPayload<ExtArgs>[]
      OrderProducts: Prisma.$OrderProductsPayload<ExtArgs>[]
      Basket: Prisma.$BasketPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameUz: string
      nameRU: string
      nameEng: string
    }, ExtArgs["result"]["level"]>
    composites: {}
  }

  type LevelGetPayload<S extends boolean | null | undefined | LevelDefaultArgs> = $Result.GetResult<Prisma.$LevelPayload, S>

  type LevelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LevelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LevelCountAggregateInputType | true
    }

  export interface LevelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Level'], meta: { name: 'Level' } }
    /**
     * Find zero or one Level that matches the filter.
     * @param {LevelFindUniqueArgs} args - Arguments to find a Level
     * @example
     * // Get one Level
     * const level = await prisma.level.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LevelFindUniqueArgs>(args: SelectSubset<T, LevelFindUniqueArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Level that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LevelFindUniqueOrThrowArgs} args - Arguments to find a Level
     * @example
     * // Get one Level
     * const level = await prisma.level.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LevelFindUniqueOrThrowArgs>(args: SelectSubset<T, LevelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Level that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelFindFirstArgs} args - Arguments to find a Level
     * @example
     * // Get one Level
     * const level = await prisma.level.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LevelFindFirstArgs>(args?: SelectSubset<T, LevelFindFirstArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Level that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelFindFirstOrThrowArgs} args - Arguments to find a Level
     * @example
     * // Get one Level
     * const level = await prisma.level.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LevelFindFirstOrThrowArgs>(args?: SelectSubset<T, LevelFindFirstOrThrowArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Levels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Levels
     * const levels = await prisma.level.findMany()
     * 
     * // Get first 10 Levels
     * const levels = await prisma.level.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const levelWithIdOnly = await prisma.level.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LevelFindManyArgs>(args?: SelectSubset<T, LevelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Level.
     * @param {LevelCreateArgs} args - Arguments to create a Level.
     * @example
     * // Create one Level
     * const Level = await prisma.level.create({
     *   data: {
     *     // ... data to create a Level
     *   }
     * })
     * 
     */
    create<T extends LevelCreateArgs>(args: SelectSubset<T, LevelCreateArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Levels.
     * @param {LevelCreateManyArgs} args - Arguments to create many Levels.
     * @example
     * // Create many Levels
     * const level = await prisma.level.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LevelCreateManyArgs>(args?: SelectSubset<T, LevelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Levels and returns the data saved in the database.
     * @param {LevelCreateManyAndReturnArgs} args - Arguments to create many Levels.
     * @example
     * // Create many Levels
     * const level = await prisma.level.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Levels and only return the `id`
     * const levelWithIdOnly = await prisma.level.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LevelCreateManyAndReturnArgs>(args?: SelectSubset<T, LevelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Level.
     * @param {LevelDeleteArgs} args - Arguments to delete one Level.
     * @example
     * // Delete one Level
     * const Level = await prisma.level.delete({
     *   where: {
     *     // ... filter to delete one Level
     *   }
     * })
     * 
     */
    delete<T extends LevelDeleteArgs>(args: SelectSubset<T, LevelDeleteArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Level.
     * @param {LevelUpdateArgs} args - Arguments to update one Level.
     * @example
     * // Update one Level
     * const level = await prisma.level.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LevelUpdateArgs>(args: SelectSubset<T, LevelUpdateArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Levels.
     * @param {LevelDeleteManyArgs} args - Arguments to filter Levels to delete.
     * @example
     * // Delete a few Levels
     * const { count } = await prisma.level.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LevelDeleteManyArgs>(args?: SelectSubset<T, LevelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Levels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Levels
     * const level = await prisma.level.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LevelUpdateManyArgs>(args: SelectSubset<T, LevelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Levels and returns the data updated in the database.
     * @param {LevelUpdateManyAndReturnArgs} args - Arguments to update many Levels.
     * @example
     * // Update many Levels
     * const level = await prisma.level.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Levels and only return the `id`
     * const levelWithIdOnly = await prisma.level.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LevelUpdateManyAndReturnArgs>(args: SelectSubset<T, LevelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Level.
     * @param {LevelUpsertArgs} args - Arguments to update or create a Level.
     * @example
     * // Update or create a Level
     * const level = await prisma.level.upsert({
     *   create: {
     *     // ... data to create a Level
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Level we want to update
     *   }
     * })
     */
    upsert<T extends LevelUpsertArgs>(args: SelectSubset<T, LevelUpsertArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Levels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelCountArgs} args - Arguments to filter Levels to count.
     * @example
     * // Count the number of Levels
     * const count = await prisma.level.count({
     *   where: {
     *     // ... the filter for the Levels we want to count
     *   }
     * })
    **/
    count<T extends LevelCountArgs>(
      args?: Subset<T, LevelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LevelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Level.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LevelAggregateArgs>(args: Subset<T, LevelAggregateArgs>): Prisma.PrismaPromise<GetLevelAggregateType<T>>

    /**
     * Group by Level.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LevelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LevelGroupByArgs['orderBy'] }
        : { orderBy?: LevelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LevelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLevelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Level model
   */
  readonly fields: LevelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Level.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LevelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    MasterProd<T extends Level$MasterProdArgs<ExtArgs> = {}>(args?: Subset<T, Level$MasterProdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterProdPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    productLevels<T extends Level$productLevelsArgs<ExtArgs> = {}>(args?: Subset<T, Level$productLevelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductLevelsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    OrderProducts<T extends Level$OrderProductsArgs<ExtArgs> = {}>(args?: Subset<T, Level$OrderProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderProductsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Basket<T extends Level$BasketArgs<ExtArgs> = {}>(args?: Subset<T, Level$BasketArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Level model
   */
  interface LevelFieldRefs {
    readonly id: FieldRef<"Level", 'String'>
    readonly nameUz: FieldRef<"Level", 'String'>
    readonly nameRU: FieldRef<"Level", 'String'>
    readonly nameEng: FieldRef<"Level", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Level findUnique
   */
  export type LevelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Level to fetch.
     */
    where: LevelWhereUniqueInput
  }

  /**
   * Level findUniqueOrThrow
   */
  export type LevelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Level to fetch.
     */
    where: LevelWhereUniqueInput
  }

  /**
   * Level findFirst
   */
  export type LevelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Level to fetch.
     */
    where?: LevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelOrderByWithRelationInput | LevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Levels.
     */
    cursor?: LevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Levels.
     */
    distinct?: LevelScalarFieldEnum | LevelScalarFieldEnum[]
  }

  /**
   * Level findFirstOrThrow
   */
  export type LevelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Level to fetch.
     */
    where?: LevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelOrderByWithRelationInput | LevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Levels.
     */
    cursor?: LevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Levels.
     */
    distinct?: LevelScalarFieldEnum | LevelScalarFieldEnum[]
  }

  /**
   * Level findMany
   */
  export type LevelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Levels to fetch.
     */
    where?: LevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelOrderByWithRelationInput | LevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Levels.
     */
    cursor?: LevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    distinct?: LevelScalarFieldEnum | LevelScalarFieldEnum[]
  }

  /**
   * Level create
   */
  export type LevelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * The data needed to create a Level.
     */
    data: XOR<LevelCreateInput, LevelUncheckedCreateInput>
  }

  /**
   * Level createMany
   */
  export type LevelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Levels.
     */
    data: LevelCreateManyInput | LevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Level createManyAndReturn
   */
  export type LevelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * The data used to create many Levels.
     */
    data: LevelCreateManyInput | LevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Level update
   */
  export type LevelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * The data needed to update a Level.
     */
    data: XOR<LevelUpdateInput, LevelUncheckedUpdateInput>
    /**
     * Choose, which Level to update.
     */
    where: LevelWhereUniqueInput
  }

  /**
   * Level updateMany
   */
  export type LevelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Levels.
     */
    data: XOR<LevelUpdateManyMutationInput, LevelUncheckedUpdateManyInput>
    /**
     * Filter which Levels to update
     */
    where?: LevelWhereInput
    /**
     * Limit how many Levels to update.
     */
    limit?: number
  }

  /**
   * Level updateManyAndReturn
   */
  export type LevelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * The data used to update Levels.
     */
    data: XOR<LevelUpdateManyMutationInput, LevelUncheckedUpdateManyInput>
    /**
     * Filter which Levels to update
     */
    where?: LevelWhereInput
    /**
     * Limit how many Levels to update.
     */
    limit?: number
  }

  /**
   * Level upsert
   */
  export type LevelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * The filter to search for the Level to update in case it exists.
     */
    where: LevelWhereUniqueInput
    /**
     * In case the Level found by the `where` argument doesn't exist, create a new Level with this data.
     */
    create: XOR<LevelCreateInput, LevelUncheckedCreateInput>
    /**
     * In case the Level was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LevelUpdateInput, LevelUncheckedUpdateInput>
  }

  /**
   * Level delete
   */
  export type LevelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter which Level to delete.
     */
    where: LevelWhereUniqueInput
  }

  /**
   * Level deleteMany
   */
  export type LevelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Levels to delete
     */
    where?: LevelWhereInput
    /**
     * Limit how many Levels to delete.
     */
    limit?: number
  }

  /**
   * Level.MasterProd
   */
  export type Level$MasterProdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterProd
     */
    select?: MasterProdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterProd
     */
    omit?: MasterProdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterProdInclude<ExtArgs> | null
    where?: MasterProdWhereInput
    orderBy?: MasterProdOrderByWithRelationInput | MasterProdOrderByWithRelationInput[]
    cursor?: MasterProdWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterProdScalarFieldEnum | MasterProdScalarFieldEnum[]
  }

  /**
   * Level.productLevels
   */
  export type Level$productLevelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevels
     */
    select?: ProductLevelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevels
     */
    omit?: ProductLevelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelsInclude<ExtArgs> | null
    where?: ProductLevelsWhereInput
    orderBy?: ProductLevelsOrderByWithRelationInput | ProductLevelsOrderByWithRelationInput[]
    cursor?: ProductLevelsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductLevelsScalarFieldEnum | ProductLevelsScalarFieldEnum[]
  }

  /**
   * Level.OrderProducts
   */
  export type Level$OrderProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProducts
     */
    select?: OrderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProducts
     */
    omit?: OrderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductsInclude<ExtArgs> | null
    where?: OrderProductsWhereInput
    orderBy?: OrderProductsOrderByWithRelationInput | OrderProductsOrderByWithRelationInput[]
    cursor?: OrderProductsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderProductsScalarFieldEnum | OrderProductsScalarFieldEnum[]
  }

  /**
   * Level.Basket
   */
  export type Level$BasketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    where?: BasketWhereInput
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    cursor?: BasketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * Level without action
   */
  export type LevelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
  }


  /**
   * Model ProductLevels
   */

  export type AggregateProductLevels = {
    _count: ProductLevelsCountAggregateOutputType | null
    _avg: ProductLevelsAvgAggregateOutputType | null
    _sum: ProductLevelsSumAggregateOutputType | null
    _min: ProductLevelsMinAggregateOutputType | null
    _max: ProductLevelsMaxAggregateOutputType | null
  }

  export type ProductLevelsAvgAggregateOutputType = {
    priceHourly: number | null
    priceDaily: number | null
    minWorkingHour: number | null
  }

  export type ProductLevelsSumAggregateOutputType = {
    priceHourly: number | null
    priceDaily: number | null
    minWorkingHour: number | null
  }

  export type ProductLevelsMinAggregateOutputType = {
    id: string | null
    levelId: string | null
    productId: string | null
    priceHourly: number | null
    priceDaily: number | null
    minWorkingHour: number | null
  }

  export type ProductLevelsMaxAggregateOutputType = {
    id: string | null
    levelId: string | null
    productId: string | null
    priceHourly: number | null
    priceDaily: number | null
    minWorkingHour: number | null
  }

  export type ProductLevelsCountAggregateOutputType = {
    id: number
    levelId: number
    productId: number
    priceHourly: number
    priceDaily: number
    minWorkingHour: number
    _all: number
  }


  export type ProductLevelsAvgAggregateInputType = {
    priceHourly?: true
    priceDaily?: true
    minWorkingHour?: true
  }

  export type ProductLevelsSumAggregateInputType = {
    priceHourly?: true
    priceDaily?: true
    minWorkingHour?: true
  }

  export type ProductLevelsMinAggregateInputType = {
    id?: true
    levelId?: true
    productId?: true
    priceHourly?: true
    priceDaily?: true
    minWorkingHour?: true
  }

  export type ProductLevelsMaxAggregateInputType = {
    id?: true
    levelId?: true
    productId?: true
    priceHourly?: true
    priceDaily?: true
    minWorkingHour?: true
  }

  export type ProductLevelsCountAggregateInputType = {
    id?: true
    levelId?: true
    productId?: true
    priceHourly?: true
    priceDaily?: true
    minWorkingHour?: true
    _all?: true
  }

  export type ProductLevelsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductLevels to aggregate.
     */
    where?: ProductLevelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductLevels to fetch.
     */
    orderBy?: ProductLevelsOrderByWithRelationInput | ProductLevelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductLevelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductLevels
    **/
    _count?: true | ProductLevelsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductLevelsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductLevelsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductLevelsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductLevelsMaxAggregateInputType
  }

  export type GetProductLevelsAggregateType<T extends ProductLevelsAggregateArgs> = {
        [P in keyof T & keyof AggregateProductLevels]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductLevels[P]>
      : GetScalarType<T[P], AggregateProductLevels[P]>
  }




  export type ProductLevelsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductLevelsWhereInput
    orderBy?: ProductLevelsOrderByWithAggregationInput | ProductLevelsOrderByWithAggregationInput[]
    by: ProductLevelsScalarFieldEnum[] | ProductLevelsScalarFieldEnum
    having?: ProductLevelsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductLevelsCountAggregateInputType | true
    _avg?: ProductLevelsAvgAggregateInputType
    _sum?: ProductLevelsSumAggregateInputType
    _min?: ProductLevelsMinAggregateInputType
    _max?: ProductLevelsMaxAggregateInputType
  }

  export type ProductLevelsGroupByOutputType = {
    id: string
    levelId: string
    productId: string
    priceHourly: number
    priceDaily: number
    minWorkingHour: number
    _count: ProductLevelsCountAggregateOutputType | null
    _avg: ProductLevelsAvgAggregateOutputType | null
    _sum: ProductLevelsSumAggregateOutputType | null
    _min: ProductLevelsMinAggregateOutputType | null
    _max: ProductLevelsMaxAggregateOutputType | null
  }

  type GetProductLevelsGroupByPayload<T extends ProductLevelsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductLevelsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductLevelsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductLevelsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductLevelsGroupByOutputType[P]>
        }
      >
    >


  export type ProductLevelsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    levelId?: boolean
    productId?: boolean
    priceHourly?: boolean
    priceDaily?: boolean
    minWorkingHour?: boolean
    level?: boolean | LevelDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productLevels"]>

  export type ProductLevelsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    levelId?: boolean
    productId?: boolean
    priceHourly?: boolean
    priceDaily?: boolean
    minWorkingHour?: boolean
    level?: boolean | LevelDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productLevels"]>

  export type ProductLevelsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    levelId?: boolean
    productId?: boolean
    priceHourly?: boolean
    priceDaily?: boolean
    minWorkingHour?: boolean
    level?: boolean | LevelDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productLevels"]>

  export type ProductLevelsSelectScalar = {
    id?: boolean
    levelId?: boolean
    productId?: boolean
    priceHourly?: boolean
    priceDaily?: boolean
    minWorkingHour?: boolean
  }

  export type ProductLevelsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "levelId" | "productId" | "priceHourly" | "priceDaily" | "minWorkingHour", ExtArgs["result"]["productLevels"]>
  export type ProductLevelsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    level?: boolean | LevelDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductLevelsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    level?: boolean | LevelDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductLevelsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    level?: boolean | LevelDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ProductLevelsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductLevels"
    objects: {
      level: Prisma.$LevelPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      levelId: string
      productId: string
      priceHourly: number
      priceDaily: number
      minWorkingHour: number
    }, ExtArgs["result"]["productLevels"]>
    composites: {}
  }

  type ProductLevelsGetPayload<S extends boolean | null | undefined | ProductLevelsDefaultArgs> = $Result.GetResult<Prisma.$ProductLevelsPayload, S>

  type ProductLevelsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductLevelsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductLevelsCountAggregateInputType | true
    }

  export interface ProductLevelsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductLevels'], meta: { name: 'ProductLevels' } }
    /**
     * Find zero or one ProductLevels that matches the filter.
     * @param {ProductLevelsFindUniqueArgs} args - Arguments to find a ProductLevels
     * @example
     * // Get one ProductLevels
     * const productLevels = await prisma.productLevels.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductLevelsFindUniqueArgs>(args: SelectSubset<T, ProductLevelsFindUniqueArgs<ExtArgs>>): Prisma__ProductLevelsClient<$Result.GetResult<Prisma.$ProductLevelsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductLevels that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductLevelsFindUniqueOrThrowArgs} args - Arguments to find a ProductLevels
     * @example
     * // Get one ProductLevels
     * const productLevels = await prisma.productLevels.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductLevelsFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductLevelsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductLevelsClient<$Result.GetResult<Prisma.$ProductLevelsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductLevels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductLevelsFindFirstArgs} args - Arguments to find a ProductLevels
     * @example
     * // Get one ProductLevels
     * const productLevels = await prisma.productLevels.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductLevelsFindFirstArgs>(args?: SelectSubset<T, ProductLevelsFindFirstArgs<ExtArgs>>): Prisma__ProductLevelsClient<$Result.GetResult<Prisma.$ProductLevelsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductLevels that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductLevelsFindFirstOrThrowArgs} args - Arguments to find a ProductLevels
     * @example
     * // Get one ProductLevels
     * const productLevels = await prisma.productLevels.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductLevelsFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductLevelsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductLevelsClient<$Result.GetResult<Prisma.$ProductLevelsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductLevels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductLevelsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductLevels
     * const productLevels = await prisma.productLevels.findMany()
     * 
     * // Get first 10 ProductLevels
     * const productLevels = await prisma.productLevels.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productLevelsWithIdOnly = await prisma.productLevels.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductLevelsFindManyArgs>(args?: SelectSubset<T, ProductLevelsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductLevelsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductLevels.
     * @param {ProductLevelsCreateArgs} args - Arguments to create a ProductLevels.
     * @example
     * // Create one ProductLevels
     * const ProductLevels = await prisma.productLevels.create({
     *   data: {
     *     // ... data to create a ProductLevels
     *   }
     * })
     * 
     */
    create<T extends ProductLevelsCreateArgs>(args: SelectSubset<T, ProductLevelsCreateArgs<ExtArgs>>): Prisma__ProductLevelsClient<$Result.GetResult<Prisma.$ProductLevelsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductLevels.
     * @param {ProductLevelsCreateManyArgs} args - Arguments to create many ProductLevels.
     * @example
     * // Create many ProductLevels
     * const productLevels = await prisma.productLevels.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductLevelsCreateManyArgs>(args?: SelectSubset<T, ProductLevelsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductLevels and returns the data saved in the database.
     * @param {ProductLevelsCreateManyAndReturnArgs} args - Arguments to create many ProductLevels.
     * @example
     * // Create many ProductLevels
     * const productLevels = await prisma.productLevels.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductLevels and only return the `id`
     * const productLevelsWithIdOnly = await prisma.productLevels.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductLevelsCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductLevelsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductLevelsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProductLevels.
     * @param {ProductLevelsDeleteArgs} args - Arguments to delete one ProductLevels.
     * @example
     * // Delete one ProductLevels
     * const ProductLevels = await prisma.productLevels.delete({
     *   where: {
     *     // ... filter to delete one ProductLevels
     *   }
     * })
     * 
     */
    delete<T extends ProductLevelsDeleteArgs>(args: SelectSubset<T, ProductLevelsDeleteArgs<ExtArgs>>): Prisma__ProductLevelsClient<$Result.GetResult<Prisma.$ProductLevelsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductLevels.
     * @param {ProductLevelsUpdateArgs} args - Arguments to update one ProductLevels.
     * @example
     * // Update one ProductLevels
     * const productLevels = await prisma.productLevels.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductLevelsUpdateArgs>(args: SelectSubset<T, ProductLevelsUpdateArgs<ExtArgs>>): Prisma__ProductLevelsClient<$Result.GetResult<Prisma.$ProductLevelsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductLevels.
     * @param {ProductLevelsDeleteManyArgs} args - Arguments to filter ProductLevels to delete.
     * @example
     * // Delete a few ProductLevels
     * const { count } = await prisma.productLevels.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductLevelsDeleteManyArgs>(args?: SelectSubset<T, ProductLevelsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductLevelsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductLevels
     * const productLevels = await prisma.productLevels.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductLevelsUpdateManyArgs>(args: SelectSubset<T, ProductLevelsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductLevels and returns the data updated in the database.
     * @param {ProductLevelsUpdateManyAndReturnArgs} args - Arguments to update many ProductLevels.
     * @example
     * // Update many ProductLevels
     * const productLevels = await prisma.productLevels.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductLevels and only return the `id`
     * const productLevelsWithIdOnly = await prisma.productLevels.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductLevelsUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductLevelsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductLevelsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProductLevels.
     * @param {ProductLevelsUpsertArgs} args - Arguments to update or create a ProductLevels.
     * @example
     * // Update or create a ProductLevels
     * const productLevels = await prisma.productLevels.upsert({
     *   create: {
     *     // ... data to create a ProductLevels
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductLevels we want to update
     *   }
     * })
     */
    upsert<T extends ProductLevelsUpsertArgs>(args: SelectSubset<T, ProductLevelsUpsertArgs<ExtArgs>>): Prisma__ProductLevelsClient<$Result.GetResult<Prisma.$ProductLevelsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductLevelsCountArgs} args - Arguments to filter ProductLevels to count.
     * @example
     * // Count the number of ProductLevels
     * const count = await prisma.productLevels.count({
     *   where: {
     *     // ... the filter for the ProductLevels we want to count
     *   }
     * })
    **/
    count<T extends ProductLevelsCountArgs>(
      args?: Subset<T, ProductLevelsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductLevelsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductLevelsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductLevelsAggregateArgs>(args: Subset<T, ProductLevelsAggregateArgs>): Prisma.PrismaPromise<GetProductLevelsAggregateType<T>>

    /**
     * Group by ProductLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductLevelsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductLevelsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductLevelsGroupByArgs['orderBy'] }
        : { orderBy?: ProductLevelsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductLevelsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductLevelsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductLevels model
   */
  readonly fields: ProductLevelsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductLevels.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductLevelsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    level<T extends LevelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LevelDefaultArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductLevels model
   */
  interface ProductLevelsFieldRefs {
    readonly id: FieldRef<"ProductLevels", 'String'>
    readonly levelId: FieldRef<"ProductLevels", 'String'>
    readonly productId: FieldRef<"ProductLevels", 'String'>
    readonly priceHourly: FieldRef<"ProductLevels", 'Int'>
    readonly priceDaily: FieldRef<"ProductLevels", 'Int'>
    readonly minWorkingHour: FieldRef<"ProductLevels", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ProductLevels findUnique
   */
  export type ProductLevelsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevels
     */
    select?: ProductLevelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevels
     */
    omit?: ProductLevelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelsInclude<ExtArgs> | null
    /**
     * Filter, which ProductLevels to fetch.
     */
    where: ProductLevelsWhereUniqueInput
  }

  /**
   * ProductLevels findUniqueOrThrow
   */
  export type ProductLevelsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevels
     */
    select?: ProductLevelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevels
     */
    omit?: ProductLevelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelsInclude<ExtArgs> | null
    /**
     * Filter, which ProductLevels to fetch.
     */
    where: ProductLevelsWhereUniqueInput
  }

  /**
   * ProductLevels findFirst
   */
  export type ProductLevelsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevels
     */
    select?: ProductLevelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevels
     */
    omit?: ProductLevelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelsInclude<ExtArgs> | null
    /**
     * Filter, which ProductLevels to fetch.
     */
    where?: ProductLevelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductLevels to fetch.
     */
    orderBy?: ProductLevelsOrderByWithRelationInput | ProductLevelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductLevels.
     */
    cursor?: ProductLevelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductLevels.
     */
    distinct?: ProductLevelsScalarFieldEnum | ProductLevelsScalarFieldEnum[]
  }

  /**
   * ProductLevels findFirstOrThrow
   */
  export type ProductLevelsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevels
     */
    select?: ProductLevelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevels
     */
    omit?: ProductLevelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelsInclude<ExtArgs> | null
    /**
     * Filter, which ProductLevels to fetch.
     */
    where?: ProductLevelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductLevels to fetch.
     */
    orderBy?: ProductLevelsOrderByWithRelationInput | ProductLevelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductLevels.
     */
    cursor?: ProductLevelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductLevels.
     */
    distinct?: ProductLevelsScalarFieldEnum | ProductLevelsScalarFieldEnum[]
  }

  /**
   * ProductLevels findMany
   */
  export type ProductLevelsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevels
     */
    select?: ProductLevelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevels
     */
    omit?: ProductLevelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelsInclude<ExtArgs> | null
    /**
     * Filter, which ProductLevels to fetch.
     */
    where?: ProductLevelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductLevels to fetch.
     */
    orderBy?: ProductLevelsOrderByWithRelationInput | ProductLevelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductLevels.
     */
    cursor?: ProductLevelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductLevels.
     */
    skip?: number
    distinct?: ProductLevelsScalarFieldEnum | ProductLevelsScalarFieldEnum[]
  }

  /**
   * ProductLevels create
   */
  export type ProductLevelsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevels
     */
    select?: ProductLevelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevels
     */
    omit?: ProductLevelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelsInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductLevels.
     */
    data: XOR<ProductLevelsCreateInput, ProductLevelsUncheckedCreateInput>
  }

  /**
   * ProductLevels createMany
   */
  export type ProductLevelsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductLevels.
     */
    data: ProductLevelsCreateManyInput | ProductLevelsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductLevels createManyAndReturn
   */
  export type ProductLevelsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevels
     */
    select?: ProductLevelsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevels
     */
    omit?: ProductLevelsOmit<ExtArgs> | null
    /**
     * The data used to create many ProductLevels.
     */
    data: ProductLevelsCreateManyInput | ProductLevelsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductLevels update
   */
  export type ProductLevelsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevels
     */
    select?: ProductLevelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevels
     */
    omit?: ProductLevelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelsInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductLevels.
     */
    data: XOR<ProductLevelsUpdateInput, ProductLevelsUncheckedUpdateInput>
    /**
     * Choose, which ProductLevels to update.
     */
    where: ProductLevelsWhereUniqueInput
  }

  /**
   * ProductLevels updateMany
   */
  export type ProductLevelsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductLevels.
     */
    data: XOR<ProductLevelsUpdateManyMutationInput, ProductLevelsUncheckedUpdateManyInput>
    /**
     * Filter which ProductLevels to update
     */
    where?: ProductLevelsWhereInput
    /**
     * Limit how many ProductLevels to update.
     */
    limit?: number
  }

  /**
   * ProductLevels updateManyAndReturn
   */
  export type ProductLevelsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevels
     */
    select?: ProductLevelsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevels
     */
    omit?: ProductLevelsOmit<ExtArgs> | null
    /**
     * The data used to update ProductLevels.
     */
    data: XOR<ProductLevelsUpdateManyMutationInput, ProductLevelsUncheckedUpdateManyInput>
    /**
     * Filter which ProductLevels to update
     */
    where?: ProductLevelsWhereInput
    /**
     * Limit how many ProductLevels to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductLevels upsert
   */
  export type ProductLevelsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevels
     */
    select?: ProductLevelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevels
     */
    omit?: ProductLevelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelsInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductLevels to update in case it exists.
     */
    where: ProductLevelsWhereUniqueInput
    /**
     * In case the ProductLevels found by the `where` argument doesn't exist, create a new ProductLevels with this data.
     */
    create: XOR<ProductLevelsCreateInput, ProductLevelsUncheckedCreateInput>
    /**
     * In case the ProductLevels was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductLevelsUpdateInput, ProductLevelsUncheckedUpdateInput>
  }

  /**
   * ProductLevels delete
   */
  export type ProductLevelsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevels
     */
    select?: ProductLevelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevels
     */
    omit?: ProductLevelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelsInclude<ExtArgs> | null
    /**
     * Filter which ProductLevels to delete.
     */
    where: ProductLevelsWhereUniqueInput
  }

  /**
   * ProductLevels deleteMany
   */
  export type ProductLevelsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductLevels to delete
     */
    where?: ProductLevelsWhereInput
    /**
     * Limit how many ProductLevels to delete.
     */
    limit?: number
  }

  /**
   * ProductLevels without action
   */
  export type ProductLevelsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductLevels
     */
    select?: ProductLevelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductLevels
     */
    omit?: ProductLevelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductLevelsInclude<ExtArgs> | null
  }


  /**
   * Model ProductTools
   */

  export type AggregateProductTools = {
    _count: ProductToolsCountAggregateOutputType | null
    _min: ProductToolsMinAggregateOutputType | null
    _max: ProductToolsMaxAggregateOutputType | null
  }

  export type ProductToolsMinAggregateOutputType = {
    id: string | null
    toolId: string | null
    productId: string | null
  }

  export type ProductToolsMaxAggregateOutputType = {
    id: string | null
    toolId: string | null
    productId: string | null
  }

  export type ProductToolsCountAggregateOutputType = {
    id: number
    toolId: number
    productId: number
    _all: number
  }


  export type ProductToolsMinAggregateInputType = {
    id?: true
    toolId?: true
    productId?: true
  }

  export type ProductToolsMaxAggregateInputType = {
    id?: true
    toolId?: true
    productId?: true
  }

  export type ProductToolsCountAggregateInputType = {
    id?: true
    toolId?: true
    productId?: true
    _all?: true
  }

  export type ProductToolsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductTools to aggregate.
     */
    where?: ProductToolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTools to fetch.
     */
    orderBy?: ProductToolsOrderByWithRelationInput | ProductToolsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductToolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductTools
    **/
    _count?: true | ProductToolsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductToolsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductToolsMaxAggregateInputType
  }

  export type GetProductToolsAggregateType<T extends ProductToolsAggregateArgs> = {
        [P in keyof T & keyof AggregateProductTools]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductTools[P]>
      : GetScalarType<T[P], AggregateProductTools[P]>
  }




  export type ProductToolsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductToolsWhereInput
    orderBy?: ProductToolsOrderByWithAggregationInput | ProductToolsOrderByWithAggregationInput[]
    by: ProductToolsScalarFieldEnum[] | ProductToolsScalarFieldEnum
    having?: ProductToolsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductToolsCountAggregateInputType | true
    _min?: ProductToolsMinAggregateInputType
    _max?: ProductToolsMaxAggregateInputType
  }

  export type ProductToolsGroupByOutputType = {
    id: string
    toolId: string
    productId: string
    _count: ProductToolsCountAggregateOutputType | null
    _min: ProductToolsMinAggregateOutputType | null
    _max: ProductToolsMaxAggregateOutputType | null
  }

  type GetProductToolsGroupByPayload<T extends ProductToolsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductToolsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductToolsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductToolsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductToolsGroupByOutputType[P]>
        }
      >
    >


  export type ProductToolsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    toolId?: boolean
    productId?: boolean
    tool?: boolean | ToolsDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productTools"]>

  export type ProductToolsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    toolId?: boolean
    productId?: boolean
    tool?: boolean | ToolsDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productTools"]>

  export type ProductToolsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    toolId?: boolean
    productId?: boolean
    tool?: boolean | ToolsDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productTools"]>

  export type ProductToolsSelectScalar = {
    id?: boolean
    toolId?: boolean
    productId?: boolean
  }

  export type ProductToolsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "toolId" | "productId", ExtArgs["result"]["productTools"]>
  export type ProductToolsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tool?: boolean | ToolsDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductToolsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tool?: boolean | ToolsDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductToolsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tool?: boolean | ToolsDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ProductToolsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductTools"
    objects: {
      tool: Prisma.$ToolsPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      toolId: string
      productId: string
    }, ExtArgs["result"]["productTools"]>
    composites: {}
  }

  type ProductToolsGetPayload<S extends boolean | null | undefined | ProductToolsDefaultArgs> = $Result.GetResult<Prisma.$ProductToolsPayload, S>

  type ProductToolsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductToolsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductToolsCountAggregateInputType | true
    }

  export interface ProductToolsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductTools'], meta: { name: 'ProductTools' } }
    /**
     * Find zero or one ProductTools that matches the filter.
     * @param {ProductToolsFindUniqueArgs} args - Arguments to find a ProductTools
     * @example
     * // Get one ProductTools
     * const productTools = await prisma.productTools.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductToolsFindUniqueArgs>(args: SelectSubset<T, ProductToolsFindUniqueArgs<ExtArgs>>): Prisma__ProductToolsClient<$Result.GetResult<Prisma.$ProductToolsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductTools that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductToolsFindUniqueOrThrowArgs} args - Arguments to find a ProductTools
     * @example
     * // Get one ProductTools
     * const productTools = await prisma.productTools.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductToolsFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductToolsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductToolsClient<$Result.GetResult<Prisma.$ProductToolsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductTools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductToolsFindFirstArgs} args - Arguments to find a ProductTools
     * @example
     * // Get one ProductTools
     * const productTools = await prisma.productTools.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductToolsFindFirstArgs>(args?: SelectSubset<T, ProductToolsFindFirstArgs<ExtArgs>>): Prisma__ProductToolsClient<$Result.GetResult<Prisma.$ProductToolsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductTools that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductToolsFindFirstOrThrowArgs} args - Arguments to find a ProductTools
     * @example
     * // Get one ProductTools
     * const productTools = await prisma.productTools.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductToolsFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductToolsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductToolsClient<$Result.GetResult<Prisma.$ProductToolsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductTools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductToolsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductTools
     * const productTools = await prisma.productTools.findMany()
     * 
     * // Get first 10 ProductTools
     * const productTools = await prisma.productTools.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productToolsWithIdOnly = await prisma.productTools.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductToolsFindManyArgs>(args?: SelectSubset<T, ProductToolsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductToolsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductTools.
     * @param {ProductToolsCreateArgs} args - Arguments to create a ProductTools.
     * @example
     * // Create one ProductTools
     * const ProductTools = await prisma.productTools.create({
     *   data: {
     *     // ... data to create a ProductTools
     *   }
     * })
     * 
     */
    create<T extends ProductToolsCreateArgs>(args: SelectSubset<T, ProductToolsCreateArgs<ExtArgs>>): Prisma__ProductToolsClient<$Result.GetResult<Prisma.$ProductToolsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductTools.
     * @param {ProductToolsCreateManyArgs} args - Arguments to create many ProductTools.
     * @example
     * // Create many ProductTools
     * const productTools = await prisma.productTools.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductToolsCreateManyArgs>(args?: SelectSubset<T, ProductToolsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductTools and returns the data saved in the database.
     * @param {ProductToolsCreateManyAndReturnArgs} args - Arguments to create many ProductTools.
     * @example
     * // Create many ProductTools
     * const productTools = await prisma.productTools.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductTools and only return the `id`
     * const productToolsWithIdOnly = await prisma.productTools.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductToolsCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductToolsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductToolsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProductTools.
     * @param {ProductToolsDeleteArgs} args - Arguments to delete one ProductTools.
     * @example
     * // Delete one ProductTools
     * const ProductTools = await prisma.productTools.delete({
     *   where: {
     *     // ... filter to delete one ProductTools
     *   }
     * })
     * 
     */
    delete<T extends ProductToolsDeleteArgs>(args: SelectSubset<T, ProductToolsDeleteArgs<ExtArgs>>): Prisma__ProductToolsClient<$Result.GetResult<Prisma.$ProductToolsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductTools.
     * @param {ProductToolsUpdateArgs} args - Arguments to update one ProductTools.
     * @example
     * // Update one ProductTools
     * const productTools = await prisma.productTools.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductToolsUpdateArgs>(args: SelectSubset<T, ProductToolsUpdateArgs<ExtArgs>>): Prisma__ProductToolsClient<$Result.GetResult<Prisma.$ProductToolsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductTools.
     * @param {ProductToolsDeleteManyArgs} args - Arguments to filter ProductTools to delete.
     * @example
     * // Delete a few ProductTools
     * const { count } = await prisma.productTools.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductToolsDeleteManyArgs>(args?: SelectSubset<T, ProductToolsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductTools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductToolsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductTools
     * const productTools = await prisma.productTools.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductToolsUpdateManyArgs>(args: SelectSubset<T, ProductToolsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductTools and returns the data updated in the database.
     * @param {ProductToolsUpdateManyAndReturnArgs} args - Arguments to update many ProductTools.
     * @example
     * // Update many ProductTools
     * const productTools = await prisma.productTools.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductTools and only return the `id`
     * const productToolsWithIdOnly = await prisma.productTools.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductToolsUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductToolsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductToolsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProductTools.
     * @param {ProductToolsUpsertArgs} args - Arguments to update or create a ProductTools.
     * @example
     * // Update or create a ProductTools
     * const productTools = await prisma.productTools.upsert({
     *   create: {
     *     // ... data to create a ProductTools
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductTools we want to update
     *   }
     * })
     */
    upsert<T extends ProductToolsUpsertArgs>(args: SelectSubset<T, ProductToolsUpsertArgs<ExtArgs>>): Prisma__ProductToolsClient<$Result.GetResult<Prisma.$ProductToolsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductTools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductToolsCountArgs} args - Arguments to filter ProductTools to count.
     * @example
     * // Count the number of ProductTools
     * const count = await prisma.productTools.count({
     *   where: {
     *     // ... the filter for the ProductTools we want to count
     *   }
     * })
    **/
    count<T extends ProductToolsCountArgs>(
      args?: Subset<T, ProductToolsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductToolsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductTools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductToolsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductToolsAggregateArgs>(args: Subset<T, ProductToolsAggregateArgs>): Prisma.PrismaPromise<GetProductToolsAggregateType<T>>

    /**
     * Group by ProductTools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductToolsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductToolsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductToolsGroupByArgs['orderBy'] }
        : { orderBy?: ProductToolsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductToolsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductToolsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductTools model
   */
  readonly fields: ProductToolsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductTools.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductToolsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tool<T extends ToolsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ToolsDefaultArgs<ExtArgs>>): Prisma__ToolsClient<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductTools model
   */
  interface ProductToolsFieldRefs {
    readonly id: FieldRef<"ProductTools", 'String'>
    readonly toolId: FieldRef<"ProductTools", 'String'>
    readonly productId: FieldRef<"ProductTools", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProductTools findUnique
   */
  export type ProductToolsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTools
     */
    select?: ProductToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTools
     */
    omit?: ProductToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolsInclude<ExtArgs> | null
    /**
     * Filter, which ProductTools to fetch.
     */
    where: ProductToolsWhereUniqueInput
  }

  /**
   * ProductTools findUniqueOrThrow
   */
  export type ProductToolsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTools
     */
    select?: ProductToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTools
     */
    omit?: ProductToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolsInclude<ExtArgs> | null
    /**
     * Filter, which ProductTools to fetch.
     */
    where: ProductToolsWhereUniqueInput
  }

  /**
   * ProductTools findFirst
   */
  export type ProductToolsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTools
     */
    select?: ProductToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTools
     */
    omit?: ProductToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolsInclude<ExtArgs> | null
    /**
     * Filter, which ProductTools to fetch.
     */
    where?: ProductToolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTools to fetch.
     */
    orderBy?: ProductToolsOrderByWithRelationInput | ProductToolsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductTools.
     */
    cursor?: ProductToolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductTools.
     */
    distinct?: ProductToolsScalarFieldEnum | ProductToolsScalarFieldEnum[]
  }

  /**
   * ProductTools findFirstOrThrow
   */
  export type ProductToolsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTools
     */
    select?: ProductToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTools
     */
    omit?: ProductToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolsInclude<ExtArgs> | null
    /**
     * Filter, which ProductTools to fetch.
     */
    where?: ProductToolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTools to fetch.
     */
    orderBy?: ProductToolsOrderByWithRelationInput | ProductToolsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductTools.
     */
    cursor?: ProductToolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductTools.
     */
    distinct?: ProductToolsScalarFieldEnum | ProductToolsScalarFieldEnum[]
  }

  /**
   * ProductTools findMany
   */
  export type ProductToolsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTools
     */
    select?: ProductToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTools
     */
    omit?: ProductToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolsInclude<ExtArgs> | null
    /**
     * Filter, which ProductTools to fetch.
     */
    where?: ProductToolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTools to fetch.
     */
    orderBy?: ProductToolsOrderByWithRelationInput | ProductToolsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductTools.
     */
    cursor?: ProductToolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTools.
     */
    skip?: number
    distinct?: ProductToolsScalarFieldEnum | ProductToolsScalarFieldEnum[]
  }

  /**
   * ProductTools create
   */
  export type ProductToolsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTools
     */
    select?: ProductToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTools
     */
    omit?: ProductToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolsInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductTools.
     */
    data: XOR<ProductToolsCreateInput, ProductToolsUncheckedCreateInput>
  }

  /**
   * ProductTools createMany
   */
  export type ProductToolsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductTools.
     */
    data: ProductToolsCreateManyInput | ProductToolsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductTools createManyAndReturn
   */
  export type ProductToolsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTools
     */
    select?: ProductToolsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTools
     */
    omit?: ProductToolsOmit<ExtArgs> | null
    /**
     * The data used to create many ProductTools.
     */
    data: ProductToolsCreateManyInput | ProductToolsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductTools update
   */
  export type ProductToolsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTools
     */
    select?: ProductToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTools
     */
    omit?: ProductToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolsInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductTools.
     */
    data: XOR<ProductToolsUpdateInput, ProductToolsUncheckedUpdateInput>
    /**
     * Choose, which ProductTools to update.
     */
    where: ProductToolsWhereUniqueInput
  }

  /**
   * ProductTools updateMany
   */
  export type ProductToolsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductTools.
     */
    data: XOR<ProductToolsUpdateManyMutationInput, ProductToolsUncheckedUpdateManyInput>
    /**
     * Filter which ProductTools to update
     */
    where?: ProductToolsWhereInput
    /**
     * Limit how many ProductTools to update.
     */
    limit?: number
  }

  /**
   * ProductTools updateManyAndReturn
   */
  export type ProductToolsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTools
     */
    select?: ProductToolsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTools
     */
    omit?: ProductToolsOmit<ExtArgs> | null
    /**
     * The data used to update ProductTools.
     */
    data: XOR<ProductToolsUpdateManyMutationInput, ProductToolsUncheckedUpdateManyInput>
    /**
     * Filter which ProductTools to update
     */
    where?: ProductToolsWhereInput
    /**
     * Limit how many ProductTools to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductTools upsert
   */
  export type ProductToolsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTools
     */
    select?: ProductToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTools
     */
    omit?: ProductToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolsInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductTools to update in case it exists.
     */
    where: ProductToolsWhereUniqueInput
    /**
     * In case the ProductTools found by the `where` argument doesn't exist, create a new ProductTools with this data.
     */
    create: XOR<ProductToolsCreateInput, ProductToolsUncheckedCreateInput>
    /**
     * In case the ProductTools was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductToolsUpdateInput, ProductToolsUncheckedUpdateInput>
  }

  /**
   * ProductTools delete
   */
  export type ProductToolsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTools
     */
    select?: ProductToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTools
     */
    omit?: ProductToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolsInclude<ExtArgs> | null
    /**
     * Filter which ProductTools to delete.
     */
    where: ProductToolsWhereUniqueInput
  }

  /**
   * ProductTools deleteMany
   */
  export type ProductToolsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductTools to delete
     */
    where?: ProductToolsWhereInput
    /**
     * Limit how many ProductTools to delete.
     */
    limit?: number
  }

  /**
   * ProductTools without action
   */
  export type ProductToolsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTools
     */
    select?: ProductToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTools
     */
    omit?: ProductToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductToolsInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    productCount: number | null
    quantity: number | null
    measure: number | null
    tool: number | null
    total: number | null
  }

  export type OrderSumAggregateOutputType = {
    productCount: number | null
    quantity: number | null
    measure: number | null
    tool: number | null
    total: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: string | null
    productCount: number | null
    quantity: number | null
    measure: number | null
    tool: number | null
    total: number | null
    location: string | null
    address: string | null
    date: Date | null
    paymentType: $Enums.paymentType | null
    withDelivery: boolean | null
    status: $Enums.orderStatus | null
    commentToDelivery: string | null
    userId: string | null
  }

  export type OrderMaxAggregateOutputType = {
    id: string | null
    productCount: number | null
    quantity: number | null
    measure: number | null
    tool: number | null
    total: number | null
    location: string | null
    address: string | null
    date: Date | null
    paymentType: $Enums.paymentType | null
    withDelivery: boolean | null
    status: $Enums.orderStatus | null
    commentToDelivery: string | null
    userId: string | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    productCount: number
    quantity: number
    measure: number
    tool: number
    total: number
    location: number
    address: number
    date: number
    paymentType: number
    withDelivery: number
    status: number
    commentToDelivery: number
    userId: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    productCount?: true
    quantity?: true
    measure?: true
    tool?: true
    total?: true
  }

  export type OrderSumAggregateInputType = {
    productCount?: true
    quantity?: true
    measure?: true
    tool?: true
    total?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    productCount?: true
    quantity?: true
    measure?: true
    tool?: true
    total?: true
    location?: true
    address?: true
    date?: true
    paymentType?: true
    withDelivery?: true
    status?: true
    commentToDelivery?: true
    userId?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    productCount?: true
    quantity?: true
    measure?: true
    tool?: true
    total?: true
    location?: true
    address?: true
    date?: true
    paymentType?: true
    withDelivery?: true
    status?: true
    commentToDelivery?: true
    userId?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    productCount?: true
    quantity?: true
    measure?: true
    tool?: true
    total?: true
    location?: true
    address?: true
    date?: true
    paymentType?: true
    withDelivery?: true
    status?: true
    commentToDelivery?: true
    userId?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: string
    productCount: number
    quantity: number
    measure: number
    tool: number
    total: number
    location: string
    address: string
    date: Date
    paymentType: $Enums.paymentType
    withDelivery: boolean
    status: $Enums.orderStatus
    commentToDelivery: string
    userId: string
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productCount?: boolean
    quantity?: boolean
    measure?: boolean
    tool?: boolean
    total?: boolean
    location?: boolean
    address?: boolean
    date?: boolean
    paymentType?: boolean
    withDelivery?: boolean
    status?: boolean
    commentToDelivery?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    OrderProducts?: boolean | Order$OrderProductsArgs<ExtArgs>
    OrderMasters?: boolean | Order$OrderMastersArgs<ExtArgs>
    Comment?: boolean | Order$CommentArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productCount?: boolean
    quantity?: boolean
    measure?: boolean
    tool?: boolean
    total?: boolean
    location?: boolean
    address?: boolean
    date?: boolean
    paymentType?: boolean
    withDelivery?: boolean
    status?: boolean
    commentToDelivery?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productCount?: boolean
    quantity?: boolean
    measure?: boolean
    tool?: boolean
    total?: boolean
    location?: boolean
    address?: boolean
    date?: boolean
    paymentType?: boolean
    withDelivery?: boolean
    status?: boolean
    commentToDelivery?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    productCount?: boolean
    quantity?: boolean
    measure?: boolean
    tool?: boolean
    total?: boolean
    location?: boolean
    address?: boolean
    date?: boolean
    paymentType?: boolean
    withDelivery?: boolean
    status?: boolean
    commentToDelivery?: boolean
    userId?: boolean
  }

  export type OrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productCount" | "quantity" | "measure" | "tool" | "total" | "location" | "address" | "date" | "paymentType" | "withDelivery" | "status" | "commentToDelivery" | "userId", ExtArgs["result"]["order"]>
  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    OrderProducts?: boolean | Order$OrderProductsArgs<ExtArgs>
    OrderMasters?: boolean | Order$OrderMastersArgs<ExtArgs>
    Comment?: boolean | Order$CommentArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      OrderProducts: Prisma.$OrderProductsPayload<ExtArgs>[]
      OrderMasters: Prisma.$OrderMastersPayload<ExtArgs>[]
      Comment: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productCount: number
      quantity: number
      measure: number
      tool: number
      total: number
      location: string
      address: string
      date: Date
      paymentType: $Enums.paymentType
      withDelivery: boolean
      status: $Enums.orderStatus
      commentToDelivery: string
      userId: string
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {OrderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders and returns the data updated in the database.
     * @param {OrderUpdateManyAndReturnArgs} args - Arguments to update many Orders.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    OrderProducts<T extends Order$OrderProductsArgs<ExtArgs> = {}>(args?: Subset<T, Order$OrderProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderProductsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    OrderMasters<T extends Order$OrderMastersArgs<ExtArgs> = {}>(args?: Subset<T, Order$OrderMastersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderMastersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Comment<T extends Order$CommentArgs<ExtArgs> = {}>(args?: Subset<T, Order$CommentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'String'>
    readonly productCount: FieldRef<"Order", 'Int'>
    readonly quantity: FieldRef<"Order", 'Int'>
    readonly measure: FieldRef<"Order", 'Int'>
    readonly tool: FieldRef<"Order", 'Int'>
    readonly total: FieldRef<"Order", 'Int'>
    readonly location: FieldRef<"Order", 'String'>
    readonly address: FieldRef<"Order", 'String'>
    readonly date: FieldRef<"Order", 'DateTime'>
    readonly paymentType: FieldRef<"Order", 'paymentType'>
    readonly withDelivery: FieldRef<"Order", 'Boolean'>
    readonly status: FieldRef<"Order", 'orderStatus'>
    readonly commentToDelivery: FieldRef<"Order", 'String'>
    readonly userId: FieldRef<"Order", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order createManyAndReturn
   */
  export type OrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
  }

  /**
   * Order updateManyAndReturn
   */
  export type OrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to delete.
     */
    limit?: number
  }

  /**
   * Order.OrderProducts
   */
  export type Order$OrderProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProducts
     */
    select?: OrderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProducts
     */
    omit?: OrderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductsInclude<ExtArgs> | null
    where?: OrderProductsWhereInput
    orderBy?: OrderProductsOrderByWithRelationInput | OrderProductsOrderByWithRelationInput[]
    cursor?: OrderProductsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderProductsScalarFieldEnum | OrderProductsScalarFieldEnum[]
  }

  /**
   * Order.OrderMasters
   */
  export type Order$OrderMastersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMasters
     */
    select?: OrderMastersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMasters
     */
    omit?: OrderMastersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMastersInclude<ExtArgs> | null
    where?: OrderMastersWhereInput
    orderBy?: OrderMastersOrderByWithRelationInput | OrderMastersOrderByWithRelationInput[]
    cursor?: OrderMastersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderMastersScalarFieldEnum | OrderMastersScalarFieldEnum[]
  }

  /**
   * Order.Comment
   */
  export type Order$CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model OrderProducts
   */

  export type AggregateOrderProducts = {
    _count: OrderProductsCountAggregateOutputType | null
    _avg: OrderProductsAvgAggregateOutputType | null
    _sum: OrderProductsSumAggregateOutputType | null
    _min: OrderProductsMinAggregateOutputType | null
    _max: OrderProductsMaxAggregateOutputType | null
  }

  export type OrderProductsAvgAggregateOutputType = {
    count: number | null
    price: number | null
    workingTime: number | null
  }

  export type OrderProductsSumAggregateOutputType = {
    count: number | null
    price: number | null
    workingTime: number | null
  }

  export type OrderProductsMinAggregateOutputType = {
    id: string | null
    orderId: string | null
    productId: string | null
    levelId: string | null
    toolId: string | null
    count: number | null
    price: number | null
    workingTime: number | null
    timeUnit: $Enums.MasterDaily | null
  }

  export type OrderProductsMaxAggregateOutputType = {
    id: string | null
    orderId: string | null
    productId: string | null
    levelId: string | null
    toolId: string | null
    count: number | null
    price: number | null
    workingTime: number | null
    timeUnit: $Enums.MasterDaily | null
  }

  export type OrderProductsCountAggregateOutputType = {
    id: number
    orderId: number
    productId: number
    levelId: number
    toolId: number
    count: number
    price: number
    workingTime: number
    timeUnit: number
    _all: number
  }


  export type OrderProductsAvgAggregateInputType = {
    count?: true
    price?: true
    workingTime?: true
  }

  export type OrderProductsSumAggregateInputType = {
    count?: true
    price?: true
    workingTime?: true
  }

  export type OrderProductsMinAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    levelId?: true
    toolId?: true
    count?: true
    price?: true
    workingTime?: true
    timeUnit?: true
  }

  export type OrderProductsMaxAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    levelId?: true
    toolId?: true
    count?: true
    price?: true
    workingTime?: true
    timeUnit?: true
  }

  export type OrderProductsCountAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    levelId?: true
    toolId?: true
    count?: true
    price?: true
    workingTime?: true
    timeUnit?: true
    _all?: true
  }

  export type OrderProductsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderProducts to aggregate.
     */
    where?: OrderProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderProducts to fetch.
     */
    orderBy?: OrderProductsOrderByWithRelationInput | OrderProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderProducts
    **/
    _count?: true | OrderProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderProductsMaxAggregateInputType
  }

  export type GetOrderProductsAggregateType<T extends OrderProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderProducts[P]>
      : GetScalarType<T[P], AggregateOrderProducts[P]>
  }




  export type OrderProductsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderProductsWhereInput
    orderBy?: OrderProductsOrderByWithAggregationInput | OrderProductsOrderByWithAggregationInput[]
    by: OrderProductsScalarFieldEnum[] | OrderProductsScalarFieldEnum
    having?: OrderProductsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderProductsCountAggregateInputType | true
    _avg?: OrderProductsAvgAggregateInputType
    _sum?: OrderProductsSumAggregateInputType
    _min?: OrderProductsMinAggregateInputType
    _max?: OrderProductsMaxAggregateInputType
  }

  export type OrderProductsGroupByOutputType = {
    id: string
    orderId: string
    productId: string
    levelId: string
    toolId: string
    count: number
    price: number
    workingTime: number
    timeUnit: $Enums.MasterDaily
    _count: OrderProductsCountAggregateOutputType | null
    _avg: OrderProductsAvgAggregateOutputType | null
    _sum: OrderProductsSumAggregateOutputType | null
    _min: OrderProductsMinAggregateOutputType | null
    _max: OrderProductsMaxAggregateOutputType | null
  }

  type GetOrderProductsGroupByPayload<T extends OrderProductsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderProductsGroupByOutputType[P]>
            : GetScalarType<T[P], OrderProductsGroupByOutputType[P]>
        }
      >
    >


  export type OrderProductsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    productId?: boolean
    levelId?: boolean
    toolId?: boolean
    count?: boolean
    price?: boolean
    workingTime?: boolean
    timeUnit?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
    tool?: boolean | ToolsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderProducts"]>

  export type OrderProductsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    productId?: boolean
    levelId?: boolean
    toolId?: boolean
    count?: boolean
    price?: boolean
    workingTime?: boolean
    timeUnit?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
    tool?: boolean | ToolsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderProducts"]>

  export type OrderProductsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    productId?: boolean
    levelId?: boolean
    toolId?: boolean
    count?: boolean
    price?: boolean
    workingTime?: boolean
    timeUnit?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
    tool?: boolean | ToolsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderProducts"]>

  export type OrderProductsSelectScalar = {
    id?: boolean
    orderId?: boolean
    productId?: boolean
    levelId?: boolean
    toolId?: boolean
    count?: boolean
    price?: boolean
    workingTime?: boolean
    timeUnit?: boolean
  }

  export type OrderProductsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "productId" | "levelId" | "toolId" | "count" | "price" | "workingTime" | "timeUnit", ExtArgs["result"]["orderProducts"]>
  export type OrderProductsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
    tool?: boolean | ToolsDefaultArgs<ExtArgs>
  }
  export type OrderProductsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
    tool?: boolean | ToolsDefaultArgs<ExtArgs>
  }
  export type OrderProductsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
    tool?: boolean | ToolsDefaultArgs<ExtArgs>
  }

  export type $OrderProductsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderProducts"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
      level: Prisma.$LevelPayload<ExtArgs>
      tool: Prisma.$ToolsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderId: string
      productId: string
      levelId: string
      toolId: string
      count: number
      price: number
      workingTime: number
      timeUnit: $Enums.MasterDaily
    }, ExtArgs["result"]["orderProducts"]>
    composites: {}
  }

  type OrderProductsGetPayload<S extends boolean | null | undefined | OrderProductsDefaultArgs> = $Result.GetResult<Prisma.$OrderProductsPayload, S>

  type OrderProductsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderProductsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderProductsCountAggregateInputType | true
    }

  export interface OrderProductsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderProducts'], meta: { name: 'OrderProducts' } }
    /**
     * Find zero or one OrderProducts that matches the filter.
     * @param {OrderProductsFindUniqueArgs} args - Arguments to find a OrderProducts
     * @example
     * // Get one OrderProducts
     * const orderProducts = await prisma.orderProducts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderProductsFindUniqueArgs>(args: SelectSubset<T, OrderProductsFindUniqueArgs<ExtArgs>>): Prisma__OrderProductsClient<$Result.GetResult<Prisma.$OrderProductsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrderProducts that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderProductsFindUniqueOrThrowArgs} args - Arguments to find a OrderProducts
     * @example
     * // Get one OrderProducts
     * const orderProducts = await prisma.orderProducts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderProductsFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderProductsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderProductsClient<$Result.GetResult<Prisma.$OrderProductsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductsFindFirstArgs} args - Arguments to find a OrderProducts
     * @example
     * // Get one OrderProducts
     * const orderProducts = await prisma.orderProducts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderProductsFindFirstArgs>(args?: SelectSubset<T, OrderProductsFindFirstArgs<ExtArgs>>): Prisma__OrderProductsClient<$Result.GetResult<Prisma.$OrderProductsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderProducts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductsFindFirstOrThrowArgs} args - Arguments to find a OrderProducts
     * @example
     * // Get one OrderProducts
     * const orderProducts = await prisma.orderProducts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderProductsFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderProductsFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderProductsClient<$Result.GetResult<Prisma.$OrderProductsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrderProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderProducts
     * const orderProducts = await prisma.orderProducts.findMany()
     * 
     * // Get first 10 OrderProducts
     * const orderProducts = await prisma.orderProducts.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderProductsWithIdOnly = await prisma.orderProducts.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderProductsFindManyArgs>(args?: SelectSubset<T, OrderProductsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderProductsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrderProducts.
     * @param {OrderProductsCreateArgs} args - Arguments to create a OrderProducts.
     * @example
     * // Create one OrderProducts
     * const OrderProducts = await prisma.orderProducts.create({
     *   data: {
     *     // ... data to create a OrderProducts
     *   }
     * })
     * 
     */
    create<T extends OrderProductsCreateArgs>(args: SelectSubset<T, OrderProductsCreateArgs<ExtArgs>>): Prisma__OrderProductsClient<$Result.GetResult<Prisma.$OrderProductsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrderProducts.
     * @param {OrderProductsCreateManyArgs} args - Arguments to create many OrderProducts.
     * @example
     * // Create many OrderProducts
     * const orderProducts = await prisma.orderProducts.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderProductsCreateManyArgs>(args?: SelectSubset<T, OrderProductsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderProducts and returns the data saved in the database.
     * @param {OrderProductsCreateManyAndReturnArgs} args - Arguments to create many OrderProducts.
     * @example
     * // Create many OrderProducts
     * const orderProducts = await prisma.orderProducts.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderProducts and only return the `id`
     * const orderProductsWithIdOnly = await prisma.orderProducts.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderProductsCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderProductsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderProductsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrderProducts.
     * @param {OrderProductsDeleteArgs} args - Arguments to delete one OrderProducts.
     * @example
     * // Delete one OrderProducts
     * const OrderProducts = await prisma.orderProducts.delete({
     *   where: {
     *     // ... filter to delete one OrderProducts
     *   }
     * })
     * 
     */
    delete<T extends OrderProductsDeleteArgs>(args: SelectSubset<T, OrderProductsDeleteArgs<ExtArgs>>): Prisma__OrderProductsClient<$Result.GetResult<Prisma.$OrderProductsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrderProducts.
     * @param {OrderProductsUpdateArgs} args - Arguments to update one OrderProducts.
     * @example
     * // Update one OrderProducts
     * const orderProducts = await prisma.orderProducts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderProductsUpdateArgs>(args: SelectSubset<T, OrderProductsUpdateArgs<ExtArgs>>): Prisma__OrderProductsClient<$Result.GetResult<Prisma.$OrderProductsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrderProducts.
     * @param {OrderProductsDeleteManyArgs} args - Arguments to filter OrderProducts to delete.
     * @example
     * // Delete a few OrderProducts
     * const { count } = await prisma.orderProducts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderProductsDeleteManyArgs>(args?: SelectSubset<T, OrderProductsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderProducts
     * const orderProducts = await prisma.orderProducts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderProductsUpdateManyArgs>(args: SelectSubset<T, OrderProductsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderProducts and returns the data updated in the database.
     * @param {OrderProductsUpdateManyAndReturnArgs} args - Arguments to update many OrderProducts.
     * @example
     * // Update many OrderProducts
     * const orderProducts = await prisma.orderProducts.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrderProducts and only return the `id`
     * const orderProductsWithIdOnly = await prisma.orderProducts.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderProductsUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderProductsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderProductsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrderProducts.
     * @param {OrderProductsUpsertArgs} args - Arguments to update or create a OrderProducts.
     * @example
     * // Update or create a OrderProducts
     * const orderProducts = await prisma.orderProducts.upsert({
     *   create: {
     *     // ... data to create a OrderProducts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderProducts we want to update
     *   }
     * })
     */
    upsert<T extends OrderProductsUpsertArgs>(args: SelectSubset<T, OrderProductsUpsertArgs<ExtArgs>>): Prisma__OrderProductsClient<$Result.GetResult<Prisma.$OrderProductsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrderProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductsCountArgs} args - Arguments to filter OrderProducts to count.
     * @example
     * // Count the number of OrderProducts
     * const count = await prisma.orderProducts.count({
     *   where: {
     *     // ... the filter for the OrderProducts we want to count
     *   }
     * })
    **/
    count<T extends OrderProductsCountArgs>(
      args?: Subset<T, OrderProductsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderProductsAggregateArgs>(args: Subset<T, OrderProductsAggregateArgs>): Prisma.PrismaPromise<GetOrderProductsAggregateType<T>>

    /**
     * Group by OrderProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderProductsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderProductsGroupByArgs['orderBy'] }
        : { orderBy?: OrderProductsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderProductsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderProductsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderProducts model
   */
  readonly fields: OrderProductsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderProducts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderProductsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    level<T extends LevelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LevelDefaultArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tool<T extends ToolsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ToolsDefaultArgs<ExtArgs>>): Prisma__ToolsClient<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderProducts model
   */
  interface OrderProductsFieldRefs {
    readonly id: FieldRef<"OrderProducts", 'String'>
    readonly orderId: FieldRef<"OrderProducts", 'String'>
    readonly productId: FieldRef<"OrderProducts", 'String'>
    readonly levelId: FieldRef<"OrderProducts", 'String'>
    readonly toolId: FieldRef<"OrderProducts", 'String'>
    readonly count: FieldRef<"OrderProducts", 'Int'>
    readonly price: FieldRef<"OrderProducts", 'Int'>
    readonly workingTime: FieldRef<"OrderProducts", 'Int'>
    readonly timeUnit: FieldRef<"OrderProducts", 'MasterDaily'>
  }
    

  // Custom InputTypes
  /**
   * OrderProducts findUnique
   */
  export type OrderProductsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProducts
     */
    select?: OrderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProducts
     */
    omit?: OrderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductsInclude<ExtArgs> | null
    /**
     * Filter, which OrderProducts to fetch.
     */
    where: OrderProductsWhereUniqueInput
  }

  /**
   * OrderProducts findUniqueOrThrow
   */
  export type OrderProductsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProducts
     */
    select?: OrderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProducts
     */
    omit?: OrderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductsInclude<ExtArgs> | null
    /**
     * Filter, which OrderProducts to fetch.
     */
    where: OrderProductsWhereUniqueInput
  }

  /**
   * OrderProducts findFirst
   */
  export type OrderProductsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProducts
     */
    select?: OrderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProducts
     */
    omit?: OrderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductsInclude<ExtArgs> | null
    /**
     * Filter, which OrderProducts to fetch.
     */
    where?: OrderProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderProducts to fetch.
     */
    orderBy?: OrderProductsOrderByWithRelationInput | OrderProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderProducts.
     */
    cursor?: OrderProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderProducts.
     */
    distinct?: OrderProductsScalarFieldEnum | OrderProductsScalarFieldEnum[]
  }

  /**
   * OrderProducts findFirstOrThrow
   */
  export type OrderProductsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProducts
     */
    select?: OrderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProducts
     */
    omit?: OrderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductsInclude<ExtArgs> | null
    /**
     * Filter, which OrderProducts to fetch.
     */
    where?: OrderProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderProducts to fetch.
     */
    orderBy?: OrderProductsOrderByWithRelationInput | OrderProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderProducts.
     */
    cursor?: OrderProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderProducts.
     */
    distinct?: OrderProductsScalarFieldEnum | OrderProductsScalarFieldEnum[]
  }

  /**
   * OrderProducts findMany
   */
  export type OrderProductsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProducts
     */
    select?: OrderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProducts
     */
    omit?: OrderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductsInclude<ExtArgs> | null
    /**
     * Filter, which OrderProducts to fetch.
     */
    where?: OrderProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderProducts to fetch.
     */
    orderBy?: OrderProductsOrderByWithRelationInput | OrderProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderProducts.
     */
    cursor?: OrderProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderProducts.
     */
    skip?: number
    distinct?: OrderProductsScalarFieldEnum | OrderProductsScalarFieldEnum[]
  }

  /**
   * OrderProducts create
   */
  export type OrderProductsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProducts
     */
    select?: OrderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProducts
     */
    omit?: OrderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductsInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderProducts.
     */
    data: XOR<OrderProductsCreateInput, OrderProductsUncheckedCreateInput>
  }

  /**
   * OrderProducts createMany
   */
  export type OrderProductsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderProducts.
     */
    data: OrderProductsCreateManyInput | OrderProductsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderProducts createManyAndReturn
   */
  export type OrderProductsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProducts
     */
    select?: OrderProductsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProducts
     */
    omit?: OrderProductsOmit<ExtArgs> | null
    /**
     * The data used to create many OrderProducts.
     */
    data: OrderProductsCreateManyInput | OrderProductsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderProducts update
   */
  export type OrderProductsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProducts
     */
    select?: OrderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProducts
     */
    omit?: OrderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductsInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderProducts.
     */
    data: XOR<OrderProductsUpdateInput, OrderProductsUncheckedUpdateInput>
    /**
     * Choose, which OrderProducts to update.
     */
    where: OrderProductsWhereUniqueInput
  }

  /**
   * OrderProducts updateMany
   */
  export type OrderProductsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderProducts.
     */
    data: XOR<OrderProductsUpdateManyMutationInput, OrderProductsUncheckedUpdateManyInput>
    /**
     * Filter which OrderProducts to update
     */
    where?: OrderProductsWhereInput
    /**
     * Limit how many OrderProducts to update.
     */
    limit?: number
  }

  /**
   * OrderProducts updateManyAndReturn
   */
  export type OrderProductsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProducts
     */
    select?: OrderProductsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProducts
     */
    omit?: OrderProductsOmit<ExtArgs> | null
    /**
     * The data used to update OrderProducts.
     */
    data: XOR<OrderProductsUpdateManyMutationInput, OrderProductsUncheckedUpdateManyInput>
    /**
     * Filter which OrderProducts to update
     */
    where?: OrderProductsWhereInput
    /**
     * Limit how many OrderProducts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderProducts upsert
   */
  export type OrderProductsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProducts
     */
    select?: OrderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProducts
     */
    omit?: OrderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductsInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderProducts to update in case it exists.
     */
    where: OrderProductsWhereUniqueInput
    /**
     * In case the OrderProducts found by the `where` argument doesn't exist, create a new OrderProducts with this data.
     */
    create: XOR<OrderProductsCreateInput, OrderProductsUncheckedCreateInput>
    /**
     * In case the OrderProducts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderProductsUpdateInput, OrderProductsUncheckedUpdateInput>
  }

  /**
   * OrderProducts delete
   */
  export type OrderProductsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProducts
     */
    select?: OrderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProducts
     */
    omit?: OrderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductsInclude<ExtArgs> | null
    /**
     * Filter which OrderProducts to delete.
     */
    where: OrderProductsWhereUniqueInput
  }

  /**
   * OrderProducts deleteMany
   */
  export type OrderProductsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderProducts to delete
     */
    where?: OrderProductsWhereInput
    /**
     * Limit how many OrderProducts to delete.
     */
    limit?: number
  }

  /**
   * OrderProducts without action
   */
  export type OrderProductsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderProducts
     */
    select?: OrderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderProducts
     */
    omit?: OrderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderProductsInclude<ExtArgs> | null
  }


  /**
   * Model OrderMasters
   */

  export type AggregateOrderMasters = {
    _count: OrderMastersCountAggregateOutputType | null
    _min: OrderMastersMinAggregateOutputType | null
    _max: OrderMastersMaxAggregateOutputType | null
  }

  export type OrderMastersMinAggregateOutputType = {
    id: string | null
    orderId: string | null
    masterId: string | null
  }

  export type OrderMastersMaxAggregateOutputType = {
    id: string | null
    orderId: string | null
    masterId: string | null
  }

  export type OrderMastersCountAggregateOutputType = {
    id: number
    orderId: number
    masterId: number
    _all: number
  }


  export type OrderMastersMinAggregateInputType = {
    id?: true
    orderId?: true
    masterId?: true
  }

  export type OrderMastersMaxAggregateInputType = {
    id?: true
    orderId?: true
    masterId?: true
  }

  export type OrderMastersCountAggregateInputType = {
    id?: true
    orderId?: true
    masterId?: true
    _all?: true
  }

  export type OrderMastersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderMasters to aggregate.
     */
    where?: OrderMastersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderMasters to fetch.
     */
    orderBy?: OrderMastersOrderByWithRelationInput | OrderMastersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderMastersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderMasters
    **/
    _count?: true | OrderMastersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMastersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMastersMaxAggregateInputType
  }

  export type GetOrderMastersAggregateType<T extends OrderMastersAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderMasters]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderMasters[P]>
      : GetScalarType<T[P], AggregateOrderMasters[P]>
  }




  export type OrderMastersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderMastersWhereInput
    orderBy?: OrderMastersOrderByWithAggregationInput | OrderMastersOrderByWithAggregationInput[]
    by: OrderMastersScalarFieldEnum[] | OrderMastersScalarFieldEnum
    having?: OrderMastersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderMastersCountAggregateInputType | true
    _min?: OrderMastersMinAggregateInputType
    _max?: OrderMastersMaxAggregateInputType
  }

  export type OrderMastersGroupByOutputType = {
    id: string
    orderId: string
    masterId: string
    _count: OrderMastersCountAggregateOutputType | null
    _min: OrderMastersMinAggregateOutputType | null
    _max: OrderMastersMaxAggregateOutputType | null
  }

  type GetOrderMastersGroupByPayload<T extends OrderMastersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderMastersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderMastersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderMastersGroupByOutputType[P]>
            : GetScalarType<T[P], OrderMastersGroupByOutputType[P]>
        }
      >
    >


  export type OrderMastersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    masterId?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderMasters"]>

  export type OrderMastersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    masterId?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderMasters"]>

  export type OrderMastersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    masterId?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderMasters"]>

  export type OrderMastersSelectScalar = {
    id?: boolean
    orderId?: boolean
    masterId?: boolean
  }

  export type OrderMastersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "masterId", ExtArgs["result"]["orderMasters"]>
  export type OrderMastersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }
  export type OrderMastersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }
  export type OrderMastersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }

  export type $OrderMastersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderMasters"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      master: Prisma.$MasterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderId: string
      masterId: string
    }, ExtArgs["result"]["orderMasters"]>
    composites: {}
  }

  type OrderMastersGetPayload<S extends boolean | null | undefined | OrderMastersDefaultArgs> = $Result.GetResult<Prisma.$OrderMastersPayload, S>

  type OrderMastersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderMastersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderMastersCountAggregateInputType | true
    }

  export interface OrderMastersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderMasters'], meta: { name: 'OrderMasters' } }
    /**
     * Find zero or one OrderMasters that matches the filter.
     * @param {OrderMastersFindUniqueArgs} args - Arguments to find a OrderMasters
     * @example
     * // Get one OrderMasters
     * const orderMasters = await prisma.orderMasters.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderMastersFindUniqueArgs>(args: SelectSubset<T, OrderMastersFindUniqueArgs<ExtArgs>>): Prisma__OrderMastersClient<$Result.GetResult<Prisma.$OrderMastersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrderMasters that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderMastersFindUniqueOrThrowArgs} args - Arguments to find a OrderMasters
     * @example
     * // Get one OrderMasters
     * const orderMasters = await prisma.orderMasters.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderMastersFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderMastersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderMastersClient<$Result.GetResult<Prisma.$OrderMastersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderMasters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderMastersFindFirstArgs} args - Arguments to find a OrderMasters
     * @example
     * // Get one OrderMasters
     * const orderMasters = await prisma.orderMasters.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderMastersFindFirstArgs>(args?: SelectSubset<T, OrderMastersFindFirstArgs<ExtArgs>>): Prisma__OrderMastersClient<$Result.GetResult<Prisma.$OrderMastersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderMasters that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderMastersFindFirstOrThrowArgs} args - Arguments to find a OrderMasters
     * @example
     * // Get one OrderMasters
     * const orderMasters = await prisma.orderMasters.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderMastersFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderMastersFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderMastersClient<$Result.GetResult<Prisma.$OrderMastersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrderMasters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderMastersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderMasters
     * const orderMasters = await prisma.orderMasters.findMany()
     * 
     * // Get first 10 OrderMasters
     * const orderMasters = await prisma.orderMasters.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderMastersWithIdOnly = await prisma.orderMasters.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderMastersFindManyArgs>(args?: SelectSubset<T, OrderMastersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderMastersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrderMasters.
     * @param {OrderMastersCreateArgs} args - Arguments to create a OrderMasters.
     * @example
     * // Create one OrderMasters
     * const OrderMasters = await prisma.orderMasters.create({
     *   data: {
     *     // ... data to create a OrderMasters
     *   }
     * })
     * 
     */
    create<T extends OrderMastersCreateArgs>(args: SelectSubset<T, OrderMastersCreateArgs<ExtArgs>>): Prisma__OrderMastersClient<$Result.GetResult<Prisma.$OrderMastersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrderMasters.
     * @param {OrderMastersCreateManyArgs} args - Arguments to create many OrderMasters.
     * @example
     * // Create many OrderMasters
     * const orderMasters = await prisma.orderMasters.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderMastersCreateManyArgs>(args?: SelectSubset<T, OrderMastersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderMasters and returns the data saved in the database.
     * @param {OrderMastersCreateManyAndReturnArgs} args - Arguments to create many OrderMasters.
     * @example
     * // Create many OrderMasters
     * const orderMasters = await prisma.orderMasters.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderMasters and only return the `id`
     * const orderMastersWithIdOnly = await prisma.orderMasters.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderMastersCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderMastersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderMastersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrderMasters.
     * @param {OrderMastersDeleteArgs} args - Arguments to delete one OrderMasters.
     * @example
     * // Delete one OrderMasters
     * const OrderMasters = await prisma.orderMasters.delete({
     *   where: {
     *     // ... filter to delete one OrderMasters
     *   }
     * })
     * 
     */
    delete<T extends OrderMastersDeleteArgs>(args: SelectSubset<T, OrderMastersDeleteArgs<ExtArgs>>): Prisma__OrderMastersClient<$Result.GetResult<Prisma.$OrderMastersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrderMasters.
     * @param {OrderMastersUpdateArgs} args - Arguments to update one OrderMasters.
     * @example
     * // Update one OrderMasters
     * const orderMasters = await prisma.orderMasters.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderMastersUpdateArgs>(args: SelectSubset<T, OrderMastersUpdateArgs<ExtArgs>>): Prisma__OrderMastersClient<$Result.GetResult<Prisma.$OrderMastersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrderMasters.
     * @param {OrderMastersDeleteManyArgs} args - Arguments to filter OrderMasters to delete.
     * @example
     * // Delete a few OrderMasters
     * const { count } = await prisma.orderMasters.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderMastersDeleteManyArgs>(args?: SelectSubset<T, OrderMastersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderMasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderMastersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderMasters
     * const orderMasters = await prisma.orderMasters.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderMastersUpdateManyArgs>(args: SelectSubset<T, OrderMastersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderMasters and returns the data updated in the database.
     * @param {OrderMastersUpdateManyAndReturnArgs} args - Arguments to update many OrderMasters.
     * @example
     * // Update many OrderMasters
     * const orderMasters = await prisma.orderMasters.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrderMasters and only return the `id`
     * const orderMastersWithIdOnly = await prisma.orderMasters.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderMastersUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderMastersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderMastersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrderMasters.
     * @param {OrderMastersUpsertArgs} args - Arguments to update or create a OrderMasters.
     * @example
     * // Update or create a OrderMasters
     * const orderMasters = await prisma.orderMasters.upsert({
     *   create: {
     *     // ... data to create a OrderMasters
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderMasters we want to update
     *   }
     * })
     */
    upsert<T extends OrderMastersUpsertArgs>(args: SelectSubset<T, OrderMastersUpsertArgs<ExtArgs>>): Prisma__OrderMastersClient<$Result.GetResult<Prisma.$OrderMastersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrderMasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderMastersCountArgs} args - Arguments to filter OrderMasters to count.
     * @example
     * // Count the number of OrderMasters
     * const count = await prisma.orderMasters.count({
     *   where: {
     *     // ... the filter for the OrderMasters we want to count
     *   }
     * })
    **/
    count<T extends OrderMastersCountArgs>(
      args?: Subset<T, OrderMastersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderMastersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderMasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderMastersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderMastersAggregateArgs>(args: Subset<T, OrderMastersAggregateArgs>): Prisma.PrismaPromise<GetOrderMastersAggregateType<T>>

    /**
     * Group by OrderMasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderMastersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderMastersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderMastersGroupByArgs['orderBy'] }
        : { orderBy?: OrderMastersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderMastersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderMastersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderMasters model
   */
  readonly fields: OrderMastersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderMasters.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderMastersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    master<T extends MasterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MasterDefaultArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderMasters model
   */
  interface OrderMastersFieldRefs {
    readonly id: FieldRef<"OrderMasters", 'String'>
    readonly orderId: FieldRef<"OrderMasters", 'String'>
    readonly masterId: FieldRef<"OrderMasters", 'String'>
  }
    

  // Custom InputTypes
  /**
   * OrderMasters findUnique
   */
  export type OrderMastersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMasters
     */
    select?: OrderMastersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMasters
     */
    omit?: OrderMastersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMastersInclude<ExtArgs> | null
    /**
     * Filter, which OrderMasters to fetch.
     */
    where: OrderMastersWhereUniqueInput
  }

  /**
   * OrderMasters findUniqueOrThrow
   */
  export type OrderMastersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMasters
     */
    select?: OrderMastersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMasters
     */
    omit?: OrderMastersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMastersInclude<ExtArgs> | null
    /**
     * Filter, which OrderMasters to fetch.
     */
    where: OrderMastersWhereUniqueInput
  }

  /**
   * OrderMasters findFirst
   */
  export type OrderMastersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMasters
     */
    select?: OrderMastersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMasters
     */
    omit?: OrderMastersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMastersInclude<ExtArgs> | null
    /**
     * Filter, which OrderMasters to fetch.
     */
    where?: OrderMastersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderMasters to fetch.
     */
    orderBy?: OrderMastersOrderByWithRelationInput | OrderMastersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderMasters.
     */
    cursor?: OrderMastersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderMasters.
     */
    distinct?: OrderMastersScalarFieldEnum | OrderMastersScalarFieldEnum[]
  }

  /**
   * OrderMasters findFirstOrThrow
   */
  export type OrderMastersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMasters
     */
    select?: OrderMastersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMasters
     */
    omit?: OrderMastersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMastersInclude<ExtArgs> | null
    /**
     * Filter, which OrderMasters to fetch.
     */
    where?: OrderMastersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderMasters to fetch.
     */
    orderBy?: OrderMastersOrderByWithRelationInput | OrderMastersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderMasters.
     */
    cursor?: OrderMastersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderMasters.
     */
    distinct?: OrderMastersScalarFieldEnum | OrderMastersScalarFieldEnum[]
  }

  /**
   * OrderMasters findMany
   */
  export type OrderMastersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMasters
     */
    select?: OrderMastersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMasters
     */
    omit?: OrderMastersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMastersInclude<ExtArgs> | null
    /**
     * Filter, which OrderMasters to fetch.
     */
    where?: OrderMastersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderMasters to fetch.
     */
    orderBy?: OrderMastersOrderByWithRelationInput | OrderMastersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderMasters.
     */
    cursor?: OrderMastersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderMasters.
     */
    skip?: number
    distinct?: OrderMastersScalarFieldEnum | OrderMastersScalarFieldEnum[]
  }

  /**
   * OrderMasters create
   */
  export type OrderMastersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMasters
     */
    select?: OrderMastersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMasters
     */
    omit?: OrderMastersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMastersInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderMasters.
     */
    data: XOR<OrderMastersCreateInput, OrderMastersUncheckedCreateInput>
  }

  /**
   * OrderMasters createMany
   */
  export type OrderMastersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderMasters.
     */
    data: OrderMastersCreateManyInput | OrderMastersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderMasters createManyAndReturn
   */
  export type OrderMastersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMasters
     */
    select?: OrderMastersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMasters
     */
    omit?: OrderMastersOmit<ExtArgs> | null
    /**
     * The data used to create many OrderMasters.
     */
    data: OrderMastersCreateManyInput | OrderMastersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMastersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderMasters update
   */
  export type OrderMastersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMasters
     */
    select?: OrderMastersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMasters
     */
    omit?: OrderMastersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMastersInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderMasters.
     */
    data: XOR<OrderMastersUpdateInput, OrderMastersUncheckedUpdateInput>
    /**
     * Choose, which OrderMasters to update.
     */
    where: OrderMastersWhereUniqueInput
  }

  /**
   * OrderMasters updateMany
   */
  export type OrderMastersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderMasters.
     */
    data: XOR<OrderMastersUpdateManyMutationInput, OrderMastersUncheckedUpdateManyInput>
    /**
     * Filter which OrderMasters to update
     */
    where?: OrderMastersWhereInput
    /**
     * Limit how many OrderMasters to update.
     */
    limit?: number
  }

  /**
   * OrderMasters updateManyAndReturn
   */
  export type OrderMastersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMasters
     */
    select?: OrderMastersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMasters
     */
    omit?: OrderMastersOmit<ExtArgs> | null
    /**
     * The data used to update OrderMasters.
     */
    data: XOR<OrderMastersUpdateManyMutationInput, OrderMastersUncheckedUpdateManyInput>
    /**
     * Filter which OrderMasters to update
     */
    where?: OrderMastersWhereInput
    /**
     * Limit how many OrderMasters to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMastersIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderMasters upsert
   */
  export type OrderMastersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMasters
     */
    select?: OrderMastersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMasters
     */
    omit?: OrderMastersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMastersInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderMasters to update in case it exists.
     */
    where: OrderMastersWhereUniqueInput
    /**
     * In case the OrderMasters found by the `where` argument doesn't exist, create a new OrderMasters with this data.
     */
    create: XOR<OrderMastersCreateInput, OrderMastersUncheckedCreateInput>
    /**
     * In case the OrderMasters was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderMastersUpdateInput, OrderMastersUncheckedUpdateInput>
  }

  /**
   * OrderMasters delete
   */
  export type OrderMastersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMasters
     */
    select?: OrderMastersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMasters
     */
    omit?: OrderMastersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMastersInclude<ExtArgs> | null
    /**
     * Filter which OrderMasters to delete.
     */
    where: OrderMastersWhereUniqueInput
  }

  /**
   * OrderMasters deleteMany
   */
  export type OrderMastersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderMasters to delete
     */
    where?: OrderMastersWhereInput
    /**
     * Limit how many OrderMasters to delete.
     */
    limit?: number
  }

  /**
   * OrderMasters without action
   */
  export type OrderMastersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderMasters
     */
    select?: OrderMastersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderMasters
     */
    omit?: OrderMastersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderMastersInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    text: string | null
    userId: string | null
    orderId: string | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    text: string | null
    userId: string | null
    orderId: string | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    text: number
    userId: number
    orderId: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    text?: true
    userId?: true
    orderId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    text?: true
    userId?: true
    orderId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    text?: true
    userId?: true
    orderId?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    text: string
    userId: string
    orderId: string
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    userId?: boolean
    orderId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
    MasterRatings?: boolean | Comment$MasterRatingsArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    userId?: boolean
    orderId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    userId?: boolean
    orderId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    text?: boolean
    userId?: boolean
    orderId?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "text" | "userId" | "orderId", ExtArgs["result"]["comment"]>
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
    MasterRatings?: boolean | Comment$MasterRatingsArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }
  export type CommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      order: Prisma.$OrderPayload<ExtArgs>
      MasterRatings: Prisma.$MasterRatingsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      text: string
      userId: string
      orderId: string
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments and returns the data updated in the database.
     * @param {CommentUpdateManyAndReturnArgs} args - Arguments to update many Comments.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommentUpdateManyAndReturnArgs>(args: SelectSubset<T, CommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    MasterRatings<T extends Comment$MasterRatingsArgs<ExtArgs> = {}>(args?: Subset<T, Comment$MasterRatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly text: FieldRef<"Comment", 'String'>
    readonly userId: FieldRef<"Comment", 'String'>
    readonly orderId: FieldRef<"Comment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment updateManyAndReturn
   */
  export type CommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comment.MasterRatings
   */
  export type Comment$MasterRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    where?: MasterRatingsWhereInput
    orderBy?: MasterRatingsOrderByWithRelationInput | MasterRatingsOrderByWithRelationInput[]
    cursor?: MasterRatingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterRatingsScalarFieldEnum | MasterRatingsScalarFieldEnum[]
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model MasterRatings
   */

  export type AggregateMasterRatings = {
    _count: MasterRatingsCountAggregateOutputType | null
    _avg: MasterRatingsAvgAggregateOutputType | null
    _sum: MasterRatingsSumAggregateOutputType | null
    _min: MasterRatingsMinAggregateOutputType | null
    _max: MasterRatingsMaxAggregateOutputType | null
  }

  export type MasterRatingsAvgAggregateOutputType = {
    star: number | null
  }

  export type MasterRatingsSumAggregateOutputType = {
    star: number | null
  }

  export type MasterRatingsMinAggregateOutputType = {
    id: string | null
    star: number | null
    masterId: string | null
    commentId: string | null
  }

  export type MasterRatingsMaxAggregateOutputType = {
    id: string | null
    star: number | null
    masterId: string | null
    commentId: string | null
  }

  export type MasterRatingsCountAggregateOutputType = {
    id: number
    star: number
    masterId: number
    commentId: number
    _all: number
  }


  export type MasterRatingsAvgAggregateInputType = {
    star?: true
  }

  export type MasterRatingsSumAggregateInputType = {
    star?: true
  }

  export type MasterRatingsMinAggregateInputType = {
    id?: true
    star?: true
    masterId?: true
    commentId?: true
  }

  export type MasterRatingsMaxAggregateInputType = {
    id?: true
    star?: true
    masterId?: true
    commentId?: true
  }

  export type MasterRatingsCountAggregateInputType = {
    id?: true
    star?: true
    masterId?: true
    commentId?: true
    _all?: true
  }

  export type MasterRatingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterRatings to aggregate.
     */
    where?: MasterRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterRatings to fetch.
     */
    orderBy?: MasterRatingsOrderByWithRelationInput | MasterRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MasterRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MasterRatings
    **/
    _count?: true | MasterRatingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MasterRatingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MasterRatingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MasterRatingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MasterRatingsMaxAggregateInputType
  }

  export type GetMasterRatingsAggregateType<T extends MasterRatingsAggregateArgs> = {
        [P in keyof T & keyof AggregateMasterRatings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMasterRatings[P]>
      : GetScalarType<T[P], AggregateMasterRatings[P]>
  }




  export type MasterRatingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterRatingsWhereInput
    orderBy?: MasterRatingsOrderByWithAggregationInput | MasterRatingsOrderByWithAggregationInput[]
    by: MasterRatingsScalarFieldEnum[] | MasterRatingsScalarFieldEnum
    having?: MasterRatingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MasterRatingsCountAggregateInputType | true
    _avg?: MasterRatingsAvgAggregateInputType
    _sum?: MasterRatingsSumAggregateInputType
    _min?: MasterRatingsMinAggregateInputType
    _max?: MasterRatingsMaxAggregateInputType
  }

  export type MasterRatingsGroupByOutputType = {
    id: string
    star: number
    masterId: string
    commentId: string
    _count: MasterRatingsCountAggregateOutputType | null
    _avg: MasterRatingsAvgAggregateOutputType | null
    _sum: MasterRatingsSumAggregateOutputType | null
    _min: MasterRatingsMinAggregateOutputType | null
    _max: MasterRatingsMaxAggregateOutputType | null
  }

  type GetMasterRatingsGroupByPayload<T extends MasterRatingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MasterRatingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MasterRatingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MasterRatingsGroupByOutputType[P]>
            : GetScalarType<T[P], MasterRatingsGroupByOutputType[P]>
        }
      >
    >


  export type MasterRatingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    star?: boolean
    masterId?: boolean
    commentId?: boolean
    comment?: boolean | CommentDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterRatings"]>

  export type MasterRatingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    star?: boolean
    masterId?: boolean
    commentId?: boolean
    comment?: boolean | CommentDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterRatings"]>

  export type MasterRatingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    star?: boolean
    masterId?: boolean
    commentId?: boolean
    comment?: boolean | CommentDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterRatings"]>

  export type MasterRatingsSelectScalar = {
    id?: boolean
    star?: boolean
    masterId?: boolean
    commentId?: boolean
  }

  export type MasterRatingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "star" | "masterId" | "commentId", ExtArgs["result"]["masterRatings"]>
  export type MasterRatingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comment?: boolean | CommentDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }
  export type MasterRatingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comment?: boolean | CommentDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }
  export type MasterRatingsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comment?: boolean | CommentDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }

  export type $MasterRatingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MasterRatings"
    objects: {
      comment: Prisma.$CommentPayload<ExtArgs>
      master: Prisma.$MasterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      star: number
      masterId: string
      commentId: string
    }, ExtArgs["result"]["masterRatings"]>
    composites: {}
  }

  type MasterRatingsGetPayload<S extends boolean | null | undefined | MasterRatingsDefaultArgs> = $Result.GetResult<Prisma.$MasterRatingsPayload, S>

  type MasterRatingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MasterRatingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MasterRatingsCountAggregateInputType | true
    }

  export interface MasterRatingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MasterRatings'], meta: { name: 'MasterRatings' } }
    /**
     * Find zero or one MasterRatings that matches the filter.
     * @param {MasterRatingsFindUniqueArgs} args - Arguments to find a MasterRatings
     * @example
     * // Get one MasterRatings
     * const masterRatings = await prisma.masterRatings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MasterRatingsFindUniqueArgs>(args: SelectSubset<T, MasterRatingsFindUniqueArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MasterRatings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MasterRatingsFindUniqueOrThrowArgs} args - Arguments to find a MasterRatings
     * @example
     * // Get one MasterRatings
     * const masterRatings = await prisma.masterRatings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MasterRatingsFindUniqueOrThrowArgs>(args: SelectSubset<T, MasterRatingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MasterRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterRatingsFindFirstArgs} args - Arguments to find a MasterRatings
     * @example
     * // Get one MasterRatings
     * const masterRatings = await prisma.masterRatings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MasterRatingsFindFirstArgs>(args?: SelectSubset<T, MasterRatingsFindFirstArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MasterRatings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterRatingsFindFirstOrThrowArgs} args - Arguments to find a MasterRatings
     * @example
     * // Get one MasterRatings
     * const masterRatings = await prisma.masterRatings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MasterRatingsFindFirstOrThrowArgs>(args?: SelectSubset<T, MasterRatingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MasterRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterRatingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MasterRatings
     * const masterRatings = await prisma.masterRatings.findMany()
     * 
     * // Get first 10 MasterRatings
     * const masterRatings = await prisma.masterRatings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const masterRatingsWithIdOnly = await prisma.masterRatings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MasterRatingsFindManyArgs>(args?: SelectSubset<T, MasterRatingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MasterRatings.
     * @param {MasterRatingsCreateArgs} args - Arguments to create a MasterRatings.
     * @example
     * // Create one MasterRatings
     * const MasterRatings = await prisma.masterRatings.create({
     *   data: {
     *     // ... data to create a MasterRatings
     *   }
     * })
     * 
     */
    create<T extends MasterRatingsCreateArgs>(args: SelectSubset<T, MasterRatingsCreateArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MasterRatings.
     * @param {MasterRatingsCreateManyArgs} args - Arguments to create many MasterRatings.
     * @example
     * // Create many MasterRatings
     * const masterRatings = await prisma.masterRatings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MasterRatingsCreateManyArgs>(args?: SelectSubset<T, MasterRatingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MasterRatings and returns the data saved in the database.
     * @param {MasterRatingsCreateManyAndReturnArgs} args - Arguments to create many MasterRatings.
     * @example
     * // Create many MasterRatings
     * const masterRatings = await prisma.masterRatings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MasterRatings and only return the `id`
     * const masterRatingsWithIdOnly = await prisma.masterRatings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MasterRatingsCreateManyAndReturnArgs>(args?: SelectSubset<T, MasterRatingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MasterRatings.
     * @param {MasterRatingsDeleteArgs} args - Arguments to delete one MasterRatings.
     * @example
     * // Delete one MasterRatings
     * const MasterRatings = await prisma.masterRatings.delete({
     *   where: {
     *     // ... filter to delete one MasterRatings
     *   }
     * })
     * 
     */
    delete<T extends MasterRatingsDeleteArgs>(args: SelectSubset<T, MasterRatingsDeleteArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MasterRatings.
     * @param {MasterRatingsUpdateArgs} args - Arguments to update one MasterRatings.
     * @example
     * // Update one MasterRatings
     * const masterRatings = await prisma.masterRatings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MasterRatingsUpdateArgs>(args: SelectSubset<T, MasterRatingsUpdateArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MasterRatings.
     * @param {MasterRatingsDeleteManyArgs} args - Arguments to filter MasterRatings to delete.
     * @example
     * // Delete a few MasterRatings
     * const { count } = await prisma.masterRatings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MasterRatingsDeleteManyArgs>(args?: SelectSubset<T, MasterRatingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MasterRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterRatingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MasterRatings
     * const masterRatings = await prisma.masterRatings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MasterRatingsUpdateManyArgs>(args: SelectSubset<T, MasterRatingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MasterRatings and returns the data updated in the database.
     * @param {MasterRatingsUpdateManyAndReturnArgs} args - Arguments to update many MasterRatings.
     * @example
     * // Update many MasterRatings
     * const masterRatings = await prisma.masterRatings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MasterRatings and only return the `id`
     * const masterRatingsWithIdOnly = await prisma.masterRatings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MasterRatingsUpdateManyAndReturnArgs>(args: SelectSubset<T, MasterRatingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MasterRatings.
     * @param {MasterRatingsUpsertArgs} args - Arguments to update or create a MasterRatings.
     * @example
     * // Update or create a MasterRatings
     * const masterRatings = await prisma.masterRatings.upsert({
     *   create: {
     *     // ... data to create a MasterRatings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MasterRatings we want to update
     *   }
     * })
     */
    upsert<T extends MasterRatingsUpsertArgs>(args: SelectSubset<T, MasterRatingsUpsertArgs<ExtArgs>>): Prisma__MasterRatingsClient<$Result.GetResult<Prisma.$MasterRatingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MasterRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterRatingsCountArgs} args - Arguments to filter MasterRatings to count.
     * @example
     * // Count the number of MasterRatings
     * const count = await prisma.masterRatings.count({
     *   where: {
     *     // ... the filter for the MasterRatings we want to count
     *   }
     * })
    **/
    count<T extends MasterRatingsCountArgs>(
      args?: Subset<T, MasterRatingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MasterRatingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MasterRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterRatingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MasterRatingsAggregateArgs>(args: Subset<T, MasterRatingsAggregateArgs>): Prisma.PrismaPromise<GetMasterRatingsAggregateType<T>>

    /**
     * Group by MasterRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterRatingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MasterRatingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MasterRatingsGroupByArgs['orderBy'] }
        : { orderBy?: MasterRatingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MasterRatingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMasterRatingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MasterRatings model
   */
  readonly fields: MasterRatingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MasterRatings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MasterRatingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    comment<T extends CommentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommentDefaultArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    master<T extends MasterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MasterDefaultArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MasterRatings model
   */
  interface MasterRatingsFieldRefs {
    readonly id: FieldRef<"MasterRatings", 'String'>
    readonly star: FieldRef<"MasterRatings", 'Float'>
    readonly masterId: FieldRef<"MasterRatings", 'String'>
    readonly commentId: FieldRef<"MasterRatings", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MasterRatings findUnique
   */
  export type MasterRatingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * Filter, which MasterRatings to fetch.
     */
    where: MasterRatingsWhereUniqueInput
  }

  /**
   * MasterRatings findUniqueOrThrow
   */
  export type MasterRatingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * Filter, which MasterRatings to fetch.
     */
    where: MasterRatingsWhereUniqueInput
  }

  /**
   * MasterRatings findFirst
   */
  export type MasterRatingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * Filter, which MasterRatings to fetch.
     */
    where?: MasterRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterRatings to fetch.
     */
    orderBy?: MasterRatingsOrderByWithRelationInput | MasterRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterRatings.
     */
    cursor?: MasterRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterRatings.
     */
    distinct?: MasterRatingsScalarFieldEnum | MasterRatingsScalarFieldEnum[]
  }

  /**
   * MasterRatings findFirstOrThrow
   */
  export type MasterRatingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * Filter, which MasterRatings to fetch.
     */
    where?: MasterRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterRatings to fetch.
     */
    orderBy?: MasterRatingsOrderByWithRelationInput | MasterRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MasterRatings.
     */
    cursor?: MasterRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MasterRatings.
     */
    distinct?: MasterRatingsScalarFieldEnum | MasterRatingsScalarFieldEnum[]
  }

  /**
   * MasterRatings findMany
   */
  export type MasterRatingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * Filter, which MasterRatings to fetch.
     */
    where?: MasterRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MasterRatings to fetch.
     */
    orderBy?: MasterRatingsOrderByWithRelationInput | MasterRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MasterRatings.
     */
    cursor?: MasterRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MasterRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MasterRatings.
     */
    skip?: number
    distinct?: MasterRatingsScalarFieldEnum | MasterRatingsScalarFieldEnum[]
  }

  /**
   * MasterRatings create
   */
  export type MasterRatingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * The data needed to create a MasterRatings.
     */
    data: XOR<MasterRatingsCreateInput, MasterRatingsUncheckedCreateInput>
  }

  /**
   * MasterRatings createMany
   */
  export type MasterRatingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MasterRatings.
     */
    data: MasterRatingsCreateManyInput | MasterRatingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MasterRatings createManyAndReturn
   */
  export type MasterRatingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * The data used to create many MasterRatings.
     */
    data: MasterRatingsCreateManyInput | MasterRatingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MasterRatings update
   */
  export type MasterRatingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * The data needed to update a MasterRatings.
     */
    data: XOR<MasterRatingsUpdateInput, MasterRatingsUncheckedUpdateInput>
    /**
     * Choose, which MasterRatings to update.
     */
    where: MasterRatingsWhereUniqueInput
  }

  /**
   * MasterRatings updateMany
   */
  export type MasterRatingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MasterRatings.
     */
    data: XOR<MasterRatingsUpdateManyMutationInput, MasterRatingsUncheckedUpdateManyInput>
    /**
     * Filter which MasterRatings to update
     */
    where?: MasterRatingsWhereInput
    /**
     * Limit how many MasterRatings to update.
     */
    limit?: number
  }

  /**
   * MasterRatings updateManyAndReturn
   */
  export type MasterRatingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * The data used to update MasterRatings.
     */
    data: XOR<MasterRatingsUpdateManyMutationInput, MasterRatingsUncheckedUpdateManyInput>
    /**
     * Filter which MasterRatings to update
     */
    where?: MasterRatingsWhereInput
    /**
     * Limit how many MasterRatings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MasterRatings upsert
   */
  export type MasterRatingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * The filter to search for the MasterRatings to update in case it exists.
     */
    where: MasterRatingsWhereUniqueInput
    /**
     * In case the MasterRatings found by the `where` argument doesn't exist, create a new MasterRatings with this data.
     */
    create: XOR<MasterRatingsCreateInput, MasterRatingsUncheckedCreateInput>
    /**
     * In case the MasterRatings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MasterRatingsUpdateInput, MasterRatingsUncheckedUpdateInput>
  }

  /**
   * MasterRatings delete
   */
  export type MasterRatingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
    /**
     * Filter which MasterRatings to delete.
     */
    where: MasterRatingsWhereUniqueInput
  }

  /**
   * MasterRatings deleteMany
   */
  export type MasterRatingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MasterRatings to delete
     */
    where?: MasterRatingsWhereInput
    /**
     * Limit how many MasterRatings to delete.
     */
    limit?: number
  }

  /**
   * MasterRatings without action
   */
  export type MasterRatingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterRatings
     */
    select?: MasterRatingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MasterRatings
     */
    omit?: MasterRatingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterRatingsInclude<ExtArgs> | null
  }


  /**
   * Model Basket
   */

  export type AggregateBasket = {
    _count: BasketCountAggregateOutputType | null
    _avg: BasketAvgAggregateOutputType | null
    _sum: BasketSumAggregateOutputType | null
    _min: BasketMinAggregateOutputType | null
    _max: BasketMaxAggregateOutputType | null
  }

  export type BasketAvgAggregateOutputType = {
    productCount: number | null
    quantity: number | null
    measure: number | null
    total: number | null
  }

  export type BasketSumAggregateOutputType = {
    productCount: number | null
    quantity: number | null
    measure: number | null
    total: number | null
  }

  export type BasketMinAggregateOutputType = {
    id: string | null
    productId: string | null
    productCount: number | null
    quantity: number | null
    measure: number | null
    toolId: string | null
    total: number | null
    userId: string | null
    timeUnit: $Enums.MasterDaily | null
    levelId: string | null
  }

  export type BasketMaxAggregateOutputType = {
    id: string | null
    productId: string | null
    productCount: number | null
    quantity: number | null
    measure: number | null
    toolId: string | null
    total: number | null
    userId: string | null
    timeUnit: $Enums.MasterDaily | null
    levelId: string | null
  }

  export type BasketCountAggregateOutputType = {
    id: number
    productId: number
    productCount: number
    quantity: number
    measure: number
    toolId: number
    total: number
    userId: number
    timeUnit: number
    levelId: number
    _all: number
  }


  export type BasketAvgAggregateInputType = {
    productCount?: true
    quantity?: true
    measure?: true
    total?: true
  }

  export type BasketSumAggregateInputType = {
    productCount?: true
    quantity?: true
    measure?: true
    total?: true
  }

  export type BasketMinAggregateInputType = {
    id?: true
    productId?: true
    productCount?: true
    quantity?: true
    measure?: true
    toolId?: true
    total?: true
    userId?: true
    timeUnit?: true
    levelId?: true
  }

  export type BasketMaxAggregateInputType = {
    id?: true
    productId?: true
    productCount?: true
    quantity?: true
    measure?: true
    toolId?: true
    total?: true
    userId?: true
    timeUnit?: true
    levelId?: true
  }

  export type BasketCountAggregateInputType = {
    id?: true
    productId?: true
    productCount?: true
    quantity?: true
    measure?: true
    toolId?: true
    total?: true
    userId?: true
    timeUnit?: true
    levelId?: true
    _all?: true
  }

  export type BasketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Basket to aggregate.
     */
    where?: BasketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baskets to fetch.
     */
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BasketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baskets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baskets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Baskets
    **/
    _count?: true | BasketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BasketAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BasketSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BasketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BasketMaxAggregateInputType
  }

  export type GetBasketAggregateType<T extends BasketAggregateArgs> = {
        [P in keyof T & keyof AggregateBasket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBasket[P]>
      : GetScalarType<T[P], AggregateBasket[P]>
  }




  export type BasketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BasketWhereInput
    orderBy?: BasketOrderByWithAggregationInput | BasketOrderByWithAggregationInput[]
    by: BasketScalarFieldEnum[] | BasketScalarFieldEnum
    having?: BasketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BasketCountAggregateInputType | true
    _avg?: BasketAvgAggregateInputType
    _sum?: BasketSumAggregateInputType
    _min?: BasketMinAggregateInputType
    _max?: BasketMaxAggregateInputType
  }

  export type BasketGroupByOutputType = {
    id: string
    productId: string
    productCount: number
    quantity: number
    measure: number
    toolId: string
    total: number
    userId: string
    timeUnit: $Enums.MasterDaily
    levelId: string
    _count: BasketCountAggregateOutputType | null
    _avg: BasketAvgAggregateOutputType | null
    _sum: BasketSumAggregateOutputType | null
    _min: BasketMinAggregateOutputType | null
    _max: BasketMaxAggregateOutputType | null
  }

  type GetBasketGroupByPayload<T extends BasketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BasketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BasketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BasketGroupByOutputType[P]>
            : GetScalarType<T[P], BasketGroupByOutputType[P]>
        }
      >
    >


  export type BasketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    productCount?: boolean
    quantity?: boolean
    measure?: boolean
    toolId?: boolean
    total?: boolean
    userId?: boolean
    timeUnit?: boolean
    levelId?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["basket"]>

  export type BasketSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    productCount?: boolean
    quantity?: boolean
    measure?: boolean
    toolId?: boolean
    total?: boolean
    userId?: boolean
    timeUnit?: boolean
    levelId?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["basket"]>

  export type BasketSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    productCount?: boolean
    quantity?: boolean
    measure?: boolean
    toolId?: boolean
    total?: boolean
    userId?: boolean
    timeUnit?: boolean
    levelId?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["basket"]>

  export type BasketSelectScalar = {
    id?: boolean
    productId?: boolean
    productCount?: boolean
    quantity?: boolean
    measure?: boolean
    toolId?: boolean
    total?: boolean
    userId?: boolean
    timeUnit?: boolean
    levelId?: boolean
  }

  export type BasketOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "productCount" | "quantity" | "measure" | "toolId" | "total" | "userId" | "timeUnit" | "levelId", ExtArgs["result"]["basket"]>
  export type BasketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }
  export type BasketIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }
  export type BasketIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tool?: boolean | ToolsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }

  export type $BasketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Basket"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      tool: Prisma.$ToolsPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      level: Prisma.$LevelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productId: string
      productCount: number
      quantity: number
      measure: number
      toolId: string
      total: number
      userId: string
      timeUnit: $Enums.MasterDaily
      levelId: string
    }, ExtArgs["result"]["basket"]>
    composites: {}
  }

  type BasketGetPayload<S extends boolean | null | undefined | BasketDefaultArgs> = $Result.GetResult<Prisma.$BasketPayload, S>

  type BasketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BasketFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BasketCountAggregateInputType | true
    }

  export interface BasketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Basket'], meta: { name: 'Basket' } }
    /**
     * Find zero or one Basket that matches the filter.
     * @param {BasketFindUniqueArgs} args - Arguments to find a Basket
     * @example
     * // Get one Basket
     * const basket = await prisma.basket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BasketFindUniqueArgs>(args: SelectSubset<T, BasketFindUniqueArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Basket that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BasketFindUniqueOrThrowArgs} args - Arguments to find a Basket
     * @example
     * // Get one Basket
     * const basket = await prisma.basket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BasketFindUniqueOrThrowArgs>(args: SelectSubset<T, BasketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Basket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketFindFirstArgs} args - Arguments to find a Basket
     * @example
     * // Get one Basket
     * const basket = await prisma.basket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BasketFindFirstArgs>(args?: SelectSubset<T, BasketFindFirstArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Basket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketFindFirstOrThrowArgs} args - Arguments to find a Basket
     * @example
     * // Get one Basket
     * const basket = await prisma.basket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BasketFindFirstOrThrowArgs>(args?: SelectSubset<T, BasketFindFirstOrThrowArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Baskets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Baskets
     * const baskets = await prisma.basket.findMany()
     * 
     * // Get first 10 Baskets
     * const baskets = await prisma.basket.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const basketWithIdOnly = await prisma.basket.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BasketFindManyArgs>(args?: SelectSubset<T, BasketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Basket.
     * @param {BasketCreateArgs} args - Arguments to create a Basket.
     * @example
     * // Create one Basket
     * const Basket = await prisma.basket.create({
     *   data: {
     *     // ... data to create a Basket
     *   }
     * })
     * 
     */
    create<T extends BasketCreateArgs>(args: SelectSubset<T, BasketCreateArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Baskets.
     * @param {BasketCreateManyArgs} args - Arguments to create many Baskets.
     * @example
     * // Create many Baskets
     * const basket = await prisma.basket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BasketCreateManyArgs>(args?: SelectSubset<T, BasketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Baskets and returns the data saved in the database.
     * @param {BasketCreateManyAndReturnArgs} args - Arguments to create many Baskets.
     * @example
     * // Create many Baskets
     * const basket = await prisma.basket.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Baskets and only return the `id`
     * const basketWithIdOnly = await prisma.basket.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BasketCreateManyAndReturnArgs>(args?: SelectSubset<T, BasketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Basket.
     * @param {BasketDeleteArgs} args - Arguments to delete one Basket.
     * @example
     * // Delete one Basket
     * const Basket = await prisma.basket.delete({
     *   where: {
     *     // ... filter to delete one Basket
     *   }
     * })
     * 
     */
    delete<T extends BasketDeleteArgs>(args: SelectSubset<T, BasketDeleteArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Basket.
     * @param {BasketUpdateArgs} args - Arguments to update one Basket.
     * @example
     * // Update one Basket
     * const basket = await prisma.basket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BasketUpdateArgs>(args: SelectSubset<T, BasketUpdateArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Baskets.
     * @param {BasketDeleteManyArgs} args - Arguments to filter Baskets to delete.
     * @example
     * // Delete a few Baskets
     * const { count } = await prisma.basket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BasketDeleteManyArgs>(args?: SelectSubset<T, BasketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Baskets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Baskets
     * const basket = await prisma.basket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BasketUpdateManyArgs>(args: SelectSubset<T, BasketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Baskets and returns the data updated in the database.
     * @param {BasketUpdateManyAndReturnArgs} args - Arguments to update many Baskets.
     * @example
     * // Update many Baskets
     * const basket = await prisma.basket.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Baskets and only return the `id`
     * const basketWithIdOnly = await prisma.basket.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BasketUpdateManyAndReturnArgs>(args: SelectSubset<T, BasketUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Basket.
     * @param {BasketUpsertArgs} args - Arguments to update or create a Basket.
     * @example
     * // Update or create a Basket
     * const basket = await prisma.basket.upsert({
     *   create: {
     *     // ... data to create a Basket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Basket we want to update
     *   }
     * })
     */
    upsert<T extends BasketUpsertArgs>(args: SelectSubset<T, BasketUpsertArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Baskets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketCountArgs} args - Arguments to filter Baskets to count.
     * @example
     * // Count the number of Baskets
     * const count = await prisma.basket.count({
     *   where: {
     *     // ... the filter for the Baskets we want to count
     *   }
     * })
    **/
    count<T extends BasketCountArgs>(
      args?: Subset<T, BasketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BasketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Basket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BasketAggregateArgs>(args: Subset<T, BasketAggregateArgs>): Prisma.PrismaPromise<GetBasketAggregateType<T>>

    /**
     * Group by Basket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BasketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BasketGroupByArgs['orderBy'] }
        : { orderBy?: BasketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BasketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBasketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Basket model
   */
  readonly fields: BasketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Basket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BasketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tool<T extends ToolsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ToolsDefaultArgs<ExtArgs>>): Prisma__ToolsClient<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    level<T extends LevelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LevelDefaultArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Basket model
   */
  interface BasketFieldRefs {
    readonly id: FieldRef<"Basket", 'String'>
    readonly productId: FieldRef<"Basket", 'String'>
    readonly productCount: FieldRef<"Basket", 'Int'>
    readonly quantity: FieldRef<"Basket", 'Int'>
    readonly measure: FieldRef<"Basket", 'Int'>
    readonly toolId: FieldRef<"Basket", 'String'>
    readonly total: FieldRef<"Basket", 'Int'>
    readonly userId: FieldRef<"Basket", 'String'>
    readonly timeUnit: FieldRef<"Basket", 'MasterDaily'>
    readonly levelId: FieldRef<"Basket", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Basket findUnique
   */
  export type BasketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter, which Basket to fetch.
     */
    where: BasketWhereUniqueInput
  }

  /**
   * Basket findUniqueOrThrow
   */
  export type BasketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter, which Basket to fetch.
     */
    where: BasketWhereUniqueInput
  }

  /**
   * Basket findFirst
   */
  export type BasketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter, which Basket to fetch.
     */
    where?: BasketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baskets to fetch.
     */
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Baskets.
     */
    cursor?: BasketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baskets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baskets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Baskets.
     */
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * Basket findFirstOrThrow
   */
  export type BasketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter, which Basket to fetch.
     */
    where?: BasketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baskets to fetch.
     */
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Baskets.
     */
    cursor?: BasketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baskets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baskets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Baskets.
     */
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * Basket findMany
   */
  export type BasketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter, which Baskets to fetch.
     */
    where?: BasketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baskets to fetch.
     */
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Baskets.
     */
    cursor?: BasketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baskets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baskets.
     */
    skip?: number
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * Basket create
   */
  export type BasketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * The data needed to create a Basket.
     */
    data: XOR<BasketCreateInput, BasketUncheckedCreateInput>
  }

  /**
   * Basket createMany
   */
  export type BasketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Baskets.
     */
    data: BasketCreateManyInput | BasketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Basket createManyAndReturn
   */
  export type BasketCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * The data used to create many Baskets.
     */
    data: BasketCreateManyInput | BasketCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Basket update
   */
  export type BasketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * The data needed to update a Basket.
     */
    data: XOR<BasketUpdateInput, BasketUncheckedUpdateInput>
    /**
     * Choose, which Basket to update.
     */
    where: BasketWhereUniqueInput
  }

  /**
   * Basket updateMany
   */
  export type BasketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Baskets.
     */
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyInput>
    /**
     * Filter which Baskets to update
     */
    where?: BasketWhereInput
    /**
     * Limit how many Baskets to update.
     */
    limit?: number
  }

  /**
   * Basket updateManyAndReturn
   */
  export type BasketUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * The data used to update Baskets.
     */
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyInput>
    /**
     * Filter which Baskets to update
     */
    where?: BasketWhereInput
    /**
     * Limit how many Baskets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Basket upsert
   */
  export type BasketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * The filter to search for the Basket to update in case it exists.
     */
    where: BasketWhereUniqueInput
    /**
     * In case the Basket found by the `where` argument doesn't exist, create a new Basket with this data.
     */
    create: XOR<BasketCreateInput, BasketUncheckedCreateInput>
    /**
     * In case the Basket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BasketUpdateInput, BasketUncheckedUpdateInput>
  }

  /**
   * Basket delete
   */
  export type BasketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter which Basket to delete.
     */
    where: BasketWhereUniqueInput
  }

  /**
   * Basket deleteMany
   */
  export type BasketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Baskets to delete
     */
    where?: BasketWhereInput
    /**
     * Limit how many Baskets to delete.
     */
    limit?: number
  }

  /**
   * Basket without action
   */
  export type BasketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
  }


  /**
   * Model GeneralInfo
   */

  export type AggregateGeneralInfo = {
    _count: GeneralInfoCountAggregateOutputType | null
    _min: GeneralInfoMinAggregateOutputType | null
    _max: GeneralInfoMaxAggregateOutputType | null
  }

  export type GeneralInfoMinAggregateOutputType = {
    id: string | null
    email: string | null
    links: string | null
    phone: string | null
  }

  export type GeneralInfoMaxAggregateOutputType = {
    id: string | null
    email: string | null
    links: string | null
    phone: string | null
  }

  export type GeneralInfoCountAggregateOutputType = {
    id: number
    email: number
    links: number
    phone: number
    _all: number
  }


  export type GeneralInfoMinAggregateInputType = {
    id?: true
    email?: true
    links?: true
    phone?: true
  }

  export type GeneralInfoMaxAggregateInputType = {
    id?: true
    email?: true
    links?: true
    phone?: true
  }

  export type GeneralInfoCountAggregateInputType = {
    id?: true
    email?: true
    links?: true
    phone?: true
    _all?: true
  }

  export type GeneralInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneralInfo to aggregate.
     */
    where?: GeneralInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralInfos to fetch.
     */
    orderBy?: GeneralInfoOrderByWithRelationInput | GeneralInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GeneralInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GeneralInfos
    **/
    _count?: true | GeneralInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeneralInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeneralInfoMaxAggregateInputType
  }

  export type GetGeneralInfoAggregateType<T extends GeneralInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateGeneralInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGeneralInfo[P]>
      : GetScalarType<T[P], AggregateGeneralInfo[P]>
  }




  export type GeneralInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneralInfoWhereInput
    orderBy?: GeneralInfoOrderByWithAggregationInput | GeneralInfoOrderByWithAggregationInput[]
    by: GeneralInfoScalarFieldEnum[] | GeneralInfoScalarFieldEnum
    having?: GeneralInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeneralInfoCountAggregateInputType | true
    _min?: GeneralInfoMinAggregateInputType
    _max?: GeneralInfoMaxAggregateInputType
  }

  export type GeneralInfoGroupByOutputType = {
    id: string
    email: string
    links: string
    phone: string
    _count: GeneralInfoCountAggregateOutputType | null
    _min: GeneralInfoMinAggregateOutputType | null
    _max: GeneralInfoMaxAggregateOutputType | null
  }

  type GetGeneralInfoGroupByPayload<T extends GeneralInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GeneralInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeneralInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeneralInfoGroupByOutputType[P]>
            : GetScalarType<T[P], GeneralInfoGroupByOutputType[P]>
        }
      >
    >


  export type GeneralInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    links?: boolean
    phone?: boolean
  }, ExtArgs["result"]["generalInfo"]>

  export type GeneralInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    links?: boolean
    phone?: boolean
  }, ExtArgs["result"]["generalInfo"]>

  export type GeneralInfoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    links?: boolean
    phone?: boolean
  }, ExtArgs["result"]["generalInfo"]>

  export type GeneralInfoSelectScalar = {
    id?: boolean
    email?: boolean
    links?: boolean
    phone?: boolean
  }

  export type GeneralInfoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "links" | "phone", ExtArgs["result"]["generalInfo"]>

  export type $GeneralInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GeneralInfo"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      links: string
      phone: string
    }, ExtArgs["result"]["generalInfo"]>
    composites: {}
  }

  type GeneralInfoGetPayload<S extends boolean | null | undefined | GeneralInfoDefaultArgs> = $Result.GetResult<Prisma.$GeneralInfoPayload, S>

  type GeneralInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GeneralInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GeneralInfoCountAggregateInputType | true
    }

  export interface GeneralInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GeneralInfo'], meta: { name: 'GeneralInfo' } }
    /**
     * Find zero or one GeneralInfo that matches the filter.
     * @param {GeneralInfoFindUniqueArgs} args - Arguments to find a GeneralInfo
     * @example
     * // Get one GeneralInfo
     * const generalInfo = await prisma.generalInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GeneralInfoFindUniqueArgs>(args: SelectSubset<T, GeneralInfoFindUniqueArgs<ExtArgs>>): Prisma__GeneralInfoClient<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GeneralInfo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GeneralInfoFindUniqueOrThrowArgs} args - Arguments to find a GeneralInfo
     * @example
     * // Get one GeneralInfo
     * const generalInfo = await prisma.generalInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GeneralInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, GeneralInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GeneralInfoClient<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GeneralInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralInfoFindFirstArgs} args - Arguments to find a GeneralInfo
     * @example
     * // Get one GeneralInfo
     * const generalInfo = await prisma.generalInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GeneralInfoFindFirstArgs>(args?: SelectSubset<T, GeneralInfoFindFirstArgs<ExtArgs>>): Prisma__GeneralInfoClient<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GeneralInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralInfoFindFirstOrThrowArgs} args - Arguments to find a GeneralInfo
     * @example
     * // Get one GeneralInfo
     * const generalInfo = await prisma.generalInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GeneralInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, GeneralInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__GeneralInfoClient<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GeneralInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GeneralInfos
     * const generalInfos = await prisma.generalInfo.findMany()
     * 
     * // Get first 10 GeneralInfos
     * const generalInfos = await prisma.generalInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const generalInfoWithIdOnly = await prisma.generalInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GeneralInfoFindManyArgs>(args?: SelectSubset<T, GeneralInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GeneralInfo.
     * @param {GeneralInfoCreateArgs} args - Arguments to create a GeneralInfo.
     * @example
     * // Create one GeneralInfo
     * const GeneralInfo = await prisma.generalInfo.create({
     *   data: {
     *     // ... data to create a GeneralInfo
     *   }
     * })
     * 
     */
    create<T extends GeneralInfoCreateArgs>(args: SelectSubset<T, GeneralInfoCreateArgs<ExtArgs>>): Prisma__GeneralInfoClient<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GeneralInfos.
     * @param {GeneralInfoCreateManyArgs} args - Arguments to create many GeneralInfos.
     * @example
     * // Create many GeneralInfos
     * const generalInfo = await prisma.generalInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GeneralInfoCreateManyArgs>(args?: SelectSubset<T, GeneralInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GeneralInfos and returns the data saved in the database.
     * @param {GeneralInfoCreateManyAndReturnArgs} args - Arguments to create many GeneralInfos.
     * @example
     * // Create many GeneralInfos
     * const generalInfo = await prisma.generalInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GeneralInfos and only return the `id`
     * const generalInfoWithIdOnly = await prisma.generalInfo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GeneralInfoCreateManyAndReturnArgs>(args?: SelectSubset<T, GeneralInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GeneralInfo.
     * @param {GeneralInfoDeleteArgs} args - Arguments to delete one GeneralInfo.
     * @example
     * // Delete one GeneralInfo
     * const GeneralInfo = await prisma.generalInfo.delete({
     *   where: {
     *     // ... filter to delete one GeneralInfo
     *   }
     * })
     * 
     */
    delete<T extends GeneralInfoDeleteArgs>(args: SelectSubset<T, GeneralInfoDeleteArgs<ExtArgs>>): Prisma__GeneralInfoClient<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GeneralInfo.
     * @param {GeneralInfoUpdateArgs} args - Arguments to update one GeneralInfo.
     * @example
     * // Update one GeneralInfo
     * const generalInfo = await prisma.generalInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GeneralInfoUpdateArgs>(args: SelectSubset<T, GeneralInfoUpdateArgs<ExtArgs>>): Prisma__GeneralInfoClient<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GeneralInfos.
     * @param {GeneralInfoDeleteManyArgs} args - Arguments to filter GeneralInfos to delete.
     * @example
     * // Delete a few GeneralInfos
     * const { count } = await prisma.generalInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GeneralInfoDeleteManyArgs>(args?: SelectSubset<T, GeneralInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneralInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GeneralInfos
     * const generalInfo = await prisma.generalInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GeneralInfoUpdateManyArgs>(args: SelectSubset<T, GeneralInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneralInfos and returns the data updated in the database.
     * @param {GeneralInfoUpdateManyAndReturnArgs} args - Arguments to update many GeneralInfos.
     * @example
     * // Update many GeneralInfos
     * const generalInfo = await prisma.generalInfo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GeneralInfos and only return the `id`
     * const generalInfoWithIdOnly = await prisma.generalInfo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GeneralInfoUpdateManyAndReturnArgs>(args: SelectSubset<T, GeneralInfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GeneralInfo.
     * @param {GeneralInfoUpsertArgs} args - Arguments to update or create a GeneralInfo.
     * @example
     * // Update or create a GeneralInfo
     * const generalInfo = await prisma.generalInfo.upsert({
     *   create: {
     *     // ... data to create a GeneralInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GeneralInfo we want to update
     *   }
     * })
     */
    upsert<T extends GeneralInfoUpsertArgs>(args: SelectSubset<T, GeneralInfoUpsertArgs<ExtArgs>>): Prisma__GeneralInfoClient<$Result.GetResult<Prisma.$GeneralInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GeneralInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralInfoCountArgs} args - Arguments to filter GeneralInfos to count.
     * @example
     * // Count the number of GeneralInfos
     * const count = await prisma.generalInfo.count({
     *   where: {
     *     // ... the filter for the GeneralInfos we want to count
     *   }
     * })
    **/
    count<T extends GeneralInfoCountArgs>(
      args?: Subset<T, GeneralInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeneralInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GeneralInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeneralInfoAggregateArgs>(args: Subset<T, GeneralInfoAggregateArgs>): Prisma.PrismaPromise<GetGeneralInfoAggregateType<T>>

    /**
     * Group by GeneralInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GeneralInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GeneralInfoGroupByArgs['orderBy'] }
        : { orderBy?: GeneralInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GeneralInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeneralInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GeneralInfo model
   */
  readonly fields: GeneralInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GeneralInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GeneralInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GeneralInfo model
   */
  interface GeneralInfoFieldRefs {
    readonly id: FieldRef<"GeneralInfo", 'String'>
    readonly email: FieldRef<"GeneralInfo", 'String'>
    readonly links: FieldRef<"GeneralInfo", 'String'>
    readonly phone: FieldRef<"GeneralInfo", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GeneralInfo findUnique
   */
  export type GeneralInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * Filter, which GeneralInfo to fetch.
     */
    where: GeneralInfoWhereUniqueInput
  }

  /**
   * GeneralInfo findUniqueOrThrow
   */
  export type GeneralInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * Filter, which GeneralInfo to fetch.
     */
    where: GeneralInfoWhereUniqueInput
  }

  /**
   * GeneralInfo findFirst
   */
  export type GeneralInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * Filter, which GeneralInfo to fetch.
     */
    where?: GeneralInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralInfos to fetch.
     */
    orderBy?: GeneralInfoOrderByWithRelationInput | GeneralInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneralInfos.
     */
    cursor?: GeneralInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneralInfos.
     */
    distinct?: GeneralInfoScalarFieldEnum | GeneralInfoScalarFieldEnum[]
  }

  /**
   * GeneralInfo findFirstOrThrow
   */
  export type GeneralInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * Filter, which GeneralInfo to fetch.
     */
    where?: GeneralInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralInfos to fetch.
     */
    orderBy?: GeneralInfoOrderByWithRelationInput | GeneralInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneralInfos.
     */
    cursor?: GeneralInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneralInfos.
     */
    distinct?: GeneralInfoScalarFieldEnum | GeneralInfoScalarFieldEnum[]
  }

  /**
   * GeneralInfo findMany
   */
  export type GeneralInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * Filter, which GeneralInfos to fetch.
     */
    where?: GeneralInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralInfos to fetch.
     */
    orderBy?: GeneralInfoOrderByWithRelationInput | GeneralInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GeneralInfos.
     */
    cursor?: GeneralInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralInfos.
     */
    skip?: number
    distinct?: GeneralInfoScalarFieldEnum | GeneralInfoScalarFieldEnum[]
  }

  /**
   * GeneralInfo create
   */
  export type GeneralInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * The data needed to create a GeneralInfo.
     */
    data: XOR<GeneralInfoCreateInput, GeneralInfoUncheckedCreateInput>
  }

  /**
   * GeneralInfo createMany
   */
  export type GeneralInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GeneralInfos.
     */
    data: GeneralInfoCreateManyInput | GeneralInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GeneralInfo createManyAndReturn
   */
  export type GeneralInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * The data used to create many GeneralInfos.
     */
    data: GeneralInfoCreateManyInput | GeneralInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GeneralInfo update
   */
  export type GeneralInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * The data needed to update a GeneralInfo.
     */
    data: XOR<GeneralInfoUpdateInput, GeneralInfoUncheckedUpdateInput>
    /**
     * Choose, which GeneralInfo to update.
     */
    where: GeneralInfoWhereUniqueInput
  }

  /**
   * GeneralInfo updateMany
   */
  export type GeneralInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GeneralInfos.
     */
    data: XOR<GeneralInfoUpdateManyMutationInput, GeneralInfoUncheckedUpdateManyInput>
    /**
     * Filter which GeneralInfos to update
     */
    where?: GeneralInfoWhereInput
    /**
     * Limit how many GeneralInfos to update.
     */
    limit?: number
  }

  /**
   * GeneralInfo updateManyAndReturn
   */
  export type GeneralInfoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * The data used to update GeneralInfos.
     */
    data: XOR<GeneralInfoUpdateManyMutationInput, GeneralInfoUncheckedUpdateManyInput>
    /**
     * Filter which GeneralInfos to update
     */
    where?: GeneralInfoWhereInput
    /**
     * Limit how many GeneralInfos to update.
     */
    limit?: number
  }

  /**
   * GeneralInfo upsert
   */
  export type GeneralInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * The filter to search for the GeneralInfo to update in case it exists.
     */
    where: GeneralInfoWhereUniqueInput
    /**
     * In case the GeneralInfo found by the `where` argument doesn't exist, create a new GeneralInfo with this data.
     */
    create: XOR<GeneralInfoCreateInput, GeneralInfoUncheckedCreateInput>
    /**
     * In case the GeneralInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GeneralInfoUpdateInput, GeneralInfoUncheckedUpdateInput>
  }

  /**
   * GeneralInfo delete
   */
  export type GeneralInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
    /**
     * Filter which GeneralInfo to delete.
     */
    where: GeneralInfoWhereUniqueInput
  }

  /**
   * GeneralInfo deleteMany
   */
  export type GeneralInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneralInfos to delete
     */
    where?: GeneralInfoWhereInput
    /**
     * Limit how many GeneralInfos to delete.
     */
    limit?: number
  }

  /**
   * GeneralInfo without action
   */
  export type GeneralInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralInfo
     */
    select?: GeneralInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralInfo
     */
    omit?: GeneralInfoOmit<ExtArgs> | null
  }


  /**
   * Model Contact
   */

  export type AggregateContact = {
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  export type ContactMinAggregateOutputType = {
    id: string | null
    name: string | null
    surName: string | null
    phone: string | null
    address: string | null
    message: string | null
  }

  export type ContactMaxAggregateOutputType = {
    id: string | null
    name: string | null
    surName: string | null
    phone: string | null
    address: string | null
    message: string | null
  }

  export type ContactCountAggregateOutputType = {
    id: number
    name: number
    surName: number
    phone: number
    address: number
    message: number
    _all: number
  }


  export type ContactMinAggregateInputType = {
    id?: true
    name?: true
    surName?: true
    phone?: true
    address?: true
    message?: true
  }

  export type ContactMaxAggregateInputType = {
    id?: true
    name?: true
    surName?: true
    phone?: true
    address?: true
    message?: true
  }

  export type ContactCountAggregateInputType = {
    id?: true
    name?: true
    surName?: true
    phone?: true
    address?: true
    message?: true
    _all?: true
  }

  export type ContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contact to aggregate.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contacts
    **/
    _count?: true | ContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactMaxAggregateInputType
  }

  export type GetContactAggregateType<T extends ContactAggregateArgs> = {
        [P in keyof T & keyof AggregateContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact[P]>
      : GetScalarType<T[P], AggregateContact[P]>
  }




  export type ContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithAggregationInput | ContactOrderByWithAggregationInput[]
    by: ContactScalarFieldEnum[] | ContactScalarFieldEnum
    having?: ContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactCountAggregateInputType | true
    _min?: ContactMinAggregateInputType
    _max?: ContactMaxAggregateInputType
  }

  export type ContactGroupByOutputType = {
    id: string
    name: string
    surName: string
    phone: string
    address: string
    message: string
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  type GetContactGroupByPayload<T extends ContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactGroupByOutputType[P]>
            : GetScalarType<T[P], ContactGroupByOutputType[P]>
        }
      >
    >


  export type ContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    surName?: boolean
    phone?: boolean
    address?: boolean
    message?: boolean
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    surName?: boolean
    phone?: boolean
    address?: boolean
    message?: boolean
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    surName?: boolean
    phone?: boolean
    address?: boolean
    message?: boolean
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectScalar = {
    id?: boolean
    name?: boolean
    surName?: boolean
    phone?: boolean
    address?: boolean
    message?: boolean
  }

  export type ContactOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "surName" | "phone" | "address" | "message", ExtArgs["result"]["contact"]>

  export type $ContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contact"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      surName: string
      phone: string
      address: string
      message: string
    }, ExtArgs["result"]["contact"]>
    composites: {}
  }

  type ContactGetPayload<S extends boolean | null | undefined | ContactDefaultArgs> = $Result.GetResult<Prisma.$ContactPayload, S>

  type ContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactCountAggregateInputType | true
    }

  export interface ContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contact'], meta: { name: 'Contact' } }
    /**
     * Find zero or one Contact that matches the filter.
     * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactFindUniqueArgs>(args: SelectSubset<T, ContactFindUniqueArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contact that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactFindFirstArgs>(args?: SelectSubset<T, ContactFindFirstArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactFindManyArgs>(args?: SelectSubset<T, ContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     * 
     */
    create<T extends ContactCreateArgs>(args: SelectSubset<T, ContactCreateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contacts.
     * @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactCreateManyArgs>(args?: SelectSubset<T, ContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contacts and returns the data saved in the database.
     * @param {ContactCreateManyAndReturnArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     * 
     */
    delete<T extends ContactDeleteArgs>(args: SelectSubset<T, ContactDeleteArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactUpdateArgs>(args: SelectSubset<T, ContactUpdateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactDeleteManyArgs>(args?: SelectSubset<T, ContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactUpdateManyArgs>(args: SelectSubset<T, ContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts and returns the data updated in the database.
     * @param {ContactUpdateManyAndReturnArgs} args - Arguments to update many Contacts.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContactUpdateManyAndReturnArgs>(args: SelectSubset<T, ContactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
     */
    upsert<T extends ContactUpsertArgs>(args: SelectSubset<T, ContactUpsertArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contact.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends ContactCountArgs>(
      args?: Subset<T, ContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactAggregateArgs>(args: Subset<T, ContactAggregateArgs>): Prisma.PrismaPromise<GetContactAggregateType<T>>

    /**
     * Group by Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactGroupByArgs['orderBy'] }
        : { orderBy?: ContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contact model
   */
  readonly fields: ContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contact model
   */
  interface ContactFieldRefs {
    readonly id: FieldRef<"Contact", 'String'>
    readonly name: FieldRef<"Contact", 'String'>
    readonly surName: FieldRef<"Contact", 'String'>
    readonly phone: FieldRef<"Contact", 'String'>
    readonly address: FieldRef<"Contact", 'String'>
    readonly message: FieldRef<"Contact", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Contact findUnique
   */
  export type ContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findUniqueOrThrow
   */
  export type ContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findFirst
   */
  export type ContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findFirstOrThrow
   */
  export type ContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findMany
   */
  export type ContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact create
   */
  export type ContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data needed to create a Contact.
     */
    data: XOR<ContactCreateInput, ContactUncheckedCreateInput>
  }

  /**
   * Contact createMany
   */
  export type ContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contact createManyAndReturn
   */
  export type ContactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contact update
   */
  export type ContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data needed to update a Contact.
     */
    data: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
    /**
     * Choose, which Contact to update.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
  }

  /**
   * Contact updateManyAndReturn
   */
  export type ContactUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
  }

  /**
   * Contact upsert
   */
  export type ContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The filter to search for the Contact to update in case it exists.
     */
    where: ContactWhereUniqueInput
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
     */
    create: XOR<ContactCreateInput, ContactUncheckedCreateInput>
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
  }

  /**
   * Contact delete
   */
  export type ContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter which Contact to delete.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contacts to delete
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to delete.
     */
    limit?: number
  }

  /**
   * Contact without action
   */
  export type ContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
  }


  /**
   * Model FAQ
   */

  export type AggregateFAQ = {
    _count: FAQCountAggregateOutputType | null
    _min: FAQMinAggregateOutputType | null
    _max: FAQMaxAggregateOutputType | null
  }

  export type FAQMinAggregateOutputType = {
    id: string | null
    question: string | null
    answer: string | null
  }

  export type FAQMaxAggregateOutputType = {
    id: string | null
    question: string | null
    answer: string | null
  }

  export type FAQCountAggregateOutputType = {
    id: number
    question: number
    answer: number
    _all: number
  }


  export type FAQMinAggregateInputType = {
    id?: true
    question?: true
    answer?: true
  }

  export type FAQMaxAggregateInputType = {
    id?: true
    question?: true
    answer?: true
  }

  export type FAQCountAggregateInputType = {
    id?: true
    question?: true
    answer?: true
    _all?: true
  }

  export type FAQAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FAQ to aggregate.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FAQS
    **/
    _count?: true | FAQCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FAQMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FAQMaxAggregateInputType
  }

  export type GetFAQAggregateType<T extends FAQAggregateArgs> = {
        [P in keyof T & keyof AggregateFAQ]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFAQ[P]>
      : GetScalarType<T[P], AggregateFAQ[P]>
  }




  export type FAQGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FAQWhereInput
    orderBy?: FAQOrderByWithAggregationInput | FAQOrderByWithAggregationInput[]
    by: FAQScalarFieldEnum[] | FAQScalarFieldEnum
    having?: FAQScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FAQCountAggregateInputType | true
    _min?: FAQMinAggregateInputType
    _max?: FAQMaxAggregateInputType
  }

  export type FAQGroupByOutputType = {
    id: string
    question: string
    answer: string
    _count: FAQCountAggregateOutputType | null
    _min: FAQMinAggregateOutputType | null
    _max: FAQMaxAggregateOutputType | null
  }

  type GetFAQGroupByPayload<T extends FAQGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FAQGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FAQGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FAQGroupByOutputType[P]>
            : GetScalarType<T[P], FAQGroupByOutputType[P]>
        }
      >
    >


  export type FAQSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    answer?: boolean
  }, ExtArgs["result"]["fAQ"]>

  export type FAQSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    answer?: boolean
  }, ExtArgs["result"]["fAQ"]>

  export type FAQSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    answer?: boolean
  }, ExtArgs["result"]["fAQ"]>

  export type FAQSelectScalar = {
    id?: boolean
    question?: boolean
    answer?: boolean
  }

  export type FAQOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "question" | "answer", ExtArgs["result"]["fAQ"]>

  export type $FAQPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FAQ"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      question: string
      answer: string
    }, ExtArgs["result"]["fAQ"]>
    composites: {}
  }

  type FAQGetPayload<S extends boolean | null | undefined | FAQDefaultArgs> = $Result.GetResult<Prisma.$FAQPayload, S>

  type FAQCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FAQFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FAQCountAggregateInputType | true
    }

  export interface FAQDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FAQ'], meta: { name: 'FAQ' } }
    /**
     * Find zero or one FAQ that matches the filter.
     * @param {FAQFindUniqueArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FAQFindUniqueArgs>(args: SelectSubset<T, FAQFindUniqueArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FAQ that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FAQFindUniqueOrThrowArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FAQFindUniqueOrThrowArgs>(args: SelectSubset<T, FAQFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FAQ that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQFindFirstArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FAQFindFirstArgs>(args?: SelectSubset<T, FAQFindFirstArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FAQ that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQFindFirstOrThrowArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FAQFindFirstOrThrowArgs>(args?: SelectSubset<T, FAQFindFirstOrThrowArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FAQS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FAQS
     * const fAQS = await prisma.fAQ.findMany()
     * 
     * // Get first 10 FAQS
     * const fAQS = await prisma.fAQ.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fAQWithIdOnly = await prisma.fAQ.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FAQFindManyArgs>(args?: SelectSubset<T, FAQFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FAQ.
     * @param {FAQCreateArgs} args - Arguments to create a FAQ.
     * @example
     * // Create one FAQ
     * const FAQ = await prisma.fAQ.create({
     *   data: {
     *     // ... data to create a FAQ
     *   }
     * })
     * 
     */
    create<T extends FAQCreateArgs>(args: SelectSubset<T, FAQCreateArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FAQS.
     * @param {FAQCreateManyArgs} args - Arguments to create many FAQS.
     * @example
     * // Create many FAQS
     * const fAQ = await prisma.fAQ.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FAQCreateManyArgs>(args?: SelectSubset<T, FAQCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FAQS and returns the data saved in the database.
     * @param {FAQCreateManyAndReturnArgs} args - Arguments to create many FAQS.
     * @example
     * // Create many FAQS
     * const fAQ = await prisma.fAQ.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FAQS and only return the `id`
     * const fAQWithIdOnly = await prisma.fAQ.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FAQCreateManyAndReturnArgs>(args?: SelectSubset<T, FAQCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FAQ.
     * @param {FAQDeleteArgs} args - Arguments to delete one FAQ.
     * @example
     * // Delete one FAQ
     * const FAQ = await prisma.fAQ.delete({
     *   where: {
     *     // ... filter to delete one FAQ
     *   }
     * })
     * 
     */
    delete<T extends FAQDeleteArgs>(args: SelectSubset<T, FAQDeleteArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FAQ.
     * @param {FAQUpdateArgs} args - Arguments to update one FAQ.
     * @example
     * // Update one FAQ
     * const fAQ = await prisma.fAQ.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FAQUpdateArgs>(args: SelectSubset<T, FAQUpdateArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FAQS.
     * @param {FAQDeleteManyArgs} args - Arguments to filter FAQS to delete.
     * @example
     * // Delete a few FAQS
     * const { count } = await prisma.fAQ.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FAQDeleteManyArgs>(args?: SelectSubset<T, FAQDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FAQS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FAQS
     * const fAQ = await prisma.fAQ.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FAQUpdateManyArgs>(args: SelectSubset<T, FAQUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FAQS and returns the data updated in the database.
     * @param {FAQUpdateManyAndReturnArgs} args - Arguments to update many FAQS.
     * @example
     * // Update many FAQS
     * const fAQ = await prisma.fAQ.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FAQS and only return the `id`
     * const fAQWithIdOnly = await prisma.fAQ.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FAQUpdateManyAndReturnArgs>(args: SelectSubset<T, FAQUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FAQ.
     * @param {FAQUpsertArgs} args - Arguments to update or create a FAQ.
     * @example
     * // Update or create a FAQ
     * const fAQ = await prisma.fAQ.upsert({
     *   create: {
     *     // ... data to create a FAQ
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FAQ we want to update
     *   }
     * })
     */
    upsert<T extends FAQUpsertArgs>(args: SelectSubset<T, FAQUpsertArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FAQS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQCountArgs} args - Arguments to filter FAQS to count.
     * @example
     * // Count the number of FAQS
     * const count = await prisma.fAQ.count({
     *   where: {
     *     // ... the filter for the FAQS we want to count
     *   }
     * })
    **/
    count<T extends FAQCountArgs>(
      args?: Subset<T, FAQCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FAQCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FAQ.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FAQAggregateArgs>(args: Subset<T, FAQAggregateArgs>): Prisma.PrismaPromise<GetFAQAggregateType<T>>

    /**
     * Group by FAQ.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FAQGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FAQGroupByArgs['orderBy'] }
        : { orderBy?: FAQGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FAQGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFAQGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FAQ model
   */
  readonly fields: FAQFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FAQ.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FAQClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FAQ model
   */
  interface FAQFieldRefs {
    readonly id: FieldRef<"FAQ", 'String'>
    readonly question: FieldRef<"FAQ", 'String'>
    readonly answer: FieldRef<"FAQ", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FAQ findUnique
   */
  export type FAQFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ findUniqueOrThrow
   */
  export type FAQFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ findFirst
   */
  export type FAQFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FAQS.
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FAQS.
     */
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * FAQ findFirstOrThrow
   */
  export type FAQFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FAQS.
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FAQS.
     */
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * FAQ findMany
   */
  export type FAQFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQS to fetch.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FAQS.
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * FAQ create
   */
  export type FAQCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data needed to create a FAQ.
     */
    data: XOR<FAQCreateInput, FAQUncheckedCreateInput>
  }

  /**
   * FAQ createMany
   */
  export type FAQCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FAQS.
     */
    data: FAQCreateManyInput | FAQCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FAQ createManyAndReturn
   */
  export type FAQCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data used to create many FAQS.
     */
    data: FAQCreateManyInput | FAQCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FAQ update
   */
  export type FAQUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data needed to update a FAQ.
     */
    data: XOR<FAQUpdateInput, FAQUncheckedUpdateInput>
    /**
     * Choose, which FAQ to update.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ updateMany
   */
  export type FAQUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FAQS.
     */
    data: XOR<FAQUpdateManyMutationInput, FAQUncheckedUpdateManyInput>
    /**
     * Filter which FAQS to update
     */
    where?: FAQWhereInput
    /**
     * Limit how many FAQS to update.
     */
    limit?: number
  }

  /**
   * FAQ updateManyAndReturn
   */
  export type FAQUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data used to update FAQS.
     */
    data: XOR<FAQUpdateManyMutationInput, FAQUncheckedUpdateManyInput>
    /**
     * Filter which FAQS to update
     */
    where?: FAQWhereInput
    /**
     * Limit how many FAQS to update.
     */
    limit?: number
  }

  /**
   * FAQ upsert
   */
  export type FAQUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The filter to search for the FAQ to update in case it exists.
     */
    where: FAQWhereUniqueInput
    /**
     * In case the FAQ found by the `where` argument doesn't exist, create a new FAQ with this data.
     */
    create: XOR<FAQCreateInput, FAQUncheckedCreateInput>
    /**
     * In case the FAQ was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FAQUpdateInput, FAQUncheckedUpdateInput>
  }

  /**
   * FAQ delete
   */
  export type FAQDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter which FAQ to delete.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ deleteMany
   */
  export type FAQDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FAQS to delete
     */
    where?: FAQWhereInput
    /**
     * Limit how many FAQS to delete.
     */
    limit?: number
  }

  /**
   * FAQ without action
   */
  export type FAQDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
  }


  /**
   * Model showCase
   */

  export type AggregateShowCase = {
    _count: ShowCaseCountAggregateOutputType | null
    _min: ShowCaseMinAggregateOutputType | null
    _max: ShowCaseMaxAggregateOutputType | null
  }

  export type ShowCaseMinAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRU: string | null
    nameEng: string | null
    descriptionUz: string | null
    descriptionRU: string | null
    descriptionEng: string | null
    image: string | null
    link: string | null
  }

  export type ShowCaseMaxAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRU: string | null
    nameEng: string | null
    descriptionUz: string | null
    descriptionRU: string | null
    descriptionEng: string | null
    image: string | null
    link: string | null
  }

  export type ShowCaseCountAggregateOutputType = {
    id: number
    nameUz: number
    nameRU: number
    nameEng: number
    descriptionUz: number
    descriptionRU: number
    descriptionEng: number
    image: number
    link: number
    _all: number
  }


  export type ShowCaseMinAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
    descriptionUz?: true
    descriptionRU?: true
    descriptionEng?: true
    image?: true
    link?: true
  }

  export type ShowCaseMaxAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
    descriptionUz?: true
    descriptionRU?: true
    descriptionEng?: true
    image?: true
    link?: true
  }

  export type ShowCaseCountAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
    descriptionUz?: true
    descriptionRU?: true
    descriptionEng?: true
    image?: true
    link?: true
    _all?: true
  }

  export type ShowCaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which showCase to aggregate.
     */
    where?: showCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of showCases to fetch.
     */
    orderBy?: showCaseOrderByWithRelationInput | showCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: showCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` showCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` showCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned showCases
    **/
    _count?: true | ShowCaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShowCaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShowCaseMaxAggregateInputType
  }

  export type GetShowCaseAggregateType<T extends ShowCaseAggregateArgs> = {
        [P in keyof T & keyof AggregateShowCase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShowCase[P]>
      : GetScalarType<T[P], AggregateShowCase[P]>
  }




  export type showCaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: showCaseWhereInput
    orderBy?: showCaseOrderByWithAggregationInput | showCaseOrderByWithAggregationInput[]
    by: ShowCaseScalarFieldEnum[] | ShowCaseScalarFieldEnum
    having?: showCaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShowCaseCountAggregateInputType | true
    _min?: ShowCaseMinAggregateInputType
    _max?: ShowCaseMaxAggregateInputType
  }

  export type ShowCaseGroupByOutputType = {
    id: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    image: string
    link: string
    _count: ShowCaseCountAggregateOutputType | null
    _min: ShowCaseMinAggregateOutputType | null
    _max: ShowCaseMaxAggregateOutputType | null
  }

  type GetShowCaseGroupByPayload<T extends showCaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShowCaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShowCaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShowCaseGroupByOutputType[P]>
            : GetScalarType<T[P], ShowCaseGroupByOutputType[P]>
        }
      >
    >


  export type showCaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
    descriptionUz?: boolean
    descriptionRU?: boolean
    descriptionEng?: boolean
    image?: boolean
    link?: boolean
  }, ExtArgs["result"]["showCase"]>

  export type showCaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
    descriptionUz?: boolean
    descriptionRU?: boolean
    descriptionEng?: boolean
    image?: boolean
    link?: boolean
  }, ExtArgs["result"]["showCase"]>

  export type showCaseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
    descriptionUz?: boolean
    descriptionRU?: boolean
    descriptionEng?: boolean
    image?: boolean
    link?: boolean
  }, ExtArgs["result"]["showCase"]>

  export type showCaseSelectScalar = {
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
    descriptionUz?: boolean
    descriptionRU?: boolean
    descriptionEng?: boolean
    image?: boolean
    link?: boolean
  }

  export type showCaseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameUz" | "nameRU" | "nameEng" | "descriptionUz" | "descriptionRU" | "descriptionEng" | "image" | "link", ExtArgs["result"]["showCase"]>

  export type $showCasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "showCase"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameUz: string
      nameRU: string
      nameEng: string
      descriptionUz: string
      descriptionRU: string
      descriptionEng: string
      image: string
      link: string
    }, ExtArgs["result"]["showCase"]>
    composites: {}
  }

  type showCaseGetPayload<S extends boolean | null | undefined | showCaseDefaultArgs> = $Result.GetResult<Prisma.$showCasePayload, S>

  type showCaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<showCaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShowCaseCountAggregateInputType | true
    }

  export interface showCaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['showCase'], meta: { name: 'showCase' } }
    /**
     * Find zero or one ShowCase that matches the filter.
     * @param {showCaseFindUniqueArgs} args - Arguments to find a ShowCase
     * @example
     * // Get one ShowCase
     * const showCase = await prisma.showCase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends showCaseFindUniqueArgs>(args: SelectSubset<T, showCaseFindUniqueArgs<ExtArgs>>): Prisma__showCaseClient<$Result.GetResult<Prisma.$showCasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ShowCase that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {showCaseFindUniqueOrThrowArgs} args - Arguments to find a ShowCase
     * @example
     * // Get one ShowCase
     * const showCase = await prisma.showCase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends showCaseFindUniqueOrThrowArgs>(args: SelectSubset<T, showCaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__showCaseClient<$Result.GetResult<Prisma.$showCasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShowCase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {showCaseFindFirstArgs} args - Arguments to find a ShowCase
     * @example
     * // Get one ShowCase
     * const showCase = await prisma.showCase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends showCaseFindFirstArgs>(args?: SelectSubset<T, showCaseFindFirstArgs<ExtArgs>>): Prisma__showCaseClient<$Result.GetResult<Prisma.$showCasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShowCase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {showCaseFindFirstOrThrowArgs} args - Arguments to find a ShowCase
     * @example
     * // Get one ShowCase
     * const showCase = await prisma.showCase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends showCaseFindFirstOrThrowArgs>(args?: SelectSubset<T, showCaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__showCaseClient<$Result.GetResult<Prisma.$showCasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ShowCases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {showCaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShowCases
     * const showCases = await prisma.showCase.findMany()
     * 
     * // Get first 10 ShowCases
     * const showCases = await prisma.showCase.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const showCaseWithIdOnly = await prisma.showCase.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends showCaseFindManyArgs>(args?: SelectSubset<T, showCaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$showCasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ShowCase.
     * @param {showCaseCreateArgs} args - Arguments to create a ShowCase.
     * @example
     * // Create one ShowCase
     * const ShowCase = await prisma.showCase.create({
     *   data: {
     *     // ... data to create a ShowCase
     *   }
     * })
     * 
     */
    create<T extends showCaseCreateArgs>(args: SelectSubset<T, showCaseCreateArgs<ExtArgs>>): Prisma__showCaseClient<$Result.GetResult<Prisma.$showCasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ShowCases.
     * @param {showCaseCreateManyArgs} args - Arguments to create many ShowCases.
     * @example
     * // Create many ShowCases
     * const showCase = await prisma.showCase.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends showCaseCreateManyArgs>(args?: SelectSubset<T, showCaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShowCases and returns the data saved in the database.
     * @param {showCaseCreateManyAndReturnArgs} args - Arguments to create many ShowCases.
     * @example
     * // Create many ShowCases
     * const showCase = await prisma.showCase.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShowCases and only return the `id`
     * const showCaseWithIdOnly = await prisma.showCase.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends showCaseCreateManyAndReturnArgs>(args?: SelectSubset<T, showCaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$showCasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ShowCase.
     * @param {showCaseDeleteArgs} args - Arguments to delete one ShowCase.
     * @example
     * // Delete one ShowCase
     * const ShowCase = await prisma.showCase.delete({
     *   where: {
     *     // ... filter to delete one ShowCase
     *   }
     * })
     * 
     */
    delete<T extends showCaseDeleteArgs>(args: SelectSubset<T, showCaseDeleteArgs<ExtArgs>>): Prisma__showCaseClient<$Result.GetResult<Prisma.$showCasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ShowCase.
     * @param {showCaseUpdateArgs} args - Arguments to update one ShowCase.
     * @example
     * // Update one ShowCase
     * const showCase = await prisma.showCase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends showCaseUpdateArgs>(args: SelectSubset<T, showCaseUpdateArgs<ExtArgs>>): Prisma__showCaseClient<$Result.GetResult<Prisma.$showCasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ShowCases.
     * @param {showCaseDeleteManyArgs} args - Arguments to filter ShowCases to delete.
     * @example
     * // Delete a few ShowCases
     * const { count } = await prisma.showCase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends showCaseDeleteManyArgs>(args?: SelectSubset<T, showCaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShowCases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {showCaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShowCases
     * const showCase = await prisma.showCase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends showCaseUpdateManyArgs>(args: SelectSubset<T, showCaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShowCases and returns the data updated in the database.
     * @param {showCaseUpdateManyAndReturnArgs} args - Arguments to update many ShowCases.
     * @example
     * // Update many ShowCases
     * const showCase = await prisma.showCase.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ShowCases and only return the `id`
     * const showCaseWithIdOnly = await prisma.showCase.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends showCaseUpdateManyAndReturnArgs>(args: SelectSubset<T, showCaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$showCasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ShowCase.
     * @param {showCaseUpsertArgs} args - Arguments to update or create a ShowCase.
     * @example
     * // Update or create a ShowCase
     * const showCase = await prisma.showCase.upsert({
     *   create: {
     *     // ... data to create a ShowCase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShowCase we want to update
     *   }
     * })
     */
    upsert<T extends showCaseUpsertArgs>(args: SelectSubset<T, showCaseUpsertArgs<ExtArgs>>): Prisma__showCaseClient<$Result.GetResult<Prisma.$showCasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ShowCases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {showCaseCountArgs} args - Arguments to filter ShowCases to count.
     * @example
     * // Count the number of ShowCases
     * const count = await prisma.showCase.count({
     *   where: {
     *     // ... the filter for the ShowCases we want to count
     *   }
     * })
    **/
    count<T extends showCaseCountArgs>(
      args?: Subset<T, showCaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShowCaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShowCase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowCaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShowCaseAggregateArgs>(args: Subset<T, ShowCaseAggregateArgs>): Prisma.PrismaPromise<GetShowCaseAggregateType<T>>

    /**
     * Group by ShowCase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {showCaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends showCaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: showCaseGroupByArgs['orderBy'] }
        : { orderBy?: showCaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, showCaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShowCaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the showCase model
   */
  readonly fields: showCaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for showCase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__showCaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the showCase model
   */
  interface showCaseFieldRefs {
    readonly id: FieldRef<"showCase", 'String'>
    readonly nameUz: FieldRef<"showCase", 'String'>
    readonly nameRU: FieldRef<"showCase", 'String'>
    readonly nameEng: FieldRef<"showCase", 'String'>
    readonly descriptionUz: FieldRef<"showCase", 'String'>
    readonly descriptionRU: FieldRef<"showCase", 'String'>
    readonly descriptionEng: FieldRef<"showCase", 'String'>
    readonly image: FieldRef<"showCase", 'String'>
    readonly link: FieldRef<"showCase", 'String'>
  }
    

  // Custom InputTypes
  /**
   * showCase findUnique
   */
  export type showCaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showCase
     */
    select?: showCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the showCase
     */
    omit?: showCaseOmit<ExtArgs> | null
    /**
     * Filter, which showCase to fetch.
     */
    where: showCaseWhereUniqueInput
  }

  /**
   * showCase findUniqueOrThrow
   */
  export type showCaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showCase
     */
    select?: showCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the showCase
     */
    omit?: showCaseOmit<ExtArgs> | null
    /**
     * Filter, which showCase to fetch.
     */
    where: showCaseWhereUniqueInput
  }

  /**
   * showCase findFirst
   */
  export type showCaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showCase
     */
    select?: showCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the showCase
     */
    omit?: showCaseOmit<ExtArgs> | null
    /**
     * Filter, which showCase to fetch.
     */
    where?: showCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of showCases to fetch.
     */
    orderBy?: showCaseOrderByWithRelationInput | showCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for showCases.
     */
    cursor?: showCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` showCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` showCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of showCases.
     */
    distinct?: ShowCaseScalarFieldEnum | ShowCaseScalarFieldEnum[]
  }

  /**
   * showCase findFirstOrThrow
   */
  export type showCaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showCase
     */
    select?: showCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the showCase
     */
    omit?: showCaseOmit<ExtArgs> | null
    /**
     * Filter, which showCase to fetch.
     */
    where?: showCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of showCases to fetch.
     */
    orderBy?: showCaseOrderByWithRelationInput | showCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for showCases.
     */
    cursor?: showCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` showCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` showCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of showCases.
     */
    distinct?: ShowCaseScalarFieldEnum | ShowCaseScalarFieldEnum[]
  }

  /**
   * showCase findMany
   */
  export type showCaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showCase
     */
    select?: showCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the showCase
     */
    omit?: showCaseOmit<ExtArgs> | null
    /**
     * Filter, which showCases to fetch.
     */
    where?: showCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of showCases to fetch.
     */
    orderBy?: showCaseOrderByWithRelationInput | showCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing showCases.
     */
    cursor?: showCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` showCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` showCases.
     */
    skip?: number
    distinct?: ShowCaseScalarFieldEnum | ShowCaseScalarFieldEnum[]
  }

  /**
   * showCase create
   */
  export type showCaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showCase
     */
    select?: showCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the showCase
     */
    omit?: showCaseOmit<ExtArgs> | null
    /**
     * The data needed to create a showCase.
     */
    data: XOR<showCaseCreateInput, showCaseUncheckedCreateInput>
  }

  /**
   * showCase createMany
   */
  export type showCaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many showCases.
     */
    data: showCaseCreateManyInput | showCaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * showCase createManyAndReturn
   */
  export type showCaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showCase
     */
    select?: showCaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the showCase
     */
    omit?: showCaseOmit<ExtArgs> | null
    /**
     * The data used to create many showCases.
     */
    data: showCaseCreateManyInput | showCaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * showCase update
   */
  export type showCaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showCase
     */
    select?: showCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the showCase
     */
    omit?: showCaseOmit<ExtArgs> | null
    /**
     * The data needed to update a showCase.
     */
    data: XOR<showCaseUpdateInput, showCaseUncheckedUpdateInput>
    /**
     * Choose, which showCase to update.
     */
    where: showCaseWhereUniqueInput
  }

  /**
   * showCase updateMany
   */
  export type showCaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update showCases.
     */
    data: XOR<showCaseUpdateManyMutationInput, showCaseUncheckedUpdateManyInput>
    /**
     * Filter which showCases to update
     */
    where?: showCaseWhereInput
    /**
     * Limit how many showCases to update.
     */
    limit?: number
  }

  /**
   * showCase updateManyAndReturn
   */
  export type showCaseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showCase
     */
    select?: showCaseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the showCase
     */
    omit?: showCaseOmit<ExtArgs> | null
    /**
     * The data used to update showCases.
     */
    data: XOR<showCaseUpdateManyMutationInput, showCaseUncheckedUpdateManyInput>
    /**
     * Filter which showCases to update
     */
    where?: showCaseWhereInput
    /**
     * Limit how many showCases to update.
     */
    limit?: number
  }

  /**
   * showCase upsert
   */
  export type showCaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showCase
     */
    select?: showCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the showCase
     */
    omit?: showCaseOmit<ExtArgs> | null
    /**
     * The filter to search for the showCase to update in case it exists.
     */
    where: showCaseWhereUniqueInput
    /**
     * In case the showCase found by the `where` argument doesn't exist, create a new showCase with this data.
     */
    create: XOR<showCaseCreateInput, showCaseUncheckedCreateInput>
    /**
     * In case the showCase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<showCaseUpdateInput, showCaseUncheckedUpdateInput>
  }

  /**
   * showCase delete
   */
  export type showCaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showCase
     */
    select?: showCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the showCase
     */
    omit?: showCaseOmit<ExtArgs> | null
    /**
     * Filter which showCase to delete.
     */
    where: showCaseWhereUniqueInput
  }

  /**
   * showCase deleteMany
   */
  export type showCaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which showCases to delete
     */
    where?: showCaseWhereInput
    /**
     * Limit how many showCases to delete.
     */
    limit?: number
  }

  /**
   * showCase without action
   */
  export type showCaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the showCase
     */
    select?: showCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the showCase
     */
    omit?: showCaseOmit<ExtArgs> | null
  }


  /**
   * Model Partners
   */

  export type AggregatePartners = {
    _count: PartnersCountAggregateOutputType | null
    _min: PartnersMinAggregateOutputType | null
    _max: PartnersMaxAggregateOutputType | null
  }

  export type PartnersMinAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRU: string | null
    nameEng: string | null
    image: string | null
  }

  export type PartnersMaxAggregateOutputType = {
    id: string | null
    nameUz: string | null
    nameRU: string | null
    nameEng: string | null
    image: string | null
  }

  export type PartnersCountAggregateOutputType = {
    id: number
    nameUz: number
    nameRU: number
    nameEng: number
    image: number
    _all: number
  }


  export type PartnersMinAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
    image?: true
  }

  export type PartnersMaxAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
    image?: true
  }

  export type PartnersCountAggregateInputType = {
    id?: true
    nameUz?: true
    nameRU?: true
    nameEng?: true
    image?: true
    _all?: true
  }

  export type PartnersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partners to aggregate.
     */
    where?: PartnersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnersOrderByWithRelationInput | PartnersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartnersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Partners
    **/
    _count?: true | PartnersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartnersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartnersMaxAggregateInputType
  }

  export type GetPartnersAggregateType<T extends PartnersAggregateArgs> = {
        [P in keyof T & keyof AggregatePartners]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartners[P]>
      : GetScalarType<T[P], AggregatePartners[P]>
  }




  export type PartnersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartnersWhereInput
    orderBy?: PartnersOrderByWithAggregationInput | PartnersOrderByWithAggregationInput[]
    by: PartnersScalarFieldEnum[] | PartnersScalarFieldEnum
    having?: PartnersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartnersCountAggregateInputType | true
    _min?: PartnersMinAggregateInputType
    _max?: PartnersMaxAggregateInputType
  }

  export type PartnersGroupByOutputType = {
    id: string
    nameUz: string
    nameRU: string
    nameEng: string
    image: string
    _count: PartnersCountAggregateOutputType | null
    _min: PartnersMinAggregateOutputType | null
    _max: PartnersMaxAggregateOutputType | null
  }

  type GetPartnersGroupByPayload<T extends PartnersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartnersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartnersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartnersGroupByOutputType[P]>
            : GetScalarType<T[P], PartnersGroupByOutputType[P]>
        }
      >
    >


  export type PartnersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
    image?: boolean
  }, ExtArgs["result"]["partners"]>

  export type PartnersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
    image?: boolean
  }, ExtArgs["result"]["partners"]>

  export type PartnersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
    image?: boolean
  }, ExtArgs["result"]["partners"]>

  export type PartnersSelectScalar = {
    id?: boolean
    nameUz?: boolean
    nameRU?: boolean
    nameEng?: boolean
    image?: boolean
  }

  export type PartnersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameUz" | "nameRU" | "nameEng" | "image", ExtArgs["result"]["partners"]>

  export type $PartnersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Partners"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nameUz: string
      nameRU: string
      nameEng: string
      image: string
    }, ExtArgs["result"]["partners"]>
    composites: {}
  }

  type PartnersGetPayload<S extends boolean | null | undefined | PartnersDefaultArgs> = $Result.GetResult<Prisma.$PartnersPayload, S>

  type PartnersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PartnersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PartnersCountAggregateInputType | true
    }

  export interface PartnersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Partners'], meta: { name: 'Partners' } }
    /**
     * Find zero or one Partners that matches the filter.
     * @param {PartnersFindUniqueArgs} args - Arguments to find a Partners
     * @example
     * // Get one Partners
     * const partners = await prisma.partners.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartnersFindUniqueArgs>(args: SelectSubset<T, PartnersFindUniqueArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Partners that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PartnersFindUniqueOrThrowArgs} args - Arguments to find a Partners
     * @example
     * // Get one Partners
     * const partners = await prisma.partners.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartnersFindUniqueOrThrowArgs>(args: SelectSubset<T, PartnersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Partners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnersFindFirstArgs} args - Arguments to find a Partners
     * @example
     * // Get one Partners
     * const partners = await prisma.partners.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartnersFindFirstArgs>(args?: SelectSubset<T, PartnersFindFirstArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Partners that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnersFindFirstOrThrowArgs} args - Arguments to find a Partners
     * @example
     * // Get one Partners
     * const partners = await prisma.partners.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartnersFindFirstOrThrowArgs>(args?: SelectSubset<T, PartnersFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Partners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Partners
     * const partners = await prisma.partners.findMany()
     * 
     * // Get first 10 Partners
     * const partners = await prisma.partners.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partnersWithIdOnly = await prisma.partners.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PartnersFindManyArgs>(args?: SelectSubset<T, PartnersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Partners.
     * @param {PartnersCreateArgs} args - Arguments to create a Partners.
     * @example
     * // Create one Partners
     * const Partners = await prisma.partners.create({
     *   data: {
     *     // ... data to create a Partners
     *   }
     * })
     * 
     */
    create<T extends PartnersCreateArgs>(args: SelectSubset<T, PartnersCreateArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Partners.
     * @param {PartnersCreateManyArgs} args - Arguments to create many Partners.
     * @example
     * // Create many Partners
     * const partners = await prisma.partners.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartnersCreateManyArgs>(args?: SelectSubset<T, PartnersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Partners and returns the data saved in the database.
     * @param {PartnersCreateManyAndReturnArgs} args - Arguments to create many Partners.
     * @example
     * // Create many Partners
     * const partners = await prisma.partners.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Partners and only return the `id`
     * const partnersWithIdOnly = await prisma.partners.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PartnersCreateManyAndReturnArgs>(args?: SelectSubset<T, PartnersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Partners.
     * @param {PartnersDeleteArgs} args - Arguments to delete one Partners.
     * @example
     * // Delete one Partners
     * const Partners = await prisma.partners.delete({
     *   where: {
     *     // ... filter to delete one Partners
     *   }
     * })
     * 
     */
    delete<T extends PartnersDeleteArgs>(args: SelectSubset<T, PartnersDeleteArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Partners.
     * @param {PartnersUpdateArgs} args - Arguments to update one Partners.
     * @example
     * // Update one Partners
     * const partners = await prisma.partners.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartnersUpdateArgs>(args: SelectSubset<T, PartnersUpdateArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Partners.
     * @param {PartnersDeleteManyArgs} args - Arguments to filter Partners to delete.
     * @example
     * // Delete a few Partners
     * const { count } = await prisma.partners.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartnersDeleteManyArgs>(args?: SelectSubset<T, PartnersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Partners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Partners
     * const partners = await prisma.partners.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartnersUpdateManyArgs>(args: SelectSubset<T, PartnersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Partners and returns the data updated in the database.
     * @param {PartnersUpdateManyAndReturnArgs} args - Arguments to update many Partners.
     * @example
     * // Update many Partners
     * const partners = await prisma.partners.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Partners and only return the `id`
     * const partnersWithIdOnly = await prisma.partners.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PartnersUpdateManyAndReturnArgs>(args: SelectSubset<T, PartnersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Partners.
     * @param {PartnersUpsertArgs} args - Arguments to update or create a Partners.
     * @example
     * // Update or create a Partners
     * const partners = await prisma.partners.upsert({
     *   create: {
     *     // ... data to create a Partners
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Partners we want to update
     *   }
     * })
     */
    upsert<T extends PartnersUpsertArgs>(args: SelectSubset<T, PartnersUpsertArgs<ExtArgs>>): Prisma__PartnersClient<$Result.GetResult<Prisma.$PartnersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Partners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnersCountArgs} args - Arguments to filter Partners to count.
     * @example
     * // Count the number of Partners
     * const count = await prisma.partners.count({
     *   where: {
     *     // ... the filter for the Partners we want to count
     *   }
     * })
    **/
    count<T extends PartnersCountArgs>(
      args?: Subset<T, PartnersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartnersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Partners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartnersAggregateArgs>(args: Subset<T, PartnersAggregateArgs>): Prisma.PrismaPromise<GetPartnersAggregateType<T>>

    /**
     * Group by Partners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartnersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartnersGroupByArgs['orderBy'] }
        : { orderBy?: PartnersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartnersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartnersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Partners model
   */
  readonly fields: PartnersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Partners.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartnersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Partners model
   */
  interface PartnersFieldRefs {
    readonly id: FieldRef<"Partners", 'String'>
    readonly nameUz: FieldRef<"Partners", 'String'>
    readonly nameRU: FieldRef<"Partners", 'String'>
    readonly nameEng: FieldRef<"Partners", 'String'>
    readonly image: FieldRef<"Partners", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Partners findUnique
   */
  export type PartnersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * Filter, which Partners to fetch.
     */
    where: PartnersWhereUniqueInput
  }

  /**
   * Partners findUniqueOrThrow
   */
  export type PartnersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * Filter, which Partners to fetch.
     */
    where: PartnersWhereUniqueInput
  }

  /**
   * Partners findFirst
   */
  export type PartnersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * Filter, which Partners to fetch.
     */
    where?: PartnersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnersOrderByWithRelationInput | PartnersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partners.
     */
    cursor?: PartnersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partners.
     */
    distinct?: PartnersScalarFieldEnum | PartnersScalarFieldEnum[]
  }

  /**
   * Partners findFirstOrThrow
   */
  export type PartnersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * Filter, which Partners to fetch.
     */
    where?: PartnersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnersOrderByWithRelationInput | PartnersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partners.
     */
    cursor?: PartnersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partners.
     */
    distinct?: PartnersScalarFieldEnum | PartnersScalarFieldEnum[]
  }

  /**
   * Partners findMany
   */
  export type PartnersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * Filter, which Partners to fetch.
     */
    where?: PartnersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnersOrderByWithRelationInput | PartnersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Partners.
     */
    cursor?: PartnersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    distinct?: PartnersScalarFieldEnum | PartnersScalarFieldEnum[]
  }

  /**
   * Partners create
   */
  export type PartnersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * The data needed to create a Partners.
     */
    data: XOR<PartnersCreateInput, PartnersUncheckedCreateInput>
  }

  /**
   * Partners createMany
   */
  export type PartnersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Partners.
     */
    data: PartnersCreateManyInput | PartnersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Partners createManyAndReturn
   */
  export type PartnersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * The data used to create many Partners.
     */
    data: PartnersCreateManyInput | PartnersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Partners update
   */
  export type PartnersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * The data needed to update a Partners.
     */
    data: XOR<PartnersUpdateInput, PartnersUncheckedUpdateInput>
    /**
     * Choose, which Partners to update.
     */
    where: PartnersWhereUniqueInput
  }

  /**
   * Partners updateMany
   */
  export type PartnersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Partners.
     */
    data: XOR<PartnersUpdateManyMutationInput, PartnersUncheckedUpdateManyInput>
    /**
     * Filter which Partners to update
     */
    where?: PartnersWhereInput
    /**
     * Limit how many Partners to update.
     */
    limit?: number
  }

  /**
   * Partners updateManyAndReturn
   */
  export type PartnersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * The data used to update Partners.
     */
    data: XOR<PartnersUpdateManyMutationInput, PartnersUncheckedUpdateManyInput>
    /**
     * Filter which Partners to update
     */
    where?: PartnersWhereInput
    /**
     * Limit how many Partners to update.
     */
    limit?: number
  }

  /**
   * Partners upsert
   */
  export type PartnersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * The filter to search for the Partners to update in case it exists.
     */
    where: PartnersWhereUniqueInput
    /**
     * In case the Partners found by the `where` argument doesn't exist, create a new Partners with this data.
     */
    create: XOR<PartnersCreateInput, PartnersUncheckedCreateInput>
    /**
     * In case the Partners was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartnersUpdateInput, PartnersUncheckedUpdateInput>
  }

  /**
   * Partners delete
   */
  export type PartnersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
    /**
     * Filter which Partners to delete.
     */
    where: PartnersWhereUniqueInput
  }

  /**
   * Partners deleteMany
   */
  export type PartnersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partners to delete
     */
    where?: PartnersWhereInput
    /**
     * Limit how many Partners to delete.
     */
    limit?: number
  }

  /**
   * Partners without action
   */
  export type PartnersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partners
     */
    select?: PartnersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partners
     */
    omit?: PartnersOmit<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    ipAddress: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    ipAddress: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userId: number
    ipAddress: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    userId?: true
    ipAddress?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userId?: true
    ipAddress?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userId?: true
    ipAddress?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    userId: string
    ipAddress: string | null
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    ipAddress?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    ipAddress?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    ipAddress?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    userId?: boolean
    ipAddress?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "ipAddress", ExtArgs["result"]["session"]>

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      ipAddress: string | null
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly ipAddress: FieldRef<"Session", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const RegionScalarFieldEnum: {
    id: 'id',
    nameUz: 'nameUz',
    nameRU: 'nameRU',
    nameEng: 'nameEng'
  };

  export type RegionScalarFieldEnum = (typeof RegionScalarFieldEnum)[keyof typeof RegionScalarFieldEnum]


  export const BrandScalarFieldEnum: {
    id: 'id',
    nameUz: 'nameUz',
    nameRU: 'nameRU',
    nameEng: 'nameEng'
  };

  export type BrandScalarFieldEnum = (typeof BrandScalarFieldEnum)[keyof typeof BrandScalarFieldEnum]


  export const CapacityScalarFieldEnum: {
    id: 'id',
    nameUz: 'nameUz',
    nameRU: 'nameRU',
    nameEng: 'nameEng'
  };

  export type CapacityScalarFieldEnum = (typeof CapacityScalarFieldEnum)[keyof typeof CapacityScalarFieldEnum]


  export const SizeScalarFieldEnum: {
    id: 'id',
    nameUz: 'nameUz',
    nameRU: 'nameRU',
    nameEng: 'nameEng'
  };

  export type SizeScalarFieldEnum = (typeof SizeScalarFieldEnum)[keyof typeof SizeScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    password: 'password',
    phoneNumber: 'phoneNumber',
    regionId: 'regionId',
    IIN: 'IIN',
    MFO: 'MFO',
    RS: 'RS',
    Bank: 'Bank',
    OKED: 'OKED',
    ADDRESS: 'ADDRESS',
    role: 'role',
    status: 'status'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ToolsScalarFieldEnum: {
    id: 'id',
    nameUz: 'nameUz',
    nameRU: 'nameRU',
    nameEng: 'nameEng',
    descriptionUz: 'descriptionUz',
    descriptionRU: 'descriptionRU',
    descriptionEng: 'descriptionEng',
    price: 'price',
    quantity: 'quantity',
    code: 'code',
    image: 'image',
    brandId: 'brandId',
    isActive: 'isActive',
    capacityId: 'capacityId',
    sizeId: 'sizeId'
  };

  export type ToolsScalarFieldEnum = (typeof ToolsScalarFieldEnum)[keyof typeof ToolsScalarFieldEnum]


  export const MasterScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    phone: 'phone',
    isActive: 'isActive',
    year: 'year',
    image: 'image',
    passportImage: 'passportImage',
    about: 'about'
  };

  export type MasterScalarFieldEnum = (typeof MasterScalarFieldEnum)[keyof typeof MasterScalarFieldEnum]


  export const MasterProdScalarFieldEnum: {
    id: 'id',
    masterId: 'masterId',
    productId: 'productId',
    minWorkingHour: 'minWorkingHour',
    levelId: 'levelId',
    priceHourly: 'priceHourly',
    priceDaily: 'priceDaily',
    experience: 'experience'
  };

  export type MasterProdScalarFieldEnum = (typeof MasterProdScalarFieldEnum)[keyof typeof MasterProdScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    nameUz: 'nameUz',
    nameRU: 'nameRU',
    nameEng: 'nameEng',
    image: 'image',
    isActive: 'isActive'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const LevelScalarFieldEnum: {
    id: 'id',
    nameUz: 'nameUz',
    nameRU: 'nameRU',
    nameEng: 'nameEng'
  };

  export type LevelScalarFieldEnum = (typeof LevelScalarFieldEnum)[keyof typeof LevelScalarFieldEnum]


  export const ProductLevelsScalarFieldEnum: {
    id: 'id',
    levelId: 'levelId',
    productId: 'productId',
    priceHourly: 'priceHourly',
    priceDaily: 'priceDaily',
    minWorkingHour: 'minWorkingHour'
  };

  export type ProductLevelsScalarFieldEnum = (typeof ProductLevelsScalarFieldEnum)[keyof typeof ProductLevelsScalarFieldEnum]


  export const ProductToolsScalarFieldEnum: {
    id: 'id',
    toolId: 'toolId',
    productId: 'productId'
  };

  export type ProductToolsScalarFieldEnum = (typeof ProductToolsScalarFieldEnum)[keyof typeof ProductToolsScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    productCount: 'productCount',
    quantity: 'quantity',
    measure: 'measure',
    tool: 'tool',
    total: 'total',
    location: 'location',
    address: 'address',
    date: 'date',
    paymentType: 'paymentType',
    withDelivery: 'withDelivery',
    status: 'status',
    commentToDelivery: 'commentToDelivery',
    userId: 'userId'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const OrderProductsScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    productId: 'productId',
    levelId: 'levelId',
    toolId: 'toolId',
    count: 'count',
    price: 'price',
    workingTime: 'workingTime',
    timeUnit: 'timeUnit'
  };

  export type OrderProductsScalarFieldEnum = (typeof OrderProductsScalarFieldEnum)[keyof typeof OrderProductsScalarFieldEnum]


  export const OrderMastersScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    masterId: 'masterId'
  };

  export type OrderMastersScalarFieldEnum = (typeof OrderMastersScalarFieldEnum)[keyof typeof OrderMastersScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    text: 'text',
    userId: 'userId',
    orderId: 'orderId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const MasterRatingsScalarFieldEnum: {
    id: 'id',
    star: 'star',
    masterId: 'masterId',
    commentId: 'commentId'
  };

  export type MasterRatingsScalarFieldEnum = (typeof MasterRatingsScalarFieldEnum)[keyof typeof MasterRatingsScalarFieldEnum]


  export const BasketScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    productCount: 'productCount',
    quantity: 'quantity',
    measure: 'measure',
    toolId: 'toolId',
    total: 'total',
    userId: 'userId',
    timeUnit: 'timeUnit',
    levelId: 'levelId'
  };

  export type BasketScalarFieldEnum = (typeof BasketScalarFieldEnum)[keyof typeof BasketScalarFieldEnum]


  export const GeneralInfoScalarFieldEnum: {
    id: 'id',
    email: 'email',
    links: 'links',
    phone: 'phone'
  };

  export type GeneralInfoScalarFieldEnum = (typeof GeneralInfoScalarFieldEnum)[keyof typeof GeneralInfoScalarFieldEnum]


  export const ContactScalarFieldEnum: {
    id: 'id',
    name: 'name',
    surName: 'surName',
    phone: 'phone',
    address: 'address',
    message: 'message'
  };

  export type ContactScalarFieldEnum = (typeof ContactScalarFieldEnum)[keyof typeof ContactScalarFieldEnum]


  export const FAQScalarFieldEnum: {
    id: 'id',
    question: 'question',
    answer: 'answer'
  };

  export type FAQScalarFieldEnum = (typeof FAQScalarFieldEnum)[keyof typeof FAQScalarFieldEnum]


  export const ShowCaseScalarFieldEnum: {
    id: 'id',
    nameUz: 'nameUz',
    nameRU: 'nameRU',
    nameEng: 'nameEng',
    descriptionUz: 'descriptionUz',
    descriptionRU: 'descriptionRU',
    descriptionEng: 'descriptionEng',
    image: 'image',
    link: 'link'
  };

  export type ShowCaseScalarFieldEnum = (typeof ShowCaseScalarFieldEnum)[keyof typeof ShowCaseScalarFieldEnum]


  export const PartnersScalarFieldEnum: {
    id: 'id',
    nameUz: 'nameUz',
    nameRU: 'nameRU',
    nameEng: 'nameEng',
    image: 'image'
  };

  export type PartnersScalarFieldEnum = (typeof PartnersScalarFieldEnum)[keyof typeof PartnersScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    ipAddress: 'ipAddress'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'userRole'
   */
  export type EnumuserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'userRole'>
    


  /**
   * Reference to a field of type 'userRole[]'
   */
  export type ListEnumuserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'userRole[]'>
    


  /**
   * Reference to a field of type 'userStatus'
   */
  export type EnumuserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'userStatus'>
    


  /**
   * Reference to a field of type 'userStatus[]'
   */
  export type ListEnumuserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'userStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'paymentType'
   */
  export type EnumpaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'paymentType'>
    


  /**
   * Reference to a field of type 'paymentType[]'
   */
  export type ListEnumpaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'paymentType[]'>
    


  /**
   * Reference to a field of type 'orderStatus'
   */
  export type EnumorderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'orderStatus'>
    


  /**
   * Reference to a field of type 'orderStatus[]'
   */
  export type ListEnumorderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'orderStatus[]'>
    


  /**
   * Reference to a field of type 'MasterDaily'
   */
  export type EnumMasterDailyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MasterDaily'>
    


  /**
   * Reference to a field of type 'MasterDaily[]'
   */
  export type ListEnumMasterDailyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MasterDaily[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type RegionWhereInput = {
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    id?: StringFilter<"Region"> | string
    nameUz?: StringFilter<"Region"> | string
    nameRU?: StringFilter<"Region"> | string
    nameEng?: StringFilter<"Region"> | string
    User?: UserListRelationFilter
  }

  export type RegionOrderByWithRelationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    User?: UserOrderByRelationAggregateInput
  }

  export type RegionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    nameUz?: StringFilter<"Region"> | string
    nameRU?: StringFilter<"Region"> | string
    nameEng?: StringFilter<"Region"> | string
    User?: UserListRelationFilter
  }, "id">

  export type RegionOrderByWithAggregationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    _count?: RegionCountOrderByAggregateInput
    _max?: RegionMaxOrderByAggregateInput
    _min?: RegionMinOrderByAggregateInput
  }

  export type RegionScalarWhereWithAggregatesInput = {
    AND?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    OR?: RegionScalarWhereWithAggregatesInput[]
    NOT?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Region"> | string
    nameUz?: StringWithAggregatesFilter<"Region"> | string
    nameRU?: StringWithAggregatesFilter<"Region"> | string
    nameEng?: StringWithAggregatesFilter<"Region"> | string
  }

  export type BrandWhereInput = {
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    id?: StringFilter<"Brand"> | string
    nameUz?: StringFilter<"Brand"> | string
    nameRU?: StringFilter<"Brand"> | string
    nameEng?: StringFilter<"Brand"> | string
    Tools?: ToolsListRelationFilter
  }

  export type BrandOrderByWithRelationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    Tools?: ToolsOrderByRelationAggregateInput
  }

  export type BrandWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    nameUz?: StringFilter<"Brand"> | string
    nameRU?: StringFilter<"Brand"> | string
    nameEng?: StringFilter<"Brand"> | string
    Tools?: ToolsListRelationFilter
  }, "id">

  export type BrandOrderByWithAggregationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    _count?: BrandCountOrderByAggregateInput
    _max?: BrandMaxOrderByAggregateInput
    _min?: BrandMinOrderByAggregateInput
  }

  export type BrandScalarWhereWithAggregatesInput = {
    AND?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    OR?: BrandScalarWhereWithAggregatesInput[]
    NOT?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Brand"> | string
    nameUz?: StringWithAggregatesFilter<"Brand"> | string
    nameRU?: StringWithAggregatesFilter<"Brand"> | string
    nameEng?: StringWithAggregatesFilter<"Brand"> | string
  }

  export type CapacityWhereInput = {
    AND?: CapacityWhereInput | CapacityWhereInput[]
    OR?: CapacityWhereInput[]
    NOT?: CapacityWhereInput | CapacityWhereInput[]
    id?: StringFilter<"Capacity"> | string
    nameUz?: StringFilter<"Capacity"> | string
    nameRU?: StringFilter<"Capacity"> | string
    nameEng?: StringFilter<"Capacity"> | string
    Tools?: ToolsListRelationFilter
  }

  export type CapacityOrderByWithRelationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    Tools?: ToolsOrderByRelationAggregateInput
  }

  export type CapacityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CapacityWhereInput | CapacityWhereInput[]
    OR?: CapacityWhereInput[]
    NOT?: CapacityWhereInput | CapacityWhereInput[]
    nameUz?: StringFilter<"Capacity"> | string
    nameRU?: StringFilter<"Capacity"> | string
    nameEng?: StringFilter<"Capacity"> | string
    Tools?: ToolsListRelationFilter
  }, "id">

  export type CapacityOrderByWithAggregationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    _count?: CapacityCountOrderByAggregateInput
    _max?: CapacityMaxOrderByAggregateInput
    _min?: CapacityMinOrderByAggregateInput
  }

  export type CapacityScalarWhereWithAggregatesInput = {
    AND?: CapacityScalarWhereWithAggregatesInput | CapacityScalarWhereWithAggregatesInput[]
    OR?: CapacityScalarWhereWithAggregatesInput[]
    NOT?: CapacityScalarWhereWithAggregatesInput | CapacityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Capacity"> | string
    nameUz?: StringWithAggregatesFilter<"Capacity"> | string
    nameRU?: StringWithAggregatesFilter<"Capacity"> | string
    nameEng?: StringWithAggregatesFilter<"Capacity"> | string
  }

  export type SizeWhereInput = {
    AND?: SizeWhereInput | SizeWhereInput[]
    OR?: SizeWhereInput[]
    NOT?: SizeWhereInput | SizeWhereInput[]
    id?: StringFilter<"Size"> | string
    nameUz?: StringFilter<"Size"> | string
    nameRU?: StringFilter<"Size"> | string
    nameEng?: StringFilter<"Size"> | string
    Tools?: ToolsListRelationFilter
  }

  export type SizeOrderByWithRelationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    Tools?: ToolsOrderByRelationAggregateInput
  }

  export type SizeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SizeWhereInput | SizeWhereInput[]
    OR?: SizeWhereInput[]
    NOT?: SizeWhereInput | SizeWhereInput[]
    nameUz?: StringFilter<"Size"> | string
    nameRU?: StringFilter<"Size"> | string
    nameEng?: StringFilter<"Size"> | string
    Tools?: ToolsListRelationFilter
  }, "id">

  export type SizeOrderByWithAggregationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    _count?: SizeCountOrderByAggregateInput
    _max?: SizeMaxOrderByAggregateInput
    _min?: SizeMinOrderByAggregateInput
  }

  export type SizeScalarWhereWithAggregatesInput = {
    AND?: SizeScalarWhereWithAggregatesInput | SizeScalarWhereWithAggregatesInput[]
    OR?: SizeScalarWhereWithAggregatesInput[]
    NOT?: SizeScalarWhereWithAggregatesInput | SizeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Size"> | string
    nameUz?: StringWithAggregatesFilter<"Size"> | string
    nameRU?: StringWithAggregatesFilter<"Size"> | string
    nameEng?: StringWithAggregatesFilter<"Size"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    regionId?: StringFilter<"User"> | string
    IIN?: StringNullableFilter<"User"> | string | null
    MFO?: StringNullableFilter<"User"> | string | null
    RS?: StringNullableFilter<"User"> | string | null
    Bank?: StringNullableFilter<"User"> | string | null
    OKED?: StringNullableFilter<"User"> | string | null
    ADDRESS?: StringFilter<"User"> | string
    role?: EnumuserRoleFilter<"User"> | $Enums.userRole
    status?: EnumuserStatusFilter<"User"> | $Enums.userStatus
    region?: XOR<RegionScalarRelationFilter, RegionWhereInput>
    Basket?: BasketListRelationFilter
    Comment?: CommentListRelationFilter
    Order?: OrderListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    regionId?: SortOrder
    IIN?: SortOrderInput | SortOrder
    MFO?: SortOrderInput | SortOrder
    RS?: SortOrderInput | SortOrder
    Bank?: SortOrderInput | SortOrder
    OKED?: SortOrderInput | SortOrder
    ADDRESS?: SortOrder
    role?: SortOrder
    status?: SortOrder
    region?: RegionOrderByWithRelationInput
    Basket?: BasketOrderByRelationAggregateInput
    Comment?: CommentOrderByRelationAggregateInput
    Order?: OrderOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    fullName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    regionId?: StringFilter<"User"> | string
    IIN?: StringNullableFilter<"User"> | string | null
    MFO?: StringNullableFilter<"User"> | string | null
    RS?: StringNullableFilter<"User"> | string | null
    Bank?: StringNullableFilter<"User"> | string | null
    OKED?: StringNullableFilter<"User"> | string | null
    ADDRESS?: StringFilter<"User"> | string
    role?: EnumuserRoleFilter<"User"> | $Enums.userRole
    status?: EnumuserStatusFilter<"User"> | $Enums.userStatus
    region?: XOR<RegionScalarRelationFilter, RegionWhereInput>
    Basket?: BasketListRelationFilter
    Comment?: CommentListRelationFilter
    Order?: OrderListRelationFilter
  }, "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    regionId?: SortOrder
    IIN?: SortOrderInput | SortOrder
    MFO?: SortOrderInput | SortOrder
    RS?: SortOrderInput | SortOrder
    Bank?: SortOrderInput | SortOrder
    OKED?: SortOrderInput | SortOrder
    ADDRESS?: SortOrder
    role?: SortOrder
    status?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    fullName?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    phoneNumber?: StringWithAggregatesFilter<"User"> | string
    regionId?: StringWithAggregatesFilter<"User"> | string
    IIN?: StringNullableWithAggregatesFilter<"User"> | string | null
    MFO?: StringNullableWithAggregatesFilter<"User"> | string | null
    RS?: StringNullableWithAggregatesFilter<"User"> | string | null
    Bank?: StringNullableWithAggregatesFilter<"User"> | string | null
    OKED?: StringNullableWithAggregatesFilter<"User"> | string | null
    ADDRESS?: StringWithAggregatesFilter<"User"> | string
    role?: EnumuserRoleWithAggregatesFilter<"User"> | $Enums.userRole
    status?: EnumuserStatusWithAggregatesFilter<"User"> | $Enums.userStatus
  }

  export type ToolsWhereInput = {
    AND?: ToolsWhereInput | ToolsWhereInput[]
    OR?: ToolsWhereInput[]
    NOT?: ToolsWhereInput | ToolsWhereInput[]
    id?: StringFilter<"Tools"> | string
    nameUz?: StringFilter<"Tools"> | string
    nameRU?: StringFilter<"Tools"> | string
    nameEng?: StringFilter<"Tools"> | string
    descriptionUz?: StringFilter<"Tools"> | string
    descriptionRU?: StringFilter<"Tools"> | string
    descriptionEng?: StringFilter<"Tools"> | string
    price?: IntFilter<"Tools"> | number
    quantity?: IntFilter<"Tools"> | number
    code?: IntFilter<"Tools"> | number
    image?: StringFilter<"Tools"> | string
    brandId?: StringFilter<"Tools"> | string
    isActive?: BoolFilter<"Tools"> | boolean
    capacityId?: StringFilter<"Tools"> | string
    sizeId?: StringFilter<"Tools"> | string
    brand?: XOR<BrandScalarRelationFilter, BrandWhereInput>
    capacity?: XOR<CapacityScalarRelationFilter, CapacityWhereInput>
    size?: XOR<SizeScalarRelationFilter, SizeWhereInput>
    Basket?: BasketListRelationFilter
    OrderProducts?: OrderProductsListRelationFilter
    ProductTools?: ProductToolsListRelationFilter
  }

  export type ToolsOrderByWithRelationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    descriptionUz?: SortOrder
    descriptionRU?: SortOrder
    descriptionEng?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
    image?: SortOrder
    brandId?: SortOrder
    isActive?: SortOrder
    capacityId?: SortOrder
    sizeId?: SortOrder
    brand?: BrandOrderByWithRelationInput
    capacity?: CapacityOrderByWithRelationInput
    size?: SizeOrderByWithRelationInput
    Basket?: BasketOrderByRelationAggregateInput
    OrderProducts?: OrderProductsOrderByRelationAggregateInput
    ProductTools?: ProductToolsOrderByRelationAggregateInput
  }

  export type ToolsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ToolsWhereInput | ToolsWhereInput[]
    OR?: ToolsWhereInput[]
    NOT?: ToolsWhereInput | ToolsWhereInput[]
    nameUz?: StringFilter<"Tools"> | string
    nameRU?: StringFilter<"Tools"> | string
    nameEng?: StringFilter<"Tools"> | string
    descriptionUz?: StringFilter<"Tools"> | string
    descriptionRU?: StringFilter<"Tools"> | string
    descriptionEng?: StringFilter<"Tools"> | string
    price?: IntFilter<"Tools"> | number
    quantity?: IntFilter<"Tools"> | number
    code?: IntFilter<"Tools"> | number
    image?: StringFilter<"Tools"> | string
    brandId?: StringFilter<"Tools"> | string
    isActive?: BoolFilter<"Tools"> | boolean
    capacityId?: StringFilter<"Tools"> | string
    sizeId?: StringFilter<"Tools"> | string
    brand?: XOR<BrandScalarRelationFilter, BrandWhereInput>
    capacity?: XOR<CapacityScalarRelationFilter, CapacityWhereInput>
    size?: XOR<SizeScalarRelationFilter, SizeWhereInput>
    Basket?: BasketListRelationFilter
    OrderProducts?: OrderProductsListRelationFilter
    ProductTools?: ProductToolsListRelationFilter
  }, "id">

  export type ToolsOrderByWithAggregationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    descriptionUz?: SortOrder
    descriptionRU?: SortOrder
    descriptionEng?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
    image?: SortOrder
    brandId?: SortOrder
    isActive?: SortOrder
    capacityId?: SortOrder
    sizeId?: SortOrder
    _count?: ToolsCountOrderByAggregateInput
    _avg?: ToolsAvgOrderByAggregateInput
    _max?: ToolsMaxOrderByAggregateInput
    _min?: ToolsMinOrderByAggregateInput
    _sum?: ToolsSumOrderByAggregateInput
  }

  export type ToolsScalarWhereWithAggregatesInput = {
    AND?: ToolsScalarWhereWithAggregatesInput | ToolsScalarWhereWithAggregatesInput[]
    OR?: ToolsScalarWhereWithAggregatesInput[]
    NOT?: ToolsScalarWhereWithAggregatesInput | ToolsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tools"> | string
    nameUz?: StringWithAggregatesFilter<"Tools"> | string
    nameRU?: StringWithAggregatesFilter<"Tools"> | string
    nameEng?: StringWithAggregatesFilter<"Tools"> | string
    descriptionUz?: StringWithAggregatesFilter<"Tools"> | string
    descriptionRU?: StringWithAggregatesFilter<"Tools"> | string
    descriptionEng?: StringWithAggregatesFilter<"Tools"> | string
    price?: IntWithAggregatesFilter<"Tools"> | number
    quantity?: IntWithAggregatesFilter<"Tools"> | number
    code?: IntWithAggregatesFilter<"Tools"> | number
    image?: StringWithAggregatesFilter<"Tools"> | string
    brandId?: StringWithAggregatesFilter<"Tools"> | string
    isActive?: BoolWithAggregatesFilter<"Tools"> | boolean
    capacityId?: StringWithAggregatesFilter<"Tools"> | string
    sizeId?: StringWithAggregatesFilter<"Tools"> | string
  }

  export type MasterWhereInput = {
    AND?: MasterWhereInput | MasterWhereInput[]
    OR?: MasterWhereInput[]
    NOT?: MasterWhereInput | MasterWhereInput[]
    id?: StringFilter<"Master"> | string
    fullName?: StringFilter<"Master"> | string
    phone?: StringFilter<"Master"> | string
    isActive?: BoolFilter<"Master"> | boolean
    year?: IntFilter<"Master"> | number
    image?: StringFilter<"Master"> | string
    passportImage?: StringFilter<"Master"> | string
    about?: StringFilter<"Master"> | string
    MasterProd?: MasterProdListRelationFilter
    OrderMasters?: OrderMastersListRelationFilter
    MasterRatings?: MasterRatingsListRelationFilter
  }

  export type MasterOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    phone?: SortOrder
    isActive?: SortOrder
    year?: SortOrder
    image?: SortOrder
    passportImage?: SortOrder
    about?: SortOrder
    MasterProd?: MasterProdOrderByRelationAggregateInput
    OrderMasters?: OrderMastersOrderByRelationAggregateInput
    MasterRatings?: MasterRatingsOrderByRelationAggregateInput
  }

  export type MasterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MasterWhereInput | MasterWhereInput[]
    OR?: MasterWhereInput[]
    NOT?: MasterWhereInput | MasterWhereInput[]
    fullName?: StringFilter<"Master"> | string
    phone?: StringFilter<"Master"> | string
    isActive?: BoolFilter<"Master"> | boolean
    year?: IntFilter<"Master"> | number
    image?: StringFilter<"Master"> | string
    passportImage?: StringFilter<"Master"> | string
    about?: StringFilter<"Master"> | string
    MasterProd?: MasterProdListRelationFilter
    OrderMasters?: OrderMastersListRelationFilter
    MasterRatings?: MasterRatingsListRelationFilter
  }, "id">

  export type MasterOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    phone?: SortOrder
    isActive?: SortOrder
    year?: SortOrder
    image?: SortOrder
    passportImage?: SortOrder
    about?: SortOrder
    _count?: MasterCountOrderByAggregateInput
    _avg?: MasterAvgOrderByAggregateInput
    _max?: MasterMaxOrderByAggregateInput
    _min?: MasterMinOrderByAggregateInput
    _sum?: MasterSumOrderByAggregateInput
  }

  export type MasterScalarWhereWithAggregatesInput = {
    AND?: MasterScalarWhereWithAggregatesInput | MasterScalarWhereWithAggregatesInput[]
    OR?: MasterScalarWhereWithAggregatesInput[]
    NOT?: MasterScalarWhereWithAggregatesInput | MasterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Master"> | string
    fullName?: StringWithAggregatesFilter<"Master"> | string
    phone?: StringWithAggregatesFilter<"Master"> | string
    isActive?: BoolWithAggregatesFilter<"Master"> | boolean
    year?: IntWithAggregatesFilter<"Master"> | number
    image?: StringWithAggregatesFilter<"Master"> | string
    passportImage?: StringWithAggregatesFilter<"Master"> | string
    about?: StringWithAggregatesFilter<"Master"> | string
  }

  export type MasterProdWhereInput = {
    AND?: MasterProdWhereInput | MasterProdWhereInput[]
    OR?: MasterProdWhereInput[]
    NOT?: MasterProdWhereInput | MasterProdWhereInput[]
    id?: StringFilter<"MasterProd"> | string
    masterId?: StringFilter<"MasterProd"> | string
    productId?: StringFilter<"MasterProd"> | string
    minWorkingHour?: IntFilter<"MasterProd"> | number
    levelId?: StringFilter<"MasterProd"> | string
    priceHourly?: IntFilter<"MasterProd"> | number
    priceDaily?: IntFilter<"MasterProd"> | number
    experience?: IntFilter<"MasterProd"> | number
    master?: XOR<MasterScalarRelationFilter, MasterWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
  }

  export type MasterProdOrderByWithRelationInput = {
    id?: SortOrder
    masterId?: SortOrder
    productId?: SortOrder
    minWorkingHour?: SortOrder
    levelId?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    experience?: SortOrder
    master?: MasterOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
    level?: LevelOrderByWithRelationInput
  }

  export type MasterProdWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MasterProdWhereInput | MasterProdWhereInput[]
    OR?: MasterProdWhereInput[]
    NOT?: MasterProdWhereInput | MasterProdWhereInput[]
    masterId?: StringFilter<"MasterProd"> | string
    productId?: StringFilter<"MasterProd"> | string
    minWorkingHour?: IntFilter<"MasterProd"> | number
    levelId?: StringFilter<"MasterProd"> | string
    priceHourly?: IntFilter<"MasterProd"> | number
    priceDaily?: IntFilter<"MasterProd"> | number
    experience?: IntFilter<"MasterProd"> | number
    master?: XOR<MasterScalarRelationFilter, MasterWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
  }, "id">

  export type MasterProdOrderByWithAggregationInput = {
    id?: SortOrder
    masterId?: SortOrder
    productId?: SortOrder
    minWorkingHour?: SortOrder
    levelId?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    experience?: SortOrder
    _count?: MasterProdCountOrderByAggregateInput
    _avg?: MasterProdAvgOrderByAggregateInput
    _max?: MasterProdMaxOrderByAggregateInput
    _min?: MasterProdMinOrderByAggregateInput
    _sum?: MasterProdSumOrderByAggregateInput
  }

  export type MasterProdScalarWhereWithAggregatesInput = {
    AND?: MasterProdScalarWhereWithAggregatesInput | MasterProdScalarWhereWithAggregatesInput[]
    OR?: MasterProdScalarWhereWithAggregatesInput[]
    NOT?: MasterProdScalarWhereWithAggregatesInput | MasterProdScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MasterProd"> | string
    masterId?: StringWithAggregatesFilter<"MasterProd"> | string
    productId?: StringWithAggregatesFilter<"MasterProd"> | string
    minWorkingHour?: IntWithAggregatesFilter<"MasterProd"> | number
    levelId?: StringWithAggregatesFilter<"MasterProd"> | string
    priceHourly?: IntWithAggregatesFilter<"MasterProd"> | number
    priceDaily?: IntWithAggregatesFilter<"MasterProd"> | number
    experience?: IntWithAggregatesFilter<"MasterProd"> | number
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: StringFilter<"Product"> | string
    nameUz?: StringFilter<"Product"> | string
    nameRU?: StringFilter<"Product"> | string
    nameEng?: StringFilter<"Product"> | string
    image?: StringFilter<"Product"> | string
    isActive?: BoolFilter<"Product"> | boolean
    MasterProd?: MasterProdListRelationFilter
    Basket?: BasketListRelationFilter
    productLevels?: ProductLevelsListRelationFilter
    ProductTools?: ProductToolsListRelationFilter
    OrderProducts?: OrderProductsListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
    MasterProd?: MasterProdOrderByRelationAggregateInput
    Basket?: BasketOrderByRelationAggregateInput
    productLevels?: ProductLevelsOrderByRelationAggregateInput
    ProductTools?: ProductToolsOrderByRelationAggregateInput
    OrderProducts?: OrderProductsOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    nameUz?: StringFilter<"Product"> | string
    nameRU?: StringFilter<"Product"> | string
    nameEng?: StringFilter<"Product"> | string
    image?: StringFilter<"Product"> | string
    isActive?: BoolFilter<"Product"> | boolean
    MasterProd?: MasterProdListRelationFilter
    Basket?: BasketListRelationFilter
    productLevels?: ProductLevelsListRelationFilter
    ProductTools?: ProductToolsListRelationFilter
    OrderProducts?: OrderProductsListRelationFilter
  }, "id">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product"> | string
    nameUz?: StringWithAggregatesFilter<"Product"> | string
    nameRU?: StringWithAggregatesFilter<"Product"> | string
    nameEng?: StringWithAggregatesFilter<"Product"> | string
    image?: StringWithAggregatesFilter<"Product"> | string
    isActive?: BoolWithAggregatesFilter<"Product"> | boolean
  }

  export type LevelWhereInput = {
    AND?: LevelWhereInput | LevelWhereInput[]
    OR?: LevelWhereInput[]
    NOT?: LevelWhereInput | LevelWhereInput[]
    id?: StringFilter<"Level"> | string
    nameUz?: StringFilter<"Level"> | string
    nameRU?: StringFilter<"Level"> | string
    nameEng?: StringFilter<"Level"> | string
    MasterProd?: MasterProdListRelationFilter
    productLevels?: ProductLevelsListRelationFilter
    OrderProducts?: OrderProductsListRelationFilter
    Basket?: BasketListRelationFilter
  }

  export type LevelOrderByWithRelationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    MasterProd?: MasterProdOrderByRelationAggregateInput
    productLevels?: ProductLevelsOrderByRelationAggregateInput
    OrderProducts?: OrderProductsOrderByRelationAggregateInput
    Basket?: BasketOrderByRelationAggregateInput
  }

  export type LevelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LevelWhereInput | LevelWhereInput[]
    OR?: LevelWhereInput[]
    NOT?: LevelWhereInput | LevelWhereInput[]
    nameUz?: StringFilter<"Level"> | string
    nameRU?: StringFilter<"Level"> | string
    nameEng?: StringFilter<"Level"> | string
    MasterProd?: MasterProdListRelationFilter
    productLevels?: ProductLevelsListRelationFilter
    OrderProducts?: OrderProductsListRelationFilter
    Basket?: BasketListRelationFilter
  }, "id">

  export type LevelOrderByWithAggregationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    _count?: LevelCountOrderByAggregateInput
    _max?: LevelMaxOrderByAggregateInput
    _min?: LevelMinOrderByAggregateInput
  }

  export type LevelScalarWhereWithAggregatesInput = {
    AND?: LevelScalarWhereWithAggregatesInput | LevelScalarWhereWithAggregatesInput[]
    OR?: LevelScalarWhereWithAggregatesInput[]
    NOT?: LevelScalarWhereWithAggregatesInput | LevelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Level"> | string
    nameUz?: StringWithAggregatesFilter<"Level"> | string
    nameRU?: StringWithAggregatesFilter<"Level"> | string
    nameEng?: StringWithAggregatesFilter<"Level"> | string
  }

  export type ProductLevelsWhereInput = {
    AND?: ProductLevelsWhereInput | ProductLevelsWhereInput[]
    OR?: ProductLevelsWhereInput[]
    NOT?: ProductLevelsWhereInput | ProductLevelsWhereInput[]
    id?: StringFilter<"ProductLevels"> | string
    levelId?: StringFilter<"ProductLevels"> | string
    productId?: StringFilter<"ProductLevels"> | string
    priceHourly?: IntFilter<"ProductLevels"> | number
    priceDaily?: IntFilter<"ProductLevels"> | number
    minWorkingHour?: IntFilter<"ProductLevels"> | number
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type ProductLevelsOrderByWithRelationInput = {
    id?: SortOrder
    levelId?: SortOrder
    productId?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    minWorkingHour?: SortOrder
    level?: LevelOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type ProductLevelsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductLevelsWhereInput | ProductLevelsWhereInput[]
    OR?: ProductLevelsWhereInput[]
    NOT?: ProductLevelsWhereInput | ProductLevelsWhereInput[]
    levelId?: StringFilter<"ProductLevels"> | string
    productId?: StringFilter<"ProductLevels"> | string
    priceHourly?: IntFilter<"ProductLevels"> | number
    priceDaily?: IntFilter<"ProductLevels"> | number
    minWorkingHour?: IntFilter<"ProductLevels"> | number
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type ProductLevelsOrderByWithAggregationInput = {
    id?: SortOrder
    levelId?: SortOrder
    productId?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    minWorkingHour?: SortOrder
    _count?: ProductLevelsCountOrderByAggregateInput
    _avg?: ProductLevelsAvgOrderByAggregateInput
    _max?: ProductLevelsMaxOrderByAggregateInput
    _min?: ProductLevelsMinOrderByAggregateInput
    _sum?: ProductLevelsSumOrderByAggregateInput
  }

  export type ProductLevelsScalarWhereWithAggregatesInput = {
    AND?: ProductLevelsScalarWhereWithAggregatesInput | ProductLevelsScalarWhereWithAggregatesInput[]
    OR?: ProductLevelsScalarWhereWithAggregatesInput[]
    NOT?: ProductLevelsScalarWhereWithAggregatesInput | ProductLevelsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProductLevels"> | string
    levelId?: StringWithAggregatesFilter<"ProductLevels"> | string
    productId?: StringWithAggregatesFilter<"ProductLevels"> | string
    priceHourly?: IntWithAggregatesFilter<"ProductLevels"> | number
    priceDaily?: IntWithAggregatesFilter<"ProductLevels"> | number
    minWorkingHour?: IntWithAggregatesFilter<"ProductLevels"> | number
  }

  export type ProductToolsWhereInput = {
    AND?: ProductToolsWhereInput | ProductToolsWhereInput[]
    OR?: ProductToolsWhereInput[]
    NOT?: ProductToolsWhereInput | ProductToolsWhereInput[]
    id?: StringFilter<"ProductTools"> | string
    toolId?: StringFilter<"ProductTools"> | string
    productId?: StringFilter<"ProductTools"> | string
    tool?: XOR<ToolsScalarRelationFilter, ToolsWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type ProductToolsOrderByWithRelationInput = {
    id?: SortOrder
    toolId?: SortOrder
    productId?: SortOrder
    tool?: ToolsOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type ProductToolsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductToolsWhereInput | ProductToolsWhereInput[]
    OR?: ProductToolsWhereInput[]
    NOT?: ProductToolsWhereInput | ProductToolsWhereInput[]
    toolId?: StringFilter<"ProductTools"> | string
    productId?: StringFilter<"ProductTools"> | string
    tool?: XOR<ToolsScalarRelationFilter, ToolsWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type ProductToolsOrderByWithAggregationInput = {
    id?: SortOrder
    toolId?: SortOrder
    productId?: SortOrder
    _count?: ProductToolsCountOrderByAggregateInput
    _max?: ProductToolsMaxOrderByAggregateInput
    _min?: ProductToolsMinOrderByAggregateInput
  }

  export type ProductToolsScalarWhereWithAggregatesInput = {
    AND?: ProductToolsScalarWhereWithAggregatesInput | ProductToolsScalarWhereWithAggregatesInput[]
    OR?: ProductToolsScalarWhereWithAggregatesInput[]
    NOT?: ProductToolsScalarWhereWithAggregatesInput | ProductToolsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProductTools"> | string
    toolId?: StringWithAggregatesFilter<"ProductTools"> | string
    productId?: StringWithAggregatesFilter<"ProductTools"> | string
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: StringFilter<"Order"> | string
    productCount?: IntFilter<"Order"> | number
    quantity?: IntFilter<"Order"> | number
    measure?: IntFilter<"Order"> | number
    tool?: IntFilter<"Order"> | number
    total?: IntFilter<"Order"> | number
    location?: StringFilter<"Order"> | string
    address?: StringFilter<"Order"> | string
    date?: DateTimeFilter<"Order"> | Date | string
    paymentType?: EnumpaymentTypeFilter<"Order"> | $Enums.paymentType
    withDelivery?: BoolFilter<"Order"> | boolean
    status?: EnumorderStatusFilter<"Order"> | $Enums.orderStatus
    commentToDelivery?: StringFilter<"Order"> | string
    userId?: StringFilter<"Order"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    OrderProducts?: OrderProductsListRelationFilter
    OrderMasters?: OrderMastersListRelationFilter
    Comment?: CommentListRelationFilter
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    productCount?: SortOrder
    quantity?: SortOrder
    measure?: SortOrder
    tool?: SortOrder
    total?: SortOrder
    location?: SortOrder
    address?: SortOrder
    date?: SortOrder
    paymentType?: SortOrder
    withDelivery?: SortOrder
    status?: SortOrder
    commentToDelivery?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    OrderProducts?: OrderProductsOrderByRelationAggregateInput
    OrderMasters?: OrderMastersOrderByRelationAggregateInput
    Comment?: CommentOrderByRelationAggregateInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    productCount?: IntFilter<"Order"> | number
    quantity?: IntFilter<"Order"> | number
    measure?: IntFilter<"Order"> | number
    tool?: IntFilter<"Order"> | number
    total?: IntFilter<"Order"> | number
    location?: StringFilter<"Order"> | string
    address?: StringFilter<"Order"> | string
    date?: DateTimeFilter<"Order"> | Date | string
    paymentType?: EnumpaymentTypeFilter<"Order"> | $Enums.paymentType
    withDelivery?: BoolFilter<"Order"> | boolean
    status?: EnumorderStatusFilter<"Order"> | $Enums.orderStatus
    commentToDelivery?: StringFilter<"Order"> | string
    userId?: StringFilter<"Order"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    OrderProducts?: OrderProductsListRelationFilter
    OrderMasters?: OrderMastersListRelationFilter
    Comment?: CommentListRelationFilter
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    productCount?: SortOrder
    quantity?: SortOrder
    measure?: SortOrder
    tool?: SortOrder
    total?: SortOrder
    location?: SortOrder
    address?: SortOrder
    date?: SortOrder
    paymentType?: SortOrder
    withDelivery?: SortOrder
    status?: SortOrder
    commentToDelivery?: SortOrder
    userId?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Order"> | string
    productCount?: IntWithAggregatesFilter<"Order"> | number
    quantity?: IntWithAggregatesFilter<"Order"> | number
    measure?: IntWithAggregatesFilter<"Order"> | number
    tool?: IntWithAggregatesFilter<"Order"> | number
    total?: IntWithAggregatesFilter<"Order"> | number
    location?: StringWithAggregatesFilter<"Order"> | string
    address?: StringWithAggregatesFilter<"Order"> | string
    date?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    paymentType?: EnumpaymentTypeWithAggregatesFilter<"Order"> | $Enums.paymentType
    withDelivery?: BoolWithAggregatesFilter<"Order"> | boolean
    status?: EnumorderStatusWithAggregatesFilter<"Order"> | $Enums.orderStatus
    commentToDelivery?: StringWithAggregatesFilter<"Order"> | string
    userId?: StringWithAggregatesFilter<"Order"> | string
  }

  export type OrderProductsWhereInput = {
    AND?: OrderProductsWhereInput | OrderProductsWhereInput[]
    OR?: OrderProductsWhereInput[]
    NOT?: OrderProductsWhereInput | OrderProductsWhereInput[]
    id?: StringFilter<"OrderProducts"> | string
    orderId?: StringFilter<"OrderProducts"> | string
    productId?: StringFilter<"OrderProducts"> | string
    levelId?: StringFilter<"OrderProducts"> | string
    toolId?: StringFilter<"OrderProducts"> | string
    count?: IntFilter<"OrderProducts"> | number
    price?: IntFilter<"OrderProducts"> | number
    workingTime?: IntFilter<"OrderProducts"> | number
    timeUnit?: EnumMasterDailyFilter<"OrderProducts"> | $Enums.MasterDaily
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
    tool?: XOR<ToolsScalarRelationFilter, ToolsWhereInput>
  }

  export type OrderProductsOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    levelId?: SortOrder
    toolId?: SortOrder
    count?: SortOrder
    price?: SortOrder
    workingTime?: SortOrder
    timeUnit?: SortOrder
    order?: OrderOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
    level?: LevelOrderByWithRelationInput
    tool?: ToolsOrderByWithRelationInput
  }

  export type OrderProductsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderProductsWhereInput | OrderProductsWhereInput[]
    OR?: OrderProductsWhereInput[]
    NOT?: OrderProductsWhereInput | OrderProductsWhereInput[]
    orderId?: StringFilter<"OrderProducts"> | string
    productId?: StringFilter<"OrderProducts"> | string
    levelId?: StringFilter<"OrderProducts"> | string
    toolId?: StringFilter<"OrderProducts"> | string
    count?: IntFilter<"OrderProducts"> | number
    price?: IntFilter<"OrderProducts"> | number
    workingTime?: IntFilter<"OrderProducts"> | number
    timeUnit?: EnumMasterDailyFilter<"OrderProducts"> | $Enums.MasterDaily
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
    tool?: XOR<ToolsScalarRelationFilter, ToolsWhereInput>
  }, "id">

  export type OrderProductsOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    levelId?: SortOrder
    toolId?: SortOrder
    count?: SortOrder
    price?: SortOrder
    workingTime?: SortOrder
    timeUnit?: SortOrder
    _count?: OrderProductsCountOrderByAggregateInput
    _avg?: OrderProductsAvgOrderByAggregateInput
    _max?: OrderProductsMaxOrderByAggregateInput
    _min?: OrderProductsMinOrderByAggregateInput
    _sum?: OrderProductsSumOrderByAggregateInput
  }

  export type OrderProductsScalarWhereWithAggregatesInput = {
    AND?: OrderProductsScalarWhereWithAggregatesInput | OrderProductsScalarWhereWithAggregatesInput[]
    OR?: OrderProductsScalarWhereWithAggregatesInput[]
    NOT?: OrderProductsScalarWhereWithAggregatesInput | OrderProductsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OrderProducts"> | string
    orderId?: StringWithAggregatesFilter<"OrderProducts"> | string
    productId?: StringWithAggregatesFilter<"OrderProducts"> | string
    levelId?: StringWithAggregatesFilter<"OrderProducts"> | string
    toolId?: StringWithAggregatesFilter<"OrderProducts"> | string
    count?: IntWithAggregatesFilter<"OrderProducts"> | number
    price?: IntWithAggregatesFilter<"OrderProducts"> | number
    workingTime?: IntWithAggregatesFilter<"OrderProducts"> | number
    timeUnit?: EnumMasterDailyWithAggregatesFilter<"OrderProducts"> | $Enums.MasterDaily
  }

  export type OrderMastersWhereInput = {
    AND?: OrderMastersWhereInput | OrderMastersWhereInput[]
    OR?: OrderMastersWhereInput[]
    NOT?: OrderMastersWhereInput | OrderMastersWhereInput[]
    id?: StringFilter<"OrderMasters"> | string
    orderId?: StringFilter<"OrderMasters"> | string
    masterId?: StringFilter<"OrderMasters"> | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    master?: XOR<MasterScalarRelationFilter, MasterWhereInput>
  }

  export type OrderMastersOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    masterId?: SortOrder
    order?: OrderOrderByWithRelationInput
    master?: MasterOrderByWithRelationInput
  }

  export type OrderMastersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderMastersWhereInput | OrderMastersWhereInput[]
    OR?: OrderMastersWhereInput[]
    NOT?: OrderMastersWhereInput | OrderMastersWhereInput[]
    orderId?: StringFilter<"OrderMasters"> | string
    masterId?: StringFilter<"OrderMasters"> | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    master?: XOR<MasterScalarRelationFilter, MasterWhereInput>
  }, "id">

  export type OrderMastersOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    masterId?: SortOrder
    _count?: OrderMastersCountOrderByAggregateInput
    _max?: OrderMastersMaxOrderByAggregateInput
    _min?: OrderMastersMinOrderByAggregateInput
  }

  export type OrderMastersScalarWhereWithAggregatesInput = {
    AND?: OrderMastersScalarWhereWithAggregatesInput | OrderMastersScalarWhereWithAggregatesInput[]
    OR?: OrderMastersScalarWhereWithAggregatesInput[]
    NOT?: OrderMastersScalarWhereWithAggregatesInput | OrderMastersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OrderMasters"> | string
    orderId?: StringWithAggregatesFilter<"OrderMasters"> | string
    masterId?: StringWithAggregatesFilter<"OrderMasters"> | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    text?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    orderId?: StringFilter<"Comment"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    MasterRatings?: MasterRatingsListRelationFilter
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
    user?: UserOrderByWithRelationInput
    order?: OrderOrderByWithRelationInput
    MasterRatings?: MasterRatingsOrderByRelationAggregateInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    text?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    orderId?: StringFilter<"Comment"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    MasterRatings?: MasterRatingsListRelationFilter
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    text?: StringWithAggregatesFilter<"Comment"> | string
    userId?: StringWithAggregatesFilter<"Comment"> | string
    orderId?: StringWithAggregatesFilter<"Comment"> | string
  }

  export type MasterRatingsWhereInput = {
    AND?: MasterRatingsWhereInput | MasterRatingsWhereInput[]
    OR?: MasterRatingsWhereInput[]
    NOT?: MasterRatingsWhereInput | MasterRatingsWhereInput[]
    id?: StringFilter<"MasterRatings"> | string
    star?: FloatFilter<"MasterRatings"> | number
    masterId?: StringFilter<"MasterRatings"> | string
    commentId?: StringFilter<"MasterRatings"> | string
    comment?: XOR<CommentScalarRelationFilter, CommentWhereInput>
    master?: XOR<MasterScalarRelationFilter, MasterWhereInput>
  }

  export type MasterRatingsOrderByWithRelationInput = {
    id?: SortOrder
    star?: SortOrder
    masterId?: SortOrder
    commentId?: SortOrder
    comment?: CommentOrderByWithRelationInput
    master?: MasterOrderByWithRelationInput
  }

  export type MasterRatingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MasterRatingsWhereInput | MasterRatingsWhereInput[]
    OR?: MasterRatingsWhereInput[]
    NOT?: MasterRatingsWhereInput | MasterRatingsWhereInput[]
    star?: FloatFilter<"MasterRatings"> | number
    masterId?: StringFilter<"MasterRatings"> | string
    commentId?: StringFilter<"MasterRatings"> | string
    comment?: XOR<CommentScalarRelationFilter, CommentWhereInput>
    master?: XOR<MasterScalarRelationFilter, MasterWhereInput>
  }, "id">

  export type MasterRatingsOrderByWithAggregationInput = {
    id?: SortOrder
    star?: SortOrder
    masterId?: SortOrder
    commentId?: SortOrder
    _count?: MasterRatingsCountOrderByAggregateInput
    _avg?: MasterRatingsAvgOrderByAggregateInput
    _max?: MasterRatingsMaxOrderByAggregateInput
    _min?: MasterRatingsMinOrderByAggregateInput
    _sum?: MasterRatingsSumOrderByAggregateInput
  }

  export type MasterRatingsScalarWhereWithAggregatesInput = {
    AND?: MasterRatingsScalarWhereWithAggregatesInput | MasterRatingsScalarWhereWithAggregatesInput[]
    OR?: MasterRatingsScalarWhereWithAggregatesInput[]
    NOT?: MasterRatingsScalarWhereWithAggregatesInput | MasterRatingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MasterRatings"> | string
    star?: FloatWithAggregatesFilter<"MasterRatings"> | number
    masterId?: StringWithAggregatesFilter<"MasterRatings"> | string
    commentId?: StringWithAggregatesFilter<"MasterRatings"> | string
  }

  export type BasketWhereInput = {
    AND?: BasketWhereInput | BasketWhereInput[]
    OR?: BasketWhereInput[]
    NOT?: BasketWhereInput | BasketWhereInput[]
    id?: StringFilter<"Basket"> | string
    productId?: StringFilter<"Basket"> | string
    productCount?: IntFilter<"Basket"> | number
    quantity?: IntFilter<"Basket"> | number
    measure?: IntFilter<"Basket"> | number
    toolId?: StringFilter<"Basket"> | string
    total?: IntFilter<"Basket"> | number
    userId?: StringFilter<"Basket"> | string
    timeUnit?: EnumMasterDailyFilter<"Basket"> | $Enums.MasterDaily
    levelId?: StringFilter<"Basket"> | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    tool?: XOR<ToolsScalarRelationFilter, ToolsWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
  }

  export type BasketOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    productCount?: SortOrder
    quantity?: SortOrder
    measure?: SortOrder
    toolId?: SortOrder
    total?: SortOrder
    userId?: SortOrder
    timeUnit?: SortOrder
    levelId?: SortOrder
    product?: ProductOrderByWithRelationInput
    tool?: ToolsOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    level?: LevelOrderByWithRelationInput
  }

  export type BasketWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BasketWhereInput | BasketWhereInput[]
    OR?: BasketWhereInput[]
    NOT?: BasketWhereInput | BasketWhereInput[]
    productId?: StringFilter<"Basket"> | string
    productCount?: IntFilter<"Basket"> | number
    quantity?: IntFilter<"Basket"> | number
    measure?: IntFilter<"Basket"> | number
    toolId?: StringFilter<"Basket"> | string
    total?: IntFilter<"Basket"> | number
    userId?: StringFilter<"Basket"> | string
    timeUnit?: EnumMasterDailyFilter<"Basket"> | $Enums.MasterDaily
    levelId?: StringFilter<"Basket"> | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    tool?: XOR<ToolsScalarRelationFilter, ToolsWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
  }, "id">

  export type BasketOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    productCount?: SortOrder
    quantity?: SortOrder
    measure?: SortOrder
    toolId?: SortOrder
    total?: SortOrder
    userId?: SortOrder
    timeUnit?: SortOrder
    levelId?: SortOrder
    _count?: BasketCountOrderByAggregateInput
    _avg?: BasketAvgOrderByAggregateInput
    _max?: BasketMaxOrderByAggregateInput
    _min?: BasketMinOrderByAggregateInput
    _sum?: BasketSumOrderByAggregateInput
  }

  export type BasketScalarWhereWithAggregatesInput = {
    AND?: BasketScalarWhereWithAggregatesInput | BasketScalarWhereWithAggregatesInput[]
    OR?: BasketScalarWhereWithAggregatesInput[]
    NOT?: BasketScalarWhereWithAggregatesInput | BasketScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Basket"> | string
    productId?: StringWithAggregatesFilter<"Basket"> | string
    productCount?: IntWithAggregatesFilter<"Basket"> | number
    quantity?: IntWithAggregatesFilter<"Basket"> | number
    measure?: IntWithAggregatesFilter<"Basket"> | number
    toolId?: StringWithAggregatesFilter<"Basket"> | string
    total?: IntWithAggregatesFilter<"Basket"> | number
    userId?: StringWithAggregatesFilter<"Basket"> | string
    timeUnit?: EnumMasterDailyWithAggregatesFilter<"Basket"> | $Enums.MasterDaily
    levelId?: StringWithAggregatesFilter<"Basket"> | string
  }

  export type GeneralInfoWhereInput = {
    AND?: GeneralInfoWhereInput | GeneralInfoWhereInput[]
    OR?: GeneralInfoWhereInput[]
    NOT?: GeneralInfoWhereInput | GeneralInfoWhereInput[]
    id?: StringFilter<"GeneralInfo"> | string
    email?: StringFilter<"GeneralInfo"> | string
    links?: StringFilter<"GeneralInfo"> | string
    phone?: StringFilter<"GeneralInfo"> | string
  }

  export type GeneralInfoOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    links?: SortOrder
    phone?: SortOrder
  }

  export type GeneralInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GeneralInfoWhereInput | GeneralInfoWhereInput[]
    OR?: GeneralInfoWhereInput[]
    NOT?: GeneralInfoWhereInput | GeneralInfoWhereInput[]
    email?: StringFilter<"GeneralInfo"> | string
    links?: StringFilter<"GeneralInfo"> | string
    phone?: StringFilter<"GeneralInfo"> | string
  }, "id">

  export type GeneralInfoOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    links?: SortOrder
    phone?: SortOrder
    _count?: GeneralInfoCountOrderByAggregateInput
    _max?: GeneralInfoMaxOrderByAggregateInput
    _min?: GeneralInfoMinOrderByAggregateInput
  }

  export type GeneralInfoScalarWhereWithAggregatesInput = {
    AND?: GeneralInfoScalarWhereWithAggregatesInput | GeneralInfoScalarWhereWithAggregatesInput[]
    OR?: GeneralInfoScalarWhereWithAggregatesInput[]
    NOT?: GeneralInfoScalarWhereWithAggregatesInput | GeneralInfoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GeneralInfo"> | string
    email?: StringWithAggregatesFilter<"GeneralInfo"> | string
    links?: StringWithAggregatesFilter<"GeneralInfo"> | string
    phone?: StringWithAggregatesFilter<"GeneralInfo"> | string
  }

  export type ContactWhereInput = {
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    id?: StringFilter<"Contact"> | string
    name?: StringFilter<"Contact"> | string
    surName?: StringFilter<"Contact"> | string
    phone?: StringFilter<"Contact"> | string
    address?: StringFilter<"Contact"> | string
    message?: StringFilter<"Contact"> | string
  }

  export type ContactOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    surName?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    message?: SortOrder
  }

  export type ContactWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    name?: StringFilter<"Contact"> | string
    surName?: StringFilter<"Contact"> | string
    phone?: StringFilter<"Contact"> | string
    address?: StringFilter<"Contact"> | string
    message?: StringFilter<"Contact"> | string
  }, "id">

  export type ContactOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    surName?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    message?: SortOrder
    _count?: ContactCountOrderByAggregateInput
    _max?: ContactMaxOrderByAggregateInput
    _min?: ContactMinOrderByAggregateInput
  }

  export type ContactScalarWhereWithAggregatesInput = {
    AND?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    OR?: ContactScalarWhereWithAggregatesInput[]
    NOT?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Contact"> | string
    name?: StringWithAggregatesFilter<"Contact"> | string
    surName?: StringWithAggregatesFilter<"Contact"> | string
    phone?: StringWithAggregatesFilter<"Contact"> | string
    address?: StringWithAggregatesFilter<"Contact"> | string
    message?: StringWithAggregatesFilter<"Contact"> | string
  }

  export type FAQWhereInput = {
    AND?: FAQWhereInput | FAQWhereInput[]
    OR?: FAQWhereInput[]
    NOT?: FAQWhereInput | FAQWhereInput[]
    id?: StringFilter<"FAQ"> | string
    question?: StringFilter<"FAQ"> | string
    answer?: StringFilter<"FAQ"> | string
  }

  export type FAQOrderByWithRelationInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
  }

  export type FAQWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FAQWhereInput | FAQWhereInput[]
    OR?: FAQWhereInput[]
    NOT?: FAQWhereInput | FAQWhereInput[]
    question?: StringFilter<"FAQ"> | string
    answer?: StringFilter<"FAQ"> | string
  }, "id">

  export type FAQOrderByWithAggregationInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    _count?: FAQCountOrderByAggregateInput
    _max?: FAQMaxOrderByAggregateInput
    _min?: FAQMinOrderByAggregateInput
  }

  export type FAQScalarWhereWithAggregatesInput = {
    AND?: FAQScalarWhereWithAggregatesInput | FAQScalarWhereWithAggregatesInput[]
    OR?: FAQScalarWhereWithAggregatesInput[]
    NOT?: FAQScalarWhereWithAggregatesInput | FAQScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FAQ"> | string
    question?: StringWithAggregatesFilter<"FAQ"> | string
    answer?: StringWithAggregatesFilter<"FAQ"> | string
  }

  export type showCaseWhereInput = {
    AND?: showCaseWhereInput | showCaseWhereInput[]
    OR?: showCaseWhereInput[]
    NOT?: showCaseWhereInput | showCaseWhereInput[]
    id?: StringFilter<"showCase"> | string
    nameUz?: StringFilter<"showCase"> | string
    nameRU?: StringFilter<"showCase"> | string
    nameEng?: StringFilter<"showCase"> | string
    descriptionUz?: StringFilter<"showCase"> | string
    descriptionRU?: StringFilter<"showCase"> | string
    descriptionEng?: StringFilter<"showCase"> | string
    image?: StringFilter<"showCase"> | string
    link?: StringFilter<"showCase"> | string
  }

  export type showCaseOrderByWithRelationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    descriptionUz?: SortOrder
    descriptionRU?: SortOrder
    descriptionEng?: SortOrder
    image?: SortOrder
    link?: SortOrder
  }

  export type showCaseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: showCaseWhereInput | showCaseWhereInput[]
    OR?: showCaseWhereInput[]
    NOT?: showCaseWhereInput | showCaseWhereInput[]
    nameUz?: StringFilter<"showCase"> | string
    nameRU?: StringFilter<"showCase"> | string
    nameEng?: StringFilter<"showCase"> | string
    descriptionUz?: StringFilter<"showCase"> | string
    descriptionRU?: StringFilter<"showCase"> | string
    descriptionEng?: StringFilter<"showCase"> | string
    image?: StringFilter<"showCase"> | string
    link?: StringFilter<"showCase"> | string
  }, "id">

  export type showCaseOrderByWithAggregationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    descriptionUz?: SortOrder
    descriptionRU?: SortOrder
    descriptionEng?: SortOrder
    image?: SortOrder
    link?: SortOrder
    _count?: showCaseCountOrderByAggregateInput
    _max?: showCaseMaxOrderByAggregateInput
    _min?: showCaseMinOrderByAggregateInput
  }

  export type showCaseScalarWhereWithAggregatesInput = {
    AND?: showCaseScalarWhereWithAggregatesInput | showCaseScalarWhereWithAggregatesInput[]
    OR?: showCaseScalarWhereWithAggregatesInput[]
    NOT?: showCaseScalarWhereWithAggregatesInput | showCaseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"showCase"> | string
    nameUz?: StringWithAggregatesFilter<"showCase"> | string
    nameRU?: StringWithAggregatesFilter<"showCase"> | string
    nameEng?: StringWithAggregatesFilter<"showCase"> | string
    descriptionUz?: StringWithAggregatesFilter<"showCase"> | string
    descriptionRU?: StringWithAggregatesFilter<"showCase"> | string
    descriptionEng?: StringWithAggregatesFilter<"showCase"> | string
    image?: StringWithAggregatesFilter<"showCase"> | string
    link?: StringWithAggregatesFilter<"showCase"> | string
  }

  export type PartnersWhereInput = {
    AND?: PartnersWhereInput | PartnersWhereInput[]
    OR?: PartnersWhereInput[]
    NOT?: PartnersWhereInput | PartnersWhereInput[]
    id?: StringFilter<"Partners"> | string
    nameUz?: StringFilter<"Partners"> | string
    nameRU?: StringFilter<"Partners"> | string
    nameEng?: StringFilter<"Partners"> | string
    image?: StringFilter<"Partners"> | string
  }

  export type PartnersOrderByWithRelationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    image?: SortOrder
  }

  export type PartnersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PartnersWhereInput | PartnersWhereInput[]
    OR?: PartnersWhereInput[]
    NOT?: PartnersWhereInput | PartnersWhereInput[]
    nameUz?: StringFilter<"Partners"> | string
    nameRU?: StringFilter<"Partners"> | string
    nameEng?: StringFilter<"Partners"> | string
    image?: StringFilter<"Partners"> | string
  }, "id">

  export type PartnersOrderByWithAggregationInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    image?: SortOrder
    _count?: PartnersCountOrderByAggregateInput
    _max?: PartnersMaxOrderByAggregateInput
    _min?: PartnersMinOrderByAggregateInput
  }

  export type PartnersScalarWhereWithAggregatesInput = {
    AND?: PartnersScalarWhereWithAggregatesInput | PartnersScalarWhereWithAggregatesInput[]
    OR?: PartnersScalarWhereWithAggregatesInput[]
    NOT?: PartnersScalarWhereWithAggregatesInput | PartnersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Partners"> | string
    nameUz?: StringWithAggregatesFilter<"Partners"> | string
    nameRU?: StringWithAggregatesFilter<"Partners"> | string
    nameEng?: StringWithAggregatesFilter<"Partners"> | string
    image?: StringWithAggregatesFilter<"Partners"> | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
  }, "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    ipAddress?: StringNullableWithAggregatesFilter<"Session"> | string | null
  }

  export type RegionCreateInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    User?: UserCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    User?: UserUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    User?: UserUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type RegionCreateManyInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
  }

  export type RegionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
  }

  export type RegionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
  }

  export type BrandCreateInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    Tools?: ToolsCreateNestedManyWithoutBrandInput
  }

  export type BrandUncheckedCreateInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    Tools?: ToolsUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    Tools?: ToolsUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    Tools?: ToolsUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type BrandCreateManyInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
  }

  export type BrandUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
  }

  export type BrandUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
  }

  export type CapacityCreateInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    Tools?: ToolsCreateNestedManyWithoutCapacityInput
  }

  export type CapacityUncheckedCreateInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    Tools?: ToolsUncheckedCreateNestedManyWithoutCapacityInput
  }

  export type CapacityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    Tools?: ToolsUpdateManyWithoutCapacityNestedInput
  }

  export type CapacityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    Tools?: ToolsUncheckedUpdateManyWithoutCapacityNestedInput
  }

  export type CapacityCreateManyInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
  }

  export type CapacityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
  }

  export type CapacityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
  }

  export type SizeCreateInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    Tools?: ToolsCreateNestedManyWithoutSizeInput
  }

  export type SizeUncheckedCreateInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    Tools?: ToolsUncheckedCreateNestedManyWithoutSizeInput
  }

  export type SizeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    Tools?: ToolsUpdateManyWithoutSizeNestedInput
  }

  export type SizeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    Tools?: ToolsUncheckedUpdateManyWithoutSizeNestedInput
  }

  export type SizeCreateManyInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
  }

  export type SizeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
  }

  export type SizeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id?: string
    fullName: string
    password: string
    phoneNumber: string
    IIN?: string | null
    MFO?: string | null
    RS?: string | null
    Bank?: string | null
    OKED?: string | null
    ADDRESS: string
    role: $Enums.userRole
    status: $Enums.userStatus
    region: RegionCreateNestedOneWithoutUserInput
    Basket?: BasketCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Order?: OrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    fullName: string
    password: string
    phoneNumber: string
    regionId: string
    IIN?: string | null
    MFO?: string | null
    RS?: string | null
    Bank?: string | null
    OKED?: string | null
    ADDRESS: string
    role: $Enums.userRole
    status: $Enums.userStatus
    Basket?: BasketUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Order?: OrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    IIN?: NullableStringFieldUpdateOperationsInput | string | null
    MFO?: NullableStringFieldUpdateOperationsInput | string | null
    RS?: NullableStringFieldUpdateOperationsInput | string | null
    Bank?: NullableStringFieldUpdateOperationsInput | string | null
    OKED?: NullableStringFieldUpdateOperationsInput | string | null
    ADDRESS?: StringFieldUpdateOperationsInput | string
    role?: EnumuserRoleFieldUpdateOperationsInput | $Enums.userRole
    status?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    region?: RegionUpdateOneRequiredWithoutUserNestedInput
    Basket?: BasketUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Order?: OrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    regionId?: StringFieldUpdateOperationsInput | string
    IIN?: NullableStringFieldUpdateOperationsInput | string | null
    MFO?: NullableStringFieldUpdateOperationsInput | string | null
    RS?: NullableStringFieldUpdateOperationsInput | string | null
    Bank?: NullableStringFieldUpdateOperationsInput | string | null
    OKED?: NullableStringFieldUpdateOperationsInput | string | null
    ADDRESS?: StringFieldUpdateOperationsInput | string
    role?: EnumuserRoleFieldUpdateOperationsInput | $Enums.userRole
    status?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    Basket?: BasketUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Order?: OrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    fullName: string
    password: string
    phoneNumber: string
    regionId: string
    IIN?: string | null
    MFO?: string | null
    RS?: string | null
    Bank?: string | null
    OKED?: string | null
    ADDRESS: string
    role: $Enums.userRole
    status: $Enums.userStatus
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    IIN?: NullableStringFieldUpdateOperationsInput | string | null
    MFO?: NullableStringFieldUpdateOperationsInput | string | null
    RS?: NullableStringFieldUpdateOperationsInput | string | null
    Bank?: NullableStringFieldUpdateOperationsInput | string | null
    OKED?: NullableStringFieldUpdateOperationsInput | string | null
    ADDRESS?: StringFieldUpdateOperationsInput | string
    role?: EnumuserRoleFieldUpdateOperationsInput | $Enums.userRole
    status?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    regionId?: StringFieldUpdateOperationsInput | string
    IIN?: NullableStringFieldUpdateOperationsInput | string | null
    MFO?: NullableStringFieldUpdateOperationsInput | string | null
    RS?: NullableStringFieldUpdateOperationsInput | string | null
    Bank?: NullableStringFieldUpdateOperationsInput | string | null
    OKED?: NullableStringFieldUpdateOperationsInput | string | null
    ADDRESS?: StringFieldUpdateOperationsInput | string
    role?: EnumuserRoleFieldUpdateOperationsInput | $Enums.userRole
    status?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
  }

  export type ToolsCreateInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    price: number
    quantity: number
    code: number
    image: string
    isActive: boolean
    brand: BrandCreateNestedOneWithoutToolsInput
    capacity: CapacityCreateNestedOneWithoutToolsInput
    size: SizeCreateNestedOneWithoutToolsInput
    Basket?: BasketCreateNestedManyWithoutToolInput
    OrderProducts?: OrderProductsCreateNestedManyWithoutToolInput
    ProductTools?: ProductToolsCreateNestedManyWithoutToolInput
  }

  export type ToolsUncheckedCreateInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    price: number
    quantity: number
    code: number
    image: string
    brandId: string
    isActive: boolean
    capacityId: string
    sizeId: string
    Basket?: BasketUncheckedCreateNestedManyWithoutToolInput
    OrderProducts?: OrderProductsUncheckedCreateNestedManyWithoutToolInput
    ProductTools?: ProductToolsUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    brand?: BrandUpdateOneRequiredWithoutToolsNestedInput
    capacity?: CapacityUpdateOneRequiredWithoutToolsNestedInput
    size?: SizeUpdateOneRequiredWithoutToolsNestedInput
    Basket?: BasketUpdateManyWithoutToolNestedInput
    OrderProducts?: OrderProductsUpdateManyWithoutToolNestedInput
    ProductTools?: ProductToolsUpdateManyWithoutToolNestedInput
  }

  export type ToolsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacityId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    Basket?: BasketUncheckedUpdateManyWithoutToolNestedInput
    OrderProducts?: OrderProductsUncheckedUpdateManyWithoutToolNestedInput
    ProductTools?: ProductToolsUncheckedUpdateManyWithoutToolNestedInput
  }

  export type ToolsCreateManyInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    price: number
    quantity: number
    code: number
    image: string
    brandId: string
    isActive: boolean
    capacityId: string
    sizeId: string
  }

  export type ToolsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ToolsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacityId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
  }

  export type MasterCreateInput = {
    id?: string
    fullName: string
    phone: string
    isActive: boolean
    year: number
    image: string
    passportImage: string
    about: string
    MasterProd?: MasterProdCreateNestedManyWithoutMasterInput
    OrderMasters?: OrderMastersCreateNestedManyWithoutMasterInput
    MasterRatings?: MasterRatingsCreateNestedManyWithoutMasterInput
  }

  export type MasterUncheckedCreateInput = {
    id?: string
    fullName: string
    phone: string
    isActive: boolean
    year: number
    image: string
    passportImage: string
    about: string
    MasterProd?: MasterProdUncheckedCreateNestedManyWithoutMasterInput
    OrderMasters?: OrderMastersUncheckedCreateNestedManyWithoutMasterInput
    MasterRatings?: MasterRatingsUncheckedCreateNestedManyWithoutMasterInput
  }

  export type MasterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    passportImage?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    MasterProd?: MasterProdUpdateManyWithoutMasterNestedInput
    OrderMasters?: OrderMastersUpdateManyWithoutMasterNestedInput
    MasterRatings?: MasterRatingsUpdateManyWithoutMasterNestedInput
  }

  export type MasterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    passportImage?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    MasterProd?: MasterProdUncheckedUpdateManyWithoutMasterNestedInput
    OrderMasters?: OrderMastersUncheckedUpdateManyWithoutMasterNestedInput
    MasterRatings?: MasterRatingsUncheckedUpdateManyWithoutMasterNestedInput
  }

  export type MasterCreateManyInput = {
    id?: string
    fullName: string
    phone: string
    isActive: boolean
    year: number
    image: string
    passportImage: string
    about: string
  }

  export type MasterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    passportImage?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
  }

  export type MasterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    passportImage?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
  }

  export type MasterProdCreateInput = {
    id?: string
    minWorkingHour: number
    priceHourly: number
    priceDaily: number
    experience: number
    master: MasterCreateNestedOneWithoutMasterProdInput
    product: ProductCreateNestedOneWithoutMasterProdInput
    level: LevelCreateNestedOneWithoutMasterProdInput
  }

  export type MasterProdUncheckedCreateInput = {
    id?: string
    masterId: string
    productId: string
    minWorkingHour: number
    levelId: string
    priceHourly: number
    priceDaily: number
    experience: number
  }

  export type MasterProdUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    master?: MasterUpdateOneRequiredWithoutMasterProdNestedInput
    product?: ProductUpdateOneRequiredWithoutMasterProdNestedInput
    level?: LevelUpdateOneRequiredWithoutMasterProdNestedInput
  }

  export type MasterProdUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    masterId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    levelId?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
  }

  export type MasterProdCreateManyInput = {
    id?: string
    masterId: string
    productId: string
    minWorkingHour: number
    levelId: string
    priceHourly: number
    priceDaily: number
    experience: number
  }

  export type MasterProdUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
  }

  export type MasterProdUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    masterId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    levelId?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
  }

  export type ProductCreateInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    image: string
    isActive: boolean
    MasterProd?: MasterProdCreateNestedManyWithoutProductInput
    Basket?: BasketCreateNestedManyWithoutProductInput
    productLevels?: ProductLevelsCreateNestedManyWithoutProductInput
    ProductTools?: ProductToolsCreateNestedManyWithoutProductInput
    OrderProducts?: OrderProductsCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    image: string
    isActive: boolean
    MasterProd?: MasterProdUncheckedCreateNestedManyWithoutProductInput
    Basket?: BasketUncheckedCreateNestedManyWithoutProductInput
    productLevels?: ProductLevelsUncheckedCreateNestedManyWithoutProductInput
    ProductTools?: ProductToolsUncheckedCreateNestedManyWithoutProductInput
    OrderProducts?: OrderProductsUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    MasterProd?: MasterProdUpdateManyWithoutProductNestedInput
    Basket?: BasketUpdateManyWithoutProductNestedInput
    productLevels?: ProductLevelsUpdateManyWithoutProductNestedInput
    ProductTools?: ProductToolsUpdateManyWithoutProductNestedInput
    OrderProducts?: OrderProductsUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    MasterProd?: MasterProdUncheckedUpdateManyWithoutProductNestedInput
    Basket?: BasketUncheckedUpdateManyWithoutProductNestedInput
    productLevels?: ProductLevelsUncheckedUpdateManyWithoutProductNestedInput
    ProductTools?: ProductToolsUncheckedUpdateManyWithoutProductNestedInput
    OrderProducts?: OrderProductsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    image: string
    isActive: boolean
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LevelCreateInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    MasterProd?: MasterProdCreateNestedManyWithoutLevelInput
    productLevels?: ProductLevelsCreateNestedManyWithoutLevelInput
    OrderProducts?: OrderProductsCreateNestedManyWithoutLevelInput
    Basket?: BasketCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    MasterProd?: MasterProdUncheckedCreateNestedManyWithoutLevelInput
    productLevels?: ProductLevelsUncheckedCreateNestedManyWithoutLevelInput
    OrderProducts?: OrderProductsUncheckedCreateNestedManyWithoutLevelInput
    Basket?: BasketUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    MasterProd?: MasterProdUpdateManyWithoutLevelNestedInput
    productLevels?: ProductLevelsUpdateManyWithoutLevelNestedInput
    OrderProducts?: OrderProductsUpdateManyWithoutLevelNestedInput
    Basket?: BasketUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    MasterProd?: MasterProdUncheckedUpdateManyWithoutLevelNestedInput
    productLevels?: ProductLevelsUncheckedUpdateManyWithoutLevelNestedInput
    OrderProducts?: OrderProductsUncheckedUpdateManyWithoutLevelNestedInput
    Basket?: BasketUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type LevelCreateManyInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
  }

  export type LevelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
  }

  export type LevelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
  }

  export type ProductLevelsCreateInput = {
    id?: string
    priceHourly: number
    priceDaily: number
    minWorkingHour: number
    level: LevelCreateNestedOneWithoutProductLevelsInput
    product: ProductCreateNestedOneWithoutProductLevelsInput
  }

  export type ProductLevelsUncheckedCreateInput = {
    id?: string
    levelId: string
    productId: string
    priceHourly: number
    priceDaily: number
    minWorkingHour: number
  }

  export type ProductLevelsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    level?: LevelUpdateOneRequiredWithoutProductLevelsNestedInput
    product?: ProductUpdateOneRequiredWithoutProductLevelsNestedInput
  }

  export type ProductLevelsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    levelId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    minWorkingHour?: IntFieldUpdateOperationsInput | number
  }

  export type ProductLevelsCreateManyInput = {
    id?: string
    levelId: string
    productId: string
    priceHourly: number
    priceDaily: number
    minWorkingHour: number
  }

  export type ProductLevelsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    minWorkingHour?: IntFieldUpdateOperationsInput | number
  }

  export type ProductLevelsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    levelId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    minWorkingHour?: IntFieldUpdateOperationsInput | number
  }

  export type ProductToolsCreateInput = {
    id?: string
    tool: ToolsCreateNestedOneWithoutProductToolsInput
    product: ProductCreateNestedOneWithoutProductToolsInput
  }

  export type ProductToolsUncheckedCreateInput = {
    id?: string
    toolId: string
    productId: string
  }

  export type ProductToolsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tool?: ToolsUpdateOneRequiredWithoutProductToolsNestedInput
    product?: ProductUpdateOneRequiredWithoutProductToolsNestedInput
  }

  export type ProductToolsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    toolId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductToolsCreateManyInput = {
    id?: string
    toolId: string
    productId: string
  }

  export type ProductToolsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ProductToolsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    toolId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type OrderCreateInput = {
    id?: string
    productCount: number
    quantity: number
    measure: number
    tool: number
    total: number
    location: string
    address: string
    date: Date | string
    paymentType: $Enums.paymentType
    withDelivery: boolean
    status: $Enums.orderStatus
    commentToDelivery: string
    user: UserCreateNestedOneWithoutOrderInput
    OrderProducts?: OrderProductsCreateNestedManyWithoutOrderInput
    OrderMasters?: OrderMastersCreateNestedManyWithoutOrderInput
    Comment?: CommentCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: string
    productCount: number
    quantity: number
    measure: number
    tool: number
    total: number
    location: string
    address: string
    date: Date | string
    paymentType: $Enums.paymentType
    withDelivery: boolean
    status: $Enums.orderStatus
    commentToDelivery: string
    userId: string
    OrderProducts?: OrderProductsUncheckedCreateNestedManyWithoutOrderInput
    OrderMasters?: OrderMastersUncheckedCreateNestedManyWithoutOrderInput
    Comment?: CommentUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    tool?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumpaymentTypeFieldUpdateOperationsInput | $Enums.paymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumorderStatusFieldUpdateOperationsInput | $Enums.orderStatus
    commentToDelivery?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutOrderNestedInput
    OrderProducts?: OrderProductsUpdateManyWithoutOrderNestedInput
    OrderMasters?: OrderMastersUpdateManyWithoutOrderNestedInput
    Comment?: CommentUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    tool?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumpaymentTypeFieldUpdateOperationsInput | $Enums.paymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumorderStatusFieldUpdateOperationsInput | $Enums.orderStatus
    commentToDelivery?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    OrderProducts?: OrderProductsUncheckedUpdateManyWithoutOrderNestedInput
    OrderMasters?: OrderMastersUncheckedUpdateManyWithoutOrderNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: string
    productCount: number
    quantity: number
    measure: number
    tool: number
    total: number
    location: string
    address: string
    date: Date | string
    paymentType: $Enums.paymentType
    withDelivery: boolean
    status: $Enums.orderStatus
    commentToDelivery: string
    userId: string
  }

  export type OrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    tool?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumpaymentTypeFieldUpdateOperationsInput | $Enums.paymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumorderStatusFieldUpdateOperationsInput | $Enums.orderStatus
    commentToDelivery?: StringFieldUpdateOperationsInput | string
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    tool?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumpaymentTypeFieldUpdateOperationsInput | $Enums.paymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumorderStatusFieldUpdateOperationsInput | $Enums.orderStatus
    commentToDelivery?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type OrderProductsCreateInput = {
    id?: string
    count: number
    price: number
    workingTime: number
    timeUnit: $Enums.MasterDaily
    order: OrderCreateNestedOneWithoutOrderProductsInput
    product: ProductCreateNestedOneWithoutOrderProductsInput
    level: LevelCreateNestedOneWithoutOrderProductsInput
    tool: ToolsCreateNestedOneWithoutOrderProductsInput
  }

  export type OrderProductsUncheckedCreateInput = {
    id?: string
    orderId: string
    productId: string
    levelId: string
    toolId: string
    count: number
    price: number
    workingTime: number
    timeUnit: $Enums.MasterDaily
  }

  export type OrderProductsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    workingTime?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
    order?: OrderUpdateOneRequiredWithoutOrderProductsNestedInput
    product?: ProductUpdateOneRequiredWithoutOrderProductsNestedInput
    level?: LevelUpdateOneRequiredWithoutOrderProductsNestedInput
    tool?: ToolsUpdateOneRequiredWithoutOrderProductsNestedInput
  }

  export type OrderProductsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    levelId?: StringFieldUpdateOperationsInput | string
    toolId?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    workingTime?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
  }

  export type OrderProductsCreateManyInput = {
    id?: string
    orderId: string
    productId: string
    levelId: string
    toolId: string
    count: number
    price: number
    workingTime: number
    timeUnit: $Enums.MasterDaily
  }

  export type OrderProductsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    workingTime?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
  }

  export type OrderProductsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    levelId?: StringFieldUpdateOperationsInput | string
    toolId?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    workingTime?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
  }

  export type OrderMastersCreateInput = {
    id?: string
    order: OrderCreateNestedOneWithoutOrderMastersInput
    master: MasterCreateNestedOneWithoutOrderMastersInput
  }

  export type OrderMastersUncheckedCreateInput = {
    id?: string
    orderId: string
    masterId: string
  }

  export type OrderMastersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: OrderUpdateOneRequiredWithoutOrderMastersNestedInput
    master?: MasterUpdateOneRequiredWithoutOrderMastersNestedInput
  }

  export type OrderMastersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    masterId?: StringFieldUpdateOperationsInput | string
  }

  export type OrderMastersCreateManyInput = {
    id?: string
    orderId: string
    masterId: string
  }

  export type OrderMastersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type OrderMastersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    masterId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateInput = {
    id?: string
    text: string
    user: UserCreateNestedOneWithoutCommentInput
    order: OrderCreateNestedOneWithoutCommentInput
    MasterRatings?: MasterRatingsCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    text: string
    userId: string
    orderId: string
    MasterRatings?: MasterRatingsUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutCommentNestedInput
    order?: OrderUpdateOneRequiredWithoutCommentNestedInput
    MasterRatings?: MasterRatingsUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    MasterRatings?: MasterRatingsUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentCreateManyInput = {
    id?: string
    text: string
    userId: string
    orderId: string
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
  }

  export type MasterRatingsCreateInput = {
    id?: string
    star: number
    comment: CommentCreateNestedOneWithoutMasterRatingsInput
    master: MasterCreateNestedOneWithoutMasterRatingsInput
  }

  export type MasterRatingsUncheckedCreateInput = {
    id?: string
    star: number
    masterId: string
    commentId: string
  }

  export type MasterRatingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    comment?: CommentUpdateOneRequiredWithoutMasterRatingsNestedInput
    master?: MasterUpdateOneRequiredWithoutMasterRatingsNestedInput
  }

  export type MasterRatingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    masterId?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
  }

  export type MasterRatingsCreateManyInput = {
    id?: string
    star: number
    masterId: string
    commentId: string
  }

  export type MasterRatingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
  }

  export type MasterRatingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    masterId?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
  }

  export type BasketCreateInput = {
    id?: string
    productCount: number
    quantity: number
    measure: number
    total: number
    timeUnit: $Enums.MasterDaily
    product: ProductCreateNestedOneWithoutBasketInput
    tool: ToolsCreateNestedOneWithoutBasketInput
    user: UserCreateNestedOneWithoutBasketInput
    level: LevelCreateNestedOneWithoutBasketInput
  }

  export type BasketUncheckedCreateInput = {
    id?: string
    productId: string
    productCount: number
    quantity: number
    measure: number
    toolId: string
    total: number
    userId: string
    timeUnit: $Enums.MasterDaily
    levelId: string
  }

  export type BasketUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
    product?: ProductUpdateOneRequiredWithoutBasketNestedInput
    tool?: ToolsUpdateOneRequiredWithoutBasketNestedInput
    user?: UserUpdateOneRequiredWithoutBasketNestedInput
    level?: LevelUpdateOneRequiredWithoutBasketNestedInput
  }

  export type BasketUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    toolId?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
    levelId?: StringFieldUpdateOperationsInput | string
  }

  export type BasketCreateManyInput = {
    id?: string
    productId: string
    productCount: number
    quantity: number
    measure: number
    toolId: string
    total: number
    userId: string
    timeUnit: $Enums.MasterDaily
    levelId: string
  }

  export type BasketUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
  }

  export type BasketUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    toolId?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
    levelId?: StringFieldUpdateOperationsInput | string
  }

  export type GeneralInfoCreateInput = {
    id?: string
    email: string
    links: string
    phone: string
  }

  export type GeneralInfoUncheckedCreateInput = {
    id?: string
    email: string
    links: string
    phone: string
  }

  export type GeneralInfoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    links?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type GeneralInfoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    links?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type GeneralInfoCreateManyInput = {
    id?: string
    email: string
    links: string
    phone: string
  }

  export type GeneralInfoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    links?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type GeneralInfoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    links?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type ContactCreateInput = {
    id?: string
    name: string
    surName: string
    phone: string
    address: string
    message: string
  }

  export type ContactUncheckedCreateInput = {
    id?: string
    name: string
    surName: string
    phone: string
    address: string
    message: string
  }

  export type ContactUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ContactUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ContactCreateManyInput = {
    id?: string
    name: string
    surName: string
    phone: string
    address: string
    message: string
  }

  export type ContactUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ContactUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type FAQCreateInput = {
    id?: string
    question: string
    answer: string
  }

  export type FAQUncheckedCreateInput = {
    id?: string
    question: string
    answer: string
  }

  export type FAQUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type FAQUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type FAQCreateManyInput = {
    id?: string
    question: string
    answer: string
  }

  export type FAQUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type FAQUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type showCaseCreateInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    image: string
    link: string
  }

  export type showCaseUncheckedCreateInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    image: string
    link: string
  }

  export type showCaseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type showCaseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type showCaseCreateManyInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    image: string
    link: string
  }

  export type showCaseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type showCaseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type PartnersCreateInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    image: string
  }

  export type PartnersUncheckedCreateInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    image: string
  }

  export type PartnersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type PartnersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type PartnersCreateManyInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    image: string
  }

  export type PartnersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type PartnersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateInput = {
    id?: string
    userId: string
    ipAddress?: string | null
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    userId: string
    ipAddress?: string | null
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateManyInput = {
    id?: string
    userId: string
    ipAddress?: string | null
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RegionCountOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
  }

  export type RegionMaxOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
  }

  export type RegionMinOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type ToolsListRelationFilter = {
    every?: ToolsWhereInput
    some?: ToolsWhereInput
    none?: ToolsWhereInput
  }

  export type ToolsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BrandCountOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
  }

  export type BrandMaxOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
  }

  export type BrandMinOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
  }

  export type CapacityCountOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
  }

  export type CapacityMaxOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
  }

  export type CapacityMinOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
  }

  export type SizeCountOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
  }

  export type SizeMaxOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
  }

  export type SizeMinOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumuserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.userRole | EnumuserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.userRole[] | ListEnumuserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.userRole[] | ListEnumuserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumuserRoleFilter<$PrismaModel> | $Enums.userRole
  }

  export type EnumuserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.userStatus | EnumuserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumuserStatusFilter<$PrismaModel> | $Enums.userStatus
  }

  export type RegionScalarRelationFilter = {
    is?: RegionWhereInput
    isNot?: RegionWhereInput
  }

  export type BasketListRelationFilter = {
    every?: BasketWhereInput
    some?: BasketWhereInput
    none?: BasketWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BasketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    regionId?: SortOrder
    IIN?: SortOrder
    MFO?: SortOrder
    RS?: SortOrder
    Bank?: SortOrder
    OKED?: SortOrder
    ADDRESS?: SortOrder
    role?: SortOrder
    status?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    regionId?: SortOrder
    IIN?: SortOrder
    MFO?: SortOrder
    RS?: SortOrder
    Bank?: SortOrder
    OKED?: SortOrder
    ADDRESS?: SortOrder
    role?: SortOrder
    status?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    regionId?: SortOrder
    IIN?: SortOrder
    MFO?: SortOrder
    RS?: SortOrder
    Bank?: SortOrder
    OKED?: SortOrder
    ADDRESS?: SortOrder
    role?: SortOrder
    status?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumuserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.userRole | EnumuserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.userRole[] | ListEnumuserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.userRole[] | ListEnumuserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumuserRoleWithAggregatesFilter<$PrismaModel> | $Enums.userRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuserRoleFilter<$PrismaModel>
    _max?: NestedEnumuserRoleFilter<$PrismaModel>
  }

  export type EnumuserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.userStatus | EnumuserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumuserStatusWithAggregatesFilter<$PrismaModel> | $Enums.userStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuserStatusFilter<$PrismaModel>
    _max?: NestedEnumuserStatusFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BrandScalarRelationFilter = {
    is?: BrandWhereInput
    isNot?: BrandWhereInput
  }

  export type CapacityScalarRelationFilter = {
    is?: CapacityWhereInput
    isNot?: CapacityWhereInput
  }

  export type SizeScalarRelationFilter = {
    is?: SizeWhereInput
    isNot?: SizeWhereInput
  }

  export type OrderProductsListRelationFilter = {
    every?: OrderProductsWhereInput
    some?: OrderProductsWhereInput
    none?: OrderProductsWhereInput
  }

  export type ProductToolsListRelationFilter = {
    every?: ProductToolsWhereInput
    some?: ProductToolsWhereInput
    none?: ProductToolsWhereInput
  }

  export type OrderProductsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductToolsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ToolsCountOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    descriptionUz?: SortOrder
    descriptionRU?: SortOrder
    descriptionEng?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
    image?: SortOrder
    brandId?: SortOrder
    isActive?: SortOrder
    capacityId?: SortOrder
    sizeId?: SortOrder
  }

  export type ToolsAvgOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
  }

  export type ToolsMaxOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    descriptionUz?: SortOrder
    descriptionRU?: SortOrder
    descriptionEng?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
    image?: SortOrder
    brandId?: SortOrder
    isActive?: SortOrder
    capacityId?: SortOrder
    sizeId?: SortOrder
  }

  export type ToolsMinOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    descriptionUz?: SortOrder
    descriptionRU?: SortOrder
    descriptionEng?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
    image?: SortOrder
    brandId?: SortOrder
    isActive?: SortOrder
    capacityId?: SortOrder
    sizeId?: SortOrder
  }

  export type ToolsSumOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type MasterProdListRelationFilter = {
    every?: MasterProdWhereInput
    some?: MasterProdWhereInput
    none?: MasterProdWhereInput
  }

  export type OrderMastersListRelationFilter = {
    every?: OrderMastersWhereInput
    some?: OrderMastersWhereInput
    none?: OrderMastersWhereInput
  }

  export type MasterRatingsListRelationFilter = {
    every?: MasterRatingsWhereInput
    some?: MasterRatingsWhereInput
    none?: MasterRatingsWhereInput
  }

  export type MasterProdOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderMastersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MasterRatingsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MasterCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    phone?: SortOrder
    isActive?: SortOrder
    year?: SortOrder
    image?: SortOrder
    passportImage?: SortOrder
    about?: SortOrder
  }

  export type MasterAvgOrderByAggregateInput = {
    year?: SortOrder
  }

  export type MasterMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    phone?: SortOrder
    isActive?: SortOrder
    year?: SortOrder
    image?: SortOrder
    passportImage?: SortOrder
    about?: SortOrder
  }

  export type MasterMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    phone?: SortOrder
    isActive?: SortOrder
    year?: SortOrder
    image?: SortOrder
    passportImage?: SortOrder
    about?: SortOrder
  }

  export type MasterSumOrderByAggregateInput = {
    year?: SortOrder
  }

  export type MasterScalarRelationFilter = {
    is?: MasterWhereInput
    isNot?: MasterWhereInput
  }

  export type ProductScalarRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type LevelScalarRelationFilter = {
    is?: LevelWhereInput
    isNot?: LevelWhereInput
  }

  export type MasterProdCountOrderByAggregateInput = {
    id?: SortOrder
    masterId?: SortOrder
    productId?: SortOrder
    minWorkingHour?: SortOrder
    levelId?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    experience?: SortOrder
  }

  export type MasterProdAvgOrderByAggregateInput = {
    minWorkingHour?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    experience?: SortOrder
  }

  export type MasterProdMaxOrderByAggregateInput = {
    id?: SortOrder
    masterId?: SortOrder
    productId?: SortOrder
    minWorkingHour?: SortOrder
    levelId?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    experience?: SortOrder
  }

  export type MasterProdMinOrderByAggregateInput = {
    id?: SortOrder
    masterId?: SortOrder
    productId?: SortOrder
    minWorkingHour?: SortOrder
    levelId?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    experience?: SortOrder
  }

  export type MasterProdSumOrderByAggregateInput = {
    minWorkingHour?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    experience?: SortOrder
  }

  export type ProductLevelsListRelationFilter = {
    every?: ProductLevelsWhereInput
    some?: ProductLevelsWhereInput
    none?: ProductLevelsWhereInput
  }

  export type ProductLevelsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
  }

  export type LevelCountOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
  }

  export type LevelMaxOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
  }

  export type LevelMinOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
  }

  export type ProductLevelsCountOrderByAggregateInput = {
    id?: SortOrder
    levelId?: SortOrder
    productId?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    minWorkingHour?: SortOrder
  }

  export type ProductLevelsAvgOrderByAggregateInput = {
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    minWorkingHour?: SortOrder
  }

  export type ProductLevelsMaxOrderByAggregateInput = {
    id?: SortOrder
    levelId?: SortOrder
    productId?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    minWorkingHour?: SortOrder
  }

  export type ProductLevelsMinOrderByAggregateInput = {
    id?: SortOrder
    levelId?: SortOrder
    productId?: SortOrder
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    minWorkingHour?: SortOrder
  }

  export type ProductLevelsSumOrderByAggregateInput = {
    priceHourly?: SortOrder
    priceDaily?: SortOrder
    minWorkingHour?: SortOrder
  }

  export type ToolsScalarRelationFilter = {
    is?: ToolsWhereInput
    isNot?: ToolsWhereInput
  }

  export type ProductToolsCountOrderByAggregateInput = {
    id?: SortOrder
    toolId?: SortOrder
    productId?: SortOrder
  }

  export type ProductToolsMaxOrderByAggregateInput = {
    id?: SortOrder
    toolId?: SortOrder
    productId?: SortOrder
  }

  export type ProductToolsMinOrderByAggregateInput = {
    id?: SortOrder
    toolId?: SortOrder
    productId?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumpaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.paymentType | EnumpaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.paymentType[] | ListEnumpaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.paymentType[] | ListEnumpaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumpaymentTypeFilter<$PrismaModel> | $Enums.paymentType
  }

  export type EnumorderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.orderStatus | EnumorderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.orderStatus[] | ListEnumorderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.orderStatus[] | ListEnumorderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumorderStatusFilter<$PrismaModel> | $Enums.orderStatus
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    productCount?: SortOrder
    quantity?: SortOrder
    measure?: SortOrder
    tool?: SortOrder
    total?: SortOrder
    location?: SortOrder
    address?: SortOrder
    date?: SortOrder
    paymentType?: SortOrder
    withDelivery?: SortOrder
    status?: SortOrder
    commentToDelivery?: SortOrder
    userId?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    productCount?: SortOrder
    quantity?: SortOrder
    measure?: SortOrder
    tool?: SortOrder
    total?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    productCount?: SortOrder
    quantity?: SortOrder
    measure?: SortOrder
    tool?: SortOrder
    total?: SortOrder
    location?: SortOrder
    address?: SortOrder
    date?: SortOrder
    paymentType?: SortOrder
    withDelivery?: SortOrder
    status?: SortOrder
    commentToDelivery?: SortOrder
    userId?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    productCount?: SortOrder
    quantity?: SortOrder
    measure?: SortOrder
    tool?: SortOrder
    total?: SortOrder
    location?: SortOrder
    address?: SortOrder
    date?: SortOrder
    paymentType?: SortOrder
    withDelivery?: SortOrder
    status?: SortOrder
    commentToDelivery?: SortOrder
    userId?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    productCount?: SortOrder
    quantity?: SortOrder
    measure?: SortOrder
    tool?: SortOrder
    total?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumpaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.paymentType | EnumpaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.paymentType[] | ListEnumpaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.paymentType[] | ListEnumpaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumpaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.paymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumpaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumpaymentTypeFilter<$PrismaModel>
  }

  export type EnumorderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.orderStatus | EnumorderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.orderStatus[] | ListEnumorderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.orderStatus[] | ListEnumorderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumorderStatusWithAggregatesFilter<$PrismaModel> | $Enums.orderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumorderStatusFilter<$PrismaModel>
    _max?: NestedEnumorderStatusFilter<$PrismaModel>
  }

  export type EnumMasterDailyFilter<$PrismaModel = never> = {
    equals?: $Enums.MasterDaily | EnumMasterDailyFieldRefInput<$PrismaModel>
    in?: $Enums.MasterDaily[] | ListEnumMasterDailyFieldRefInput<$PrismaModel>
    notIn?: $Enums.MasterDaily[] | ListEnumMasterDailyFieldRefInput<$PrismaModel>
    not?: NestedEnumMasterDailyFilter<$PrismaModel> | $Enums.MasterDaily
  }

  export type OrderScalarRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type OrderProductsCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    levelId?: SortOrder
    toolId?: SortOrder
    count?: SortOrder
    price?: SortOrder
    workingTime?: SortOrder
    timeUnit?: SortOrder
  }

  export type OrderProductsAvgOrderByAggregateInput = {
    count?: SortOrder
    price?: SortOrder
    workingTime?: SortOrder
  }

  export type OrderProductsMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    levelId?: SortOrder
    toolId?: SortOrder
    count?: SortOrder
    price?: SortOrder
    workingTime?: SortOrder
    timeUnit?: SortOrder
  }

  export type OrderProductsMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    levelId?: SortOrder
    toolId?: SortOrder
    count?: SortOrder
    price?: SortOrder
    workingTime?: SortOrder
    timeUnit?: SortOrder
  }

  export type OrderProductsSumOrderByAggregateInput = {
    count?: SortOrder
    price?: SortOrder
    workingTime?: SortOrder
  }

  export type EnumMasterDailyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MasterDaily | EnumMasterDailyFieldRefInput<$PrismaModel>
    in?: $Enums.MasterDaily[] | ListEnumMasterDailyFieldRefInput<$PrismaModel>
    notIn?: $Enums.MasterDaily[] | ListEnumMasterDailyFieldRefInput<$PrismaModel>
    not?: NestedEnumMasterDailyWithAggregatesFilter<$PrismaModel> | $Enums.MasterDaily
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMasterDailyFilter<$PrismaModel>
    _max?: NestedEnumMasterDailyFilter<$PrismaModel>
  }

  export type OrderMastersCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    masterId?: SortOrder
  }

  export type OrderMastersMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    masterId?: SortOrder
  }

  export type OrderMastersMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    masterId?: SortOrder
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    userId?: SortOrder
    orderId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CommentScalarRelationFilter = {
    is?: CommentWhereInput
    isNot?: CommentWhereInput
  }

  export type MasterRatingsCountOrderByAggregateInput = {
    id?: SortOrder
    star?: SortOrder
    masterId?: SortOrder
    commentId?: SortOrder
  }

  export type MasterRatingsAvgOrderByAggregateInput = {
    star?: SortOrder
  }

  export type MasterRatingsMaxOrderByAggregateInput = {
    id?: SortOrder
    star?: SortOrder
    masterId?: SortOrder
    commentId?: SortOrder
  }

  export type MasterRatingsMinOrderByAggregateInput = {
    id?: SortOrder
    star?: SortOrder
    masterId?: SortOrder
    commentId?: SortOrder
  }

  export type MasterRatingsSumOrderByAggregateInput = {
    star?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BasketCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    productCount?: SortOrder
    quantity?: SortOrder
    measure?: SortOrder
    toolId?: SortOrder
    total?: SortOrder
    userId?: SortOrder
    timeUnit?: SortOrder
    levelId?: SortOrder
  }

  export type BasketAvgOrderByAggregateInput = {
    productCount?: SortOrder
    quantity?: SortOrder
    measure?: SortOrder
    total?: SortOrder
  }

  export type BasketMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    productCount?: SortOrder
    quantity?: SortOrder
    measure?: SortOrder
    toolId?: SortOrder
    total?: SortOrder
    userId?: SortOrder
    timeUnit?: SortOrder
    levelId?: SortOrder
  }

  export type BasketMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    productCount?: SortOrder
    quantity?: SortOrder
    measure?: SortOrder
    toolId?: SortOrder
    total?: SortOrder
    userId?: SortOrder
    timeUnit?: SortOrder
    levelId?: SortOrder
  }

  export type BasketSumOrderByAggregateInput = {
    productCount?: SortOrder
    quantity?: SortOrder
    measure?: SortOrder
    total?: SortOrder
  }

  export type GeneralInfoCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    links?: SortOrder
    phone?: SortOrder
  }

  export type GeneralInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    links?: SortOrder
    phone?: SortOrder
  }

  export type GeneralInfoMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    links?: SortOrder
    phone?: SortOrder
  }

  export type ContactCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    surName?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    message?: SortOrder
  }

  export type ContactMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    surName?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    message?: SortOrder
  }

  export type ContactMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    surName?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    message?: SortOrder
  }

  export type FAQCountOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
  }

  export type FAQMaxOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
  }

  export type FAQMinOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
  }

  export type showCaseCountOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    descriptionUz?: SortOrder
    descriptionRU?: SortOrder
    descriptionEng?: SortOrder
    image?: SortOrder
    link?: SortOrder
  }

  export type showCaseMaxOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    descriptionUz?: SortOrder
    descriptionRU?: SortOrder
    descriptionEng?: SortOrder
    image?: SortOrder
    link?: SortOrder
  }

  export type showCaseMinOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    descriptionUz?: SortOrder
    descriptionRU?: SortOrder
    descriptionEng?: SortOrder
    image?: SortOrder
    link?: SortOrder
  }

  export type PartnersCountOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    image?: SortOrder
  }

  export type PartnersMaxOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    image?: SortOrder
  }

  export type PartnersMinOrderByAggregateInput = {
    id?: SortOrder
    nameUz?: SortOrder
    nameRU?: SortOrder
    nameEng?: SortOrder
    image?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ipAddress?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ipAddress?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ipAddress?: SortOrder
  }

  export type UserCreateNestedManyWithoutRegionInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateManyWithoutRegionNestedInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRegionInput | UserUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRegionInput | UserUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRegionInput | UserUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRegionInput | UserUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRegionInput | UserUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRegionInput | UserUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ToolsCreateNestedManyWithoutBrandInput = {
    create?: XOR<ToolsCreateWithoutBrandInput, ToolsUncheckedCreateWithoutBrandInput> | ToolsCreateWithoutBrandInput[] | ToolsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutBrandInput | ToolsCreateOrConnectWithoutBrandInput[]
    createMany?: ToolsCreateManyBrandInputEnvelope
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
  }

  export type ToolsUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<ToolsCreateWithoutBrandInput, ToolsUncheckedCreateWithoutBrandInput> | ToolsCreateWithoutBrandInput[] | ToolsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutBrandInput | ToolsCreateOrConnectWithoutBrandInput[]
    createMany?: ToolsCreateManyBrandInputEnvelope
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
  }

  export type ToolsUpdateManyWithoutBrandNestedInput = {
    create?: XOR<ToolsCreateWithoutBrandInput, ToolsUncheckedCreateWithoutBrandInput> | ToolsCreateWithoutBrandInput[] | ToolsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutBrandInput | ToolsCreateOrConnectWithoutBrandInput[]
    upsert?: ToolsUpsertWithWhereUniqueWithoutBrandInput | ToolsUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: ToolsCreateManyBrandInputEnvelope
    set?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    disconnect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    delete?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    update?: ToolsUpdateWithWhereUniqueWithoutBrandInput | ToolsUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: ToolsUpdateManyWithWhereWithoutBrandInput | ToolsUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: ToolsScalarWhereInput | ToolsScalarWhereInput[]
  }

  export type ToolsUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<ToolsCreateWithoutBrandInput, ToolsUncheckedCreateWithoutBrandInput> | ToolsCreateWithoutBrandInput[] | ToolsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutBrandInput | ToolsCreateOrConnectWithoutBrandInput[]
    upsert?: ToolsUpsertWithWhereUniqueWithoutBrandInput | ToolsUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: ToolsCreateManyBrandInputEnvelope
    set?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    disconnect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    delete?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    update?: ToolsUpdateWithWhereUniqueWithoutBrandInput | ToolsUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: ToolsUpdateManyWithWhereWithoutBrandInput | ToolsUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: ToolsScalarWhereInput | ToolsScalarWhereInput[]
  }

  export type ToolsCreateNestedManyWithoutCapacityInput = {
    create?: XOR<ToolsCreateWithoutCapacityInput, ToolsUncheckedCreateWithoutCapacityInput> | ToolsCreateWithoutCapacityInput[] | ToolsUncheckedCreateWithoutCapacityInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutCapacityInput | ToolsCreateOrConnectWithoutCapacityInput[]
    createMany?: ToolsCreateManyCapacityInputEnvelope
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
  }

  export type ToolsUncheckedCreateNestedManyWithoutCapacityInput = {
    create?: XOR<ToolsCreateWithoutCapacityInput, ToolsUncheckedCreateWithoutCapacityInput> | ToolsCreateWithoutCapacityInput[] | ToolsUncheckedCreateWithoutCapacityInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutCapacityInput | ToolsCreateOrConnectWithoutCapacityInput[]
    createMany?: ToolsCreateManyCapacityInputEnvelope
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
  }

  export type ToolsUpdateManyWithoutCapacityNestedInput = {
    create?: XOR<ToolsCreateWithoutCapacityInput, ToolsUncheckedCreateWithoutCapacityInput> | ToolsCreateWithoutCapacityInput[] | ToolsUncheckedCreateWithoutCapacityInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutCapacityInput | ToolsCreateOrConnectWithoutCapacityInput[]
    upsert?: ToolsUpsertWithWhereUniqueWithoutCapacityInput | ToolsUpsertWithWhereUniqueWithoutCapacityInput[]
    createMany?: ToolsCreateManyCapacityInputEnvelope
    set?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    disconnect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    delete?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    update?: ToolsUpdateWithWhereUniqueWithoutCapacityInput | ToolsUpdateWithWhereUniqueWithoutCapacityInput[]
    updateMany?: ToolsUpdateManyWithWhereWithoutCapacityInput | ToolsUpdateManyWithWhereWithoutCapacityInput[]
    deleteMany?: ToolsScalarWhereInput | ToolsScalarWhereInput[]
  }

  export type ToolsUncheckedUpdateManyWithoutCapacityNestedInput = {
    create?: XOR<ToolsCreateWithoutCapacityInput, ToolsUncheckedCreateWithoutCapacityInput> | ToolsCreateWithoutCapacityInput[] | ToolsUncheckedCreateWithoutCapacityInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutCapacityInput | ToolsCreateOrConnectWithoutCapacityInput[]
    upsert?: ToolsUpsertWithWhereUniqueWithoutCapacityInput | ToolsUpsertWithWhereUniqueWithoutCapacityInput[]
    createMany?: ToolsCreateManyCapacityInputEnvelope
    set?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    disconnect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    delete?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    update?: ToolsUpdateWithWhereUniqueWithoutCapacityInput | ToolsUpdateWithWhereUniqueWithoutCapacityInput[]
    updateMany?: ToolsUpdateManyWithWhereWithoutCapacityInput | ToolsUpdateManyWithWhereWithoutCapacityInput[]
    deleteMany?: ToolsScalarWhereInput | ToolsScalarWhereInput[]
  }

  export type ToolsCreateNestedManyWithoutSizeInput = {
    create?: XOR<ToolsCreateWithoutSizeInput, ToolsUncheckedCreateWithoutSizeInput> | ToolsCreateWithoutSizeInput[] | ToolsUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutSizeInput | ToolsCreateOrConnectWithoutSizeInput[]
    createMany?: ToolsCreateManySizeInputEnvelope
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
  }

  export type ToolsUncheckedCreateNestedManyWithoutSizeInput = {
    create?: XOR<ToolsCreateWithoutSizeInput, ToolsUncheckedCreateWithoutSizeInput> | ToolsCreateWithoutSizeInput[] | ToolsUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutSizeInput | ToolsCreateOrConnectWithoutSizeInput[]
    createMany?: ToolsCreateManySizeInputEnvelope
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
  }

  export type ToolsUpdateManyWithoutSizeNestedInput = {
    create?: XOR<ToolsCreateWithoutSizeInput, ToolsUncheckedCreateWithoutSizeInput> | ToolsCreateWithoutSizeInput[] | ToolsUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutSizeInput | ToolsCreateOrConnectWithoutSizeInput[]
    upsert?: ToolsUpsertWithWhereUniqueWithoutSizeInput | ToolsUpsertWithWhereUniqueWithoutSizeInput[]
    createMany?: ToolsCreateManySizeInputEnvelope
    set?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    disconnect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    delete?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    update?: ToolsUpdateWithWhereUniqueWithoutSizeInput | ToolsUpdateWithWhereUniqueWithoutSizeInput[]
    updateMany?: ToolsUpdateManyWithWhereWithoutSizeInput | ToolsUpdateManyWithWhereWithoutSizeInput[]
    deleteMany?: ToolsScalarWhereInput | ToolsScalarWhereInput[]
  }

  export type ToolsUncheckedUpdateManyWithoutSizeNestedInput = {
    create?: XOR<ToolsCreateWithoutSizeInput, ToolsUncheckedCreateWithoutSizeInput> | ToolsCreateWithoutSizeInput[] | ToolsUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutSizeInput | ToolsCreateOrConnectWithoutSizeInput[]
    upsert?: ToolsUpsertWithWhereUniqueWithoutSizeInput | ToolsUpsertWithWhereUniqueWithoutSizeInput[]
    createMany?: ToolsCreateManySizeInputEnvelope
    set?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    disconnect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    delete?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    update?: ToolsUpdateWithWhereUniqueWithoutSizeInput | ToolsUpdateWithWhereUniqueWithoutSizeInput[]
    updateMany?: ToolsUpdateManyWithWhereWithoutSizeInput | ToolsUpdateManyWithWhereWithoutSizeInput[]
    deleteMany?: ToolsScalarWhereInput | ToolsScalarWhereInput[]
  }

  export type RegionCreateNestedOneWithoutUserInput = {
    create?: XOR<RegionCreateWithoutUserInput, RegionUncheckedCreateWithoutUserInput>
    connectOrCreate?: RegionCreateOrConnectWithoutUserInput
    connect?: RegionWhereUniqueInput
  }

  export type BasketCreateNestedManyWithoutUserInput = {
    create?: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput> | BasketCreateWithoutUserInput[] | BasketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutUserInput | BasketCreateOrConnectWithoutUserInput[]
    createMany?: BasketCreateManyUserInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type BasketUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput> | BasketCreateWithoutUserInput[] | BasketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutUserInput | BasketCreateOrConnectWithoutUserInput[]
    createMany?: BasketCreateManyUserInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumuserRoleFieldUpdateOperationsInput = {
    set?: $Enums.userRole
  }

  export type EnumuserStatusFieldUpdateOperationsInput = {
    set?: $Enums.userStatus
  }

  export type RegionUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<RegionCreateWithoutUserInput, RegionUncheckedCreateWithoutUserInput>
    connectOrCreate?: RegionCreateOrConnectWithoutUserInput
    upsert?: RegionUpsertWithoutUserInput
    connect?: RegionWhereUniqueInput
    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutUserInput, RegionUpdateWithoutUserInput>, RegionUncheckedUpdateWithoutUserInput>
  }

  export type BasketUpdateManyWithoutUserNestedInput = {
    create?: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput> | BasketCreateWithoutUserInput[] | BasketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutUserInput | BasketCreateOrConnectWithoutUserInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutUserInput | BasketUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BasketCreateManyUserInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutUserInput | BasketUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutUserInput | BasketUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type BasketUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput> | BasketCreateWithoutUserInput[] | BasketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutUserInput | BasketCreateOrConnectWithoutUserInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutUserInput | BasketUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BasketCreateManyUserInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutUserInput | BasketUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutUserInput | BasketUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type BrandCreateNestedOneWithoutToolsInput = {
    create?: XOR<BrandCreateWithoutToolsInput, BrandUncheckedCreateWithoutToolsInput>
    connectOrCreate?: BrandCreateOrConnectWithoutToolsInput
    connect?: BrandWhereUniqueInput
  }

  export type CapacityCreateNestedOneWithoutToolsInput = {
    create?: XOR<CapacityCreateWithoutToolsInput, CapacityUncheckedCreateWithoutToolsInput>
    connectOrCreate?: CapacityCreateOrConnectWithoutToolsInput
    connect?: CapacityWhereUniqueInput
  }

  export type SizeCreateNestedOneWithoutToolsInput = {
    create?: XOR<SizeCreateWithoutToolsInput, SizeUncheckedCreateWithoutToolsInput>
    connectOrCreate?: SizeCreateOrConnectWithoutToolsInput
    connect?: SizeWhereUniqueInput
  }

  export type BasketCreateNestedManyWithoutToolInput = {
    create?: XOR<BasketCreateWithoutToolInput, BasketUncheckedCreateWithoutToolInput> | BasketCreateWithoutToolInput[] | BasketUncheckedCreateWithoutToolInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutToolInput | BasketCreateOrConnectWithoutToolInput[]
    createMany?: BasketCreateManyToolInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type OrderProductsCreateNestedManyWithoutToolInput = {
    create?: XOR<OrderProductsCreateWithoutToolInput, OrderProductsUncheckedCreateWithoutToolInput> | OrderProductsCreateWithoutToolInput[] | OrderProductsUncheckedCreateWithoutToolInput[]
    connectOrCreate?: OrderProductsCreateOrConnectWithoutToolInput | OrderProductsCreateOrConnectWithoutToolInput[]
    createMany?: OrderProductsCreateManyToolInputEnvelope
    connect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
  }

  export type ProductToolsCreateNestedManyWithoutToolInput = {
    create?: XOR<ProductToolsCreateWithoutToolInput, ProductToolsUncheckedCreateWithoutToolInput> | ProductToolsCreateWithoutToolInput[] | ProductToolsUncheckedCreateWithoutToolInput[]
    connectOrCreate?: ProductToolsCreateOrConnectWithoutToolInput | ProductToolsCreateOrConnectWithoutToolInput[]
    createMany?: ProductToolsCreateManyToolInputEnvelope
    connect?: ProductToolsWhereUniqueInput | ProductToolsWhereUniqueInput[]
  }

  export type BasketUncheckedCreateNestedManyWithoutToolInput = {
    create?: XOR<BasketCreateWithoutToolInput, BasketUncheckedCreateWithoutToolInput> | BasketCreateWithoutToolInput[] | BasketUncheckedCreateWithoutToolInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutToolInput | BasketCreateOrConnectWithoutToolInput[]
    createMany?: BasketCreateManyToolInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type OrderProductsUncheckedCreateNestedManyWithoutToolInput = {
    create?: XOR<OrderProductsCreateWithoutToolInput, OrderProductsUncheckedCreateWithoutToolInput> | OrderProductsCreateWithoutToolInput[] | OrderProductsUncheckedCreateWithoutToolInput[]
    connectOrCreate?: OrderProductsCreateOrConnectWithoutToolInput | OrderProductsCreateOrConnectWithoutToolInput[]
    createMany?: OrderProductsCreateManyToolInputEnvelope
    connect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
  }

  export type ProductToolsUncheckedCreateNestedManyWithoutToolInput = {
    create?: XOR<ProductToolsCreateWithoutToolInput, ProductToolsUncheckedCreateWithoutToolInput> | ProductToolsCreateWithoutToolInput[] | ProductToolsUncheckedCreateWithoutToolInput[]
    connectOrCreate?: ProductToolsCreateOrConnectWithoutToolInput | ProductToolsCreateOrConnectWithoutToolInput[]
    createMany?: ProductToolsCreateManyToolInputEnvelope
    connect?: ProductToolsWhereUniqueInput | ProductToolsWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type BrandUpdateOneRequiredWithoutToolsNestedInput = {
    create?: XOR<BrandCreateWithoutToolsInput, BrandUncheckedCreateWithoutToolsInput>
    connectOrCreate?: BrandCreateOrConnectWithoutToolsInput
    upsert?: BrandUpsertWithoutToolsInput
    connect?: BrandWhereUniqueInput
    update?: XOR<XOR<BrandUpdateToOneWithWhereWithoutToolsInput, BrandUpdateWithoutToolsInput>, BrandUncheckedUpdateWithoutToolsInput>
  }

  export type CapacityUpdateOneRequiredWithoutToolsNestedInput = {
    create?: XOR<CapacityCreateWithoutToolsInput, CapacityUncheckedCreateWithoutToolsInput>
    connectOrCreate?: CapacityCreateOrConnectWithoutToolsInput
    upsert?: CapacityUpsertWithoutToolsInput
    connect?: CapacityWhereUniqueInput
    update?: XOR<XOR<CapacityUpdateToOneWithWhereWithoutToolsInput, CapacityUpdateWithoutToolsInput>, CapacityUncheckedUpdateWithoutToolsInput>
  }

  export type SizeUpdateOneRequiredWithoutToolsNestedInput = {
    create?: XOR<SizeCreateWithoutToolsInput, SizeUncheckedCreateWithoutToolsInput>
    connectOrCreate?: SizeCreateOrConnectWithoutToolsInput
    upsert?: SizeUpsertWithoutToolsInput
    connect?: SizeWhereUniqueInput
    update?: XOR<XOR<SizeUpdateToOneWithWhereWithoutToolsInput, SizeUpdateWithoutToolsInput>, SizeUncheckedUpdateWithoutToolsInput>
  }

  export type BasketUpdateManyWithoutToolNestedInput = {
    create?: XOR<BasketCreateWithoutToolInput, BasketUncheckedCreateWithoutToolInput> | BasketCreateWithoutToolInput[] | BasketUncheckedCreateWithoutToolInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutToolInput | BasketCreateOrConnectWithoutToolInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutToolInput | BasketUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: BasketCreateManyToolInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutToolInput | BasketUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutToolInput | BasketUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type OrderProductsUpdateManyWithoutToolNestedInput = {
    create?: XOR<OrderProductsCreateWithoutToolInput, OrderProductsUncheckedCreateWithoutToolInput> | OrderProductsCreateWithoutToolInput[] | OrderProductsUncheckedCreateWithoutToolInput[]
    connectOrCreate?: OrderProductsCreateOrConnectWithoutToolInput | OrderProductsCreateOrConnectWithoutToolInput[]
    upsert?: OrderProductsUpsertWithWhereUniqueWithoutToolInput | OrderProductsUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: OrderProductsCreateManyToolInputEnvelope
    set?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    disconnect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    delete?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    connect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    update?: OrderProductsUpdateWithWhereUniqueWithoutToolInput | OrderProductsUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: OrderProductsUpdateManyWithWhereWithoutToolInput | OrderProductsUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: OrderProductsScalarWhereInput | OrderProductsScalarWhereInput[]
  }

  export type ProductToolsUpdateManyWithoutToolNestedInput = {
    create?: XOR<ProductToolsCreateWithoutToolInput, ProductToolsUncheckedCreateWithoutToolInput> | ProductToolsCreateWithoutToolInput[] | ProductToolsUncheckedCreateWithoutToolInput[]
    connectOrCreate?: ProductToolsCreateOrConnectWithoutToolInput | ProductToolsCreateOrConnectWithoutToolInput[]
    upsert?: ProductToolsUpsertWithWhereUniqueWithoutToolInput | ProductToolsUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: ProductToolsCreateManyToolInputEnvelope
    set?: ProductToolsWhereUniqueInput | ProductToolsWhereUniqueInput[]
    disconnect?: ProductToolsWhereUniqueInput | ProductToolsWhereUniqueInput[]
    delete?: ProductToolsWhereUniqueInput | ProductToolsWhereUniqueInput[]
    connect?: ProductToolsWhereUniqueInput | ProductToolsWhereUniqueInput[]
    update?: ProductToolsUpdateWithWhereUniqueWithoutToolInput | ProductToolsUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: ProductToolsUpdateManyWithWhereWithoutToolInput | ProductToolsUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: ProductToolsScalarWhereInput | ProductToolsScalarWhereInput[]
  }

  export type BasketUncheckedUpdateManyWithoutToolNestedInput = {
    create?: XOR<BasketCreateWithoutToolInput, BasketUncheckedCreateWithoutToolInput> | BasketCreateWithoutToolInput[] | BasketUncheckedCreateWithoutToolInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutToolInput | BasketCreateOrConnectWithoutToolInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutToolInput | BasketUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: BasketCreateManyToolInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutToolInput | BasketUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutToolInput | BasketUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type OrderProductsUncheckedUpdateManyWithoutToolNestedInput = {
    create?: XOR<OrderProductsCreateWithoutToolInput, OrderProductsUncheckedCreateWithoutToolInput> | OrderProductsCreateWithoutToolInput[] | OrderProductsUncheckedCreateWithoutToolInput[]
    connectOrCreate?: OrderProductsCreateOrConnectWithoutToolInput | OrderProductsCreateOrConnectWithoutToolInput[]
    upsert?: OrderProductsUpsertWithWhereUniqueWithoutToolInput | OrderProductsUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: OrderProductsCreateManyToolInputEnvelope
    set?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    disconnect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    delete?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    connect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    update?: OrderProductsUpdateWithWhereUniqueWithoutToolInput | OrderProductsUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: OrderProductsUpdateManyWithWhereWithoutToolInput | OrderProductsUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: OrderProductsScalarWhereInput | OrderProductsScalarWhereInput[]
  }

  export type ProductToolsUncheckedUpdateManyWithoutToolNestedInput = {
    create?: XOR<ProductToolsCreateWithoutToolInput, ProductToolsUncheckedCreateWithoutToolInput> | ProductToolsCreateWithoutToolInput[] | ProductToolsUncheckedCreateWithoutToolInput[]
    connectOrCreate?: ProductToolsCreateOrConnectWithoutToolInput | ProductToolsCreateOrConnectWithoutToolInput[]
    upsert?: ProductToolsUpsertWithWhereUniqueWithoutToolInput | ProductToolsUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: ProductToolsCreateManyToolInputEnvelope
    set?: ProductToolsWhereUniqueInput | ProductToolsWhereUniqueInput[]
    disconnect?: ProductToolsWhereUniqueInput | ProductToolsWhereUniqueInput[]
    delete?: ProductToolsWhereUniqueInput | ProductToolsWhereUniqueInput[]
    connect?: ProductToolsWhereUniqueInput | ProductToolsWhereUniqueInput[]
    update?: ProductToolsUpdateWithWhereUniqueWithoutToolInput | ProductToolsUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: ProductToolsUpdateManyWithWhereWithoutToolInput | ProductToolsUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: ProductToolsScalarWhereInput | ProductToolsScalarWhereInput[]
  }

  export type MasterProdCreateNestedManyWithoutMasterInput = {
    create?: XOR<MasterProdCreateWithoutMasterInput, MasterProdUncheckedCreateWithoutMasterInput> | MasterProdCreateWithoutMasterInput[] | MasterProdUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterProdCreateOrConnectWithoutMasterInput | MasterProdCreateOrConnectWithoutMasterInput[]
    createMany?: MasterProdCreateManyMasterInputEnvelope
    connect?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
  }

  export type OrderMastersCreateNestedManyWithoutMasterInput = {
    create?: XOR<OrderMastersCreateWithoutMasterInput, OrderMastersUncheckedCreateWithoutMasterInput> | OrderMastersCreateWithoutMasterInput[] | OrderMastersUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: OrderMastersCreateOrConnectWithoutMasterInput | OrderMastersCreateOrConnectWithoutMasterInput[]
    createMany?: OrderMastersCreateManyMasterInputEnvelope
    connect?: OrderMastersWhereUniqueInput | OrderMastersWhereUniqueInput[]
  }

  export type MasterRatingsCreateNestedManyWithoutMasterInput = {
    create?: XOR<MasterRatingsCreateWithoutMasterInput, MasterRatingsUncheckedCreateWithoutMasterInput> | MasterRatingsCreateWithoutMasterInput[] | MasterRatingsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutMasterInput | MasterRatingsCreateOrConnectWithoutMasterInput[]
    createMany?: MasterRatingsCreateManyMasterInputEnvelope
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
  }

  export type MasterProdUncheckedCreateNestedManyWithoutMasterInput = {
    create?: XOR<MasterProdCreateWithoutMasterInput, MasterProdUncheckedCreateWithoutMasterInput> | MasterProdCreateWithoutMasterInput[] | MasterProdUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterProdCreateOrConnectWithoutMasterInput | MasterProdCreateOrConnectWithoutMasterInput[]
    createMany?: MasterProdCreateManyMasterInputEnvelope
    connect?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
  }

  export type OrderMastersUncheckedCreateNestedManyWithoutMasterInput = {
    create?: XOR<OrderMastersCreateWithoutMasterInput, OrderMastersUncheckedCreateWithoutMasterInput> | OrderMastersCreateWithoutMasterInput[] | OrderMastersUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: OrderMastersCreateOrConnectWithoutMasterInput | OrderMastersCreateOrConnectWithoutMasterInput[]
    createMany?: OrderMastersCreateManyMasterInputEnvelope
    connect?: OrderMastersWhereUniqueInput | OrderMastersWhereUniqueInput[]
  }

  export type MasterRatingsUncheckedCreateNestedManyWithoutMasterInput = {
    create?: XOR<MasterRatingsCreateWithoutMasterInput, MasterRatingsUncheckedCreateWithoutMasterInput> | MasterRatingsCreateWithoutMasterInput[] | MasterRatingsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutMasterInput | MasterRatingsCreateOrConnectWithoutMasterInput[]
    createMany?: MasterRatingsCreateManyMasterInputEnvelope
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
  }

  export type MasterProdUpdateManyWithoutMasterNestedInput = {
    create?: XOR<MasterProdCreateWithoutMasterInput, MasterProdUncheckedCreateWithoutMasterInput> | MasterProdCreateWithoutMasterInput[] | MasterProdUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterProdCreateOrConnectWithoutMasterInput | MasterProdCreateOrConnectWithoutMasterInput[]
    upsert?: MasterProdUpsertWithWhereUniqueWithoutMasterInput | MasterProdUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: MasterProdCreateManyMasterInputEnvelope
    set?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    disconnect?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    delete?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    connect?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    update?: MasterProdUpdateWithWhereUniqueWithoutMasterInput | MasterProdUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: MasterProdUpdateManyWithWhereWithoutMasterInput | MasterProdUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: MasterProdScalarWhereInput | MasterProdScalarWhereInput[]
  }

  export type OrderMastersUpdateManyWithoutMasterNestedInput = {
    create?: XOR<OrderMastersCreateWithoutMasterInput, OrderMastersUncheckedCreateWithoutMasterInput> | OrderMastersCreateWithoutMasterInput[] | OrderMastersUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: OrderMastersCreateOrConnectWithoutMasterInput | OrderMastersCreateOrConnectWithoutMasterInput[]
    upsert?: OrderMastersUpsertWithWhereUniqueWithoutMasterInput | OrderMastersUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: OrderMastersCreateManyMasterInputEnvelope
    set?: OrderMastersWhereUniqueInput | OrderMastersWhereUniqueInput[]
    disconnect?: OrderMastersWhereUniqueInput | OrderMastersWhereUniqueInput[]
    delete?: OrderMastersWhereUniqueInput | OrderMastersWhereUniqueInput[]
    connect?: OrderMastersWhereUniqueInput | OrderMastersWhereUniqueInput[]
    update?: OrderMastersUpdateWithWhereUniqueWithoutMasterInput | OrderMastersUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: OrderMastersUpdateManyWithWhereWithoutMasterInput | OrderMastersUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: OrderMastersScalarWhereInput | OrderMastersScalarWhereInput[]
  }

  export type MasterRatingsUpdateManyWithoutMasterNestedInput = {
    create?: XOR<MasterRatingsCreateWithoutMasterInput, MasterRatingsUncheckedCreateWithoutMasterInput> | MasterRatingsCreateWithoutMasterInput[] | MasterRatingsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutMasterInput | MasterRatingsCreateOrConnectWithoutMasterInput[]
    upsert?: MasterRatingsUpsertWithWhereUniqueWithoutMasterInput | MasterRatingsUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: MasterRatingsCreateManyMasterInputEnvelope
    set?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    disconnect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    delete?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    update?: MasterRatingsUpdateWithWhereUniqueWithoutMasterInput | MasterRatingsUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: MasterRatingsUpdateManyWithWhereWithoutMasterInput | MasterRatingsUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: MasterRatingsScalarWhereInput | MasterRatingsScalarWhereInput[]
  }

  export type MasterProdUncheckedUpdateManyWithoutMasterNestedInput = {
    create?: XOR<MasterProdCreateWithoutMasterInput, MasterProdUncheckedCreateWithoutMasterInput> | MasterProdCreateWithoutMasterInput[] | MasterProdUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterProdCreateOrConnectWithoutMasterInput | MasterProdCreateOrConnectWithoutMasterInput[]
    upsert?: MasterProdUpsertWithWhereUniqueWithoutMasterInput | MasterProdUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: MasterProdCreateManyMasterInputEnvelope
    set?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    disconnect?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    delete?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    connect?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    update?: MasterProdUpdateWithWhereUniqueWithoutMasterInput | MasterProdUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: MasterProdUpdateManyWithWhereWithoutMasterInput | MasterProdUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: MasterProdScalarWhereInput | MasterProdScalarWhereInput[]
  }

  export type OrderMastersUncheckedUpdateManyWithoutMasterNestedInput = {
    create?: XOR<OrderMastersCreateWithoutMasterInput, OrderMastersUncheckedCreateWithoutMasterInput> | OrderMastersCreateWithoutMasterInput[] | OrderMastersUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: OrderMastersCreateOrConnectWithoutMasterInput | OrderMastersCreateOrConnectWithoutMasterInput[]
    upsert?: OrderMastersUpsertWithWhereUniqueWithoutMasterInput | OrderMastersUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: OrderMastersCreateManyMasterInputEnvelope
    set?: OrderMastersWhereUniqueInput | OrderMastersWhereUniqueInput[]
    disconnect?: OrderMastersWhereUniqueInput | OrderMastersWhereUniqueInput[]
    delete?: OrderMastersWhereUniqueInput | OrderMastersWhereUniqueInput[]
    connect?: OrderMastersWhereUniqueInput | OrderMastersWhereUniqueInput[]
    update?: OrderMastersUpdateWithWhereUniqueWithoutMasterInput | OrderMastersUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: OrderMastersUpdateManyWithWhereWithoutMasterInput | OrderMastersUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: OrderMastersScalarWhereInput | OrderMastersScalarWhereInput[]
  }

  export type MasterRatingsUncheckedUpdateManyWithoutMasterNestedInput = {
    create?: XOR<MasterRatingsCreateWithoutMasterInput, MasterRatingsUncheckedCreateWithoutMasterInput> | MasterRatingsCreateWithoutMasterInput[] | MasterRatingsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutMasterInput | MasterRatingsCreateOrConnectWithoutMasterInput[]
    upsert?: MasterRatingsUpsertWithWhereUniqueWithoutMasterInput | MasterRatingsUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: MasterRatingsCreateManyMasterInputEnvelope
    set?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    disconnect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    delete?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    update?: MasterRatingsUpdateWithWhereUniqueWithoutMasterInput | MasterRatingsUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: MasterRatingsUpdateManyWithWhereWithoutMasterInput | MasterRatingsUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: MasterRatingsScalarWhereInput | MasterRatingsScalarWhereInput[]
  }

  export type MasterCreateNestedOneWithoutMasterProdInput = {
    create?: XOR<MasterCreateWithoutMasterProdInput, MasterUncheckedCreateWithoutMasterProdInput>
    connectOrCreate?: MasterCreateOrConnectWithoutMasterProdInput
    connect?: MasterWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutMasterProdInput = {
    create?: XOR<ProductCreateWithoutMasterProdInput, ProductUncheckedCreateWithoutMasterProdInput>
    connectOrCreate?: ProductCreateOrConnectWithoutMasterProdInput
    connect?: ProductWhereUniqueInput
  }

  export type LevelCreateNestedOneWithoutMasterProdInput = {
    create?: XOR<LevelCreateWithoutMasterProdInput, LevelUncheckedCreateWithoutMasterProdInput>
    connectOrCreate?: LevelCreateOrConnectWithoutMasterProdInput
    connect?: LevelWhereUniqueInput
  }

  export type MasterUpdateOneRequiredWithoutMasterProdNestedInput = {
    create?: XOR<MasterCreateWithoutMasterProdInput, MasterUncheckedCreateWithoutMasterProdInput>
    connectOrCreate?: MasterCreateOrConnectWithoutMasterProdInput
    upsert?: MasterUpsertWithoutMasterProdInput
    connect?: MasterWhereUniqueInput
    update?: XOR<XOR<MasterUpdateToOneWithWhereWithoutMasterProdInput, MasterUpdateWithoutMasterProdInput>, MasterUncheckedUpdateWithoutMasterProdInput>
  }

  export type ProductUpdateOneRequiredWithoutMasterProdNestedInput = {
    create?: XOR<ProductCreateWithoutMasterProdInput, ProductUncheckedCreateWithoutMasterProdInput>
    connectOrCreate?: ProductCreateOrConnectWithoutMasterProdInput
    upsert?: ProductUpsertWithoutMasterProdInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutMasterProdInput, ProductUpdateWithoutMasterProdInput>, ProductUncheckedUpdateWithoutMasterProdInput>
  }

  export type LevelUpdateOneRequiredWithoutMasterProdNestedInput = {
    create?: XOR<LevelCreateWithoutMasterProdInput, LevelUncheckedCreateWithoutMasterProdInput>
    connectOrCreate?: LevelCreateOrConnectWithoutMasterProdInput
    upsert?: LevelUpsertWithoutMasterProdInput
    connect?: LevelWhereUniqueInput
    update?: XOR<XOR<LevelUpdateToOneWithWhereWithoutMasterProdInput, LevelUpdateWithoutMasterProdInput>, LevelUncheckedUpdateWithoutMasterProdInput>
  }

  export type MasterProdCreateNestedManyWithoutProductInput = {
    create?: XOR<MasterProdCreateWithoutProductInput, MasterProdUncheckedCreateWithoutProductInput> | MasterProdCreateWithoutProductInput[] | MasterProdUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MasterProdCreateOrConnectWithoutProductInput | MasterProdCreateOrConnectWithoutProductInput[]
    createMany?: MasterProdCreateManyProductInputEnvelope
    connect?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
  }

  export type BasketCreateNestedManyWithoutProductInput = {
    create?: XOR<BasketCreateWithoutProductInput, BasketUncheckedCreateWithoutProductInput> | BasketCreateWithoutProductInput[] | BasketUncheckedCreateWithoutProductInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutProductInput | BasketCreateOrConnectWithoutProductInput[]
    createMany?: BasketCreateManyProductInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type ProductLevelsCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductLevelsCreateWithoutProductInput, ProductLevelsUncheckedCreateWithoutProductInput> | ProductLevelsCreateWithoutProductInput[] | ProductLevelsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductLevelsCreateOrConnectWithoutProductInput | ProductLevelsCreateOrConnectWithoutProductInput[]
    createMany?: ProductLevelsCreateManyProductInputEnvelope
    connect?: ProductLevelsWhereUniqueInput | ProductLevelsWhereUniqueInput[]
  }

  export type ProductToolsCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductToolsCreateWithoutProductInput, ProductToolsUncheckedCreateWithoutProductInput> | ProductToolsCreateWithoutProductInput[] | ProductToolsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductToolsCreateOrConnectWithoutProductInput | ProductToolsCreateOrConnectWithoutProductInput[]
    createMany?: ProductToolsCreateManyProductInputEnvelope
    connect?: ProductToolsWhereUniqueInput | ProductToolsWhereUniqueInput[]
  }

  export type OrderProductsCreateNestedManyWithoutProductInput = {
    create?: XOR<OrderProductsCreateWithoutProductInput, OrderProductsUncheckedCreateWithoutProductInput> | OrderProductsCreateWithoutProductInput[] | OrderProductsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderProductsCreateOrConnectWithoutProductInput | OrderProductsCreateOrConnectWithoutProductInput[]
    createMany?: OrderProductsCreateManyProductInputEnvelope
    connect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
  }

  export type MasterProdUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<MasterProdCreateWithoutProductInput, MasterProdUncheckedCreateWithoutProductInput> | MasterProdCreateWithoutProductInput[] | MasterProdUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MasterProdCreateOrConnectWithoutProductInput | MasterProdCreateOrConnectWithoutProductInput[]
    createMany?: MasterProdCreateManyProductInputEnvelope
    connect?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
  }

  export type BasketUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<BasketCreateWithoutProductInput, BasketUncheckedCreateWithoutProductInput> | BasketCreateWithoutProductInput[] | BasketUncheckedCreateWithoutProductInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutProductInput | BasketCreateOrConnectWithoutProductInput[]
    createMany?: BasketCreateManyProductInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type ProductLevelsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductLevelsCreateWithoutProductInput, ProductLevelsUncheckedCreateWithoutProductInput> | ProductLevelsCreateWithoutProductInput[] | ProductLevelsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductLevelsCreateOrConnectWithoutProductInput | ProductLevelsCreateOrConnectWithoutProductInput[]
    createMany?: ProductLevelsCreateManyProductInputEnvelope
    connect?: ProductLevelsWhereUniqueInput | ProductLevelsWhereUniqueInput[]
  }

  export type ProductToolsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductToolsCreateWithoutProductInput, ProductToolsUncheckedCreateWithoutProductInput> | ProductToolsCreateWithoutProductInput[] | ProductToolsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductToolsCreateOrConnectWithoutProductInput | ProductToolsCreateOrConnectWithoutProductInput[]
    createMany?: ProductToolsCreateManyProductInputEnvelope
    connect?: ProductToolsWhereUniqueInput | ProductToolsWhereUniqueInput[]
  }

  export type OrderProductsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<OrderProductsCreateWithoutProductInput, OrderProductsUncheckedCreateWithoutProductInput> | OrderProductsCreateWithoutProductInput[] | OrderProductsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderProductsCreateOrConnectWithoutProductInput | OrderProductsCreateOrConnectWithoutProductInput[]
    createMany?: OrderProductsCreateManyProductInputEnvelope
    connect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
  }

  export type MasterProdUpdateManyWithoutProductNestedInput = {
    create?: XOR<MasterProdCreateWithoutProductInput, MasterProdUncheckedCreateWithoutProductInput> | MasterProdCreateWithoutProductInput[] | MasterProdUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MasterProdCreateOrConnectWithoutProductInput | MasterProdCreateOrConnectWithoutProductInput[]
    upsert?: MasterProdUpsertWithWhereUniqueWithoutProductInput | MasterProdUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: MasterProdCreateManyProductInputEnvelope
    set?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    disconnect?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    delete?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    connect?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    update?: MasterProdUpdateWithWhereUniqueWithoutProductInput | MasterProdUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: MasterProdUpdateManyWithWhereWithoutProductInput | MasterProdUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: MasterProdScalarWhereInput | MasterProdScalarWhereInput[]
  }

  export type BasketUpdateManyWithoutProductNestedInput = {
    create?: XOR<BasketCreateWithoutProductInput, BasketUncheckedCreateWithoutProductInput> | BasketCreateWithoutProductInput[] | BasketUncheckedCreateWithoutProductInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutProductInput | BasketCreateOrConnectWithoutProductInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutProductInput | BasketUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: BasketCreateManyProductInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutProductInput | BasketUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutProductInput | BasketUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type ProductLevelsUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductLevelsCreateWithoutProductInput, ProductLevelsUncheckedCreateWithoutProductInput> | ProductLevelsCreateWithoutProductInput[] | ProductLevelsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductLevelsCreateOrConnectWithoutProductInput | ProductLevelsCreateOrConnectWithoutProductInput[]
    upsert?: ProductLevelsUpsertWithWhereUniqueWithoutProductInput | ProductLevelsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductLevelsCreateManyProductInputEnvelope
    set?: ProductLevelsWhereUniqueInput | ProductLevelsWhereUniqueInput[]
    disconnect?: ProductLevelsWhereUniqueInput | ProductLevelsWhereUniqueInput[]
    delete?: ProductLevelsWhereUniqueInput | ProductLevelsWhereUniqueInput[]
    connect?: ProductLevelsWhereUniqueInput | ProductLevelsWhereUniqueInput[]
    update?: ProductLevelsUpdateWithWhereUniqueWithoutProductInput | ProductLevelsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductLevelsUpdateManyWithWhereWithoutProductInput | ProductLevelsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductLevelsScalarWhereInput | ProductLevelsScalarWhereInput[]
  }

  export type ProductToolsUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductToolsCreateWithoutProductInput, ProductToolsUncheckedCreateWithoutProductInput> | ProductToolsCreateWithoutProductInput[] | ProductToolsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductToolsCreateOrConnectWithoutProductInput | ProductToolsCreateOrConnectWithoutProductInput[]
    upsert?: ProductToolsUpsertWithWhereUniqueWithoutProductInput | ProductToolsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductToolsCreateManyProductInputEnvelope
    set?: ProductToolsWhereUniqueInput | ProductToolsWhereUniqueInput[]
    disconnect?: ProductToolsWhereUniqueInput | ProductToolsWhereUniqueInput[]
    delete?: ProductToolsWhereUniqueInput | ProductToolsWhereUniqueInput[]
    connect?: ProductToolsWhereUniqueInput | ProductToolsWhereUniqueInput[]
    update?: ProductToolsUpdateWithWhereUniqueWithoutProductInput | ProductToolsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductToolsUpdateManyWithWhereWithoutProductInput | ProductToolsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductToolsScalarWhereInput | ProductToolsScalarWhereInput[]
  }

  export type OrderProductsUpdateManyWithoutProductNestedInput = {
    create?: XOR<OrderProductsCreateWithoutProductInput, OrderProductsUncheckedCreateWithoutProductInput> | OrderProductsCreateWithoutProductInput[] | OrderProductsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderProductsCreateOrConnectWithoutProductInput | OrderProductsCreateOrConnectWithoutProductInput[]
    upsert?: OrderProductsUpsertWithWhereUniqueWithoutProductInput | OrderProductsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: OrderProductsCreateManyProductInputEnvelope
    set?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    disconnect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    delete?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    connect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    update?: OrderProductsUpdateWithWhereUniqueWithoutProductInput | OrderProductsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: OrderProductsUpdateManyWithWhereWithoutProductInput | OrderProductsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: OrderProductsScalarWhereInput | OrderProductsScalarWhereInput[]
  }

  export type MasterProdUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<MasterProdCreateWithoutProductInput, MasterProdUncheckedCreateWithoutProductInput> | MasterProdCreateWithoutProductInput[] | MasterProdUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MasterProdCreateOrConnectWithoutProductInput | MasterProdCreateOrConnectWithoutProductInput[]
    upsert?: MasterProdUpsertWithWhereUniqueWithoutProductInput | MasterProdUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: MasterProdCreateManyProductInputEnvelope
    set?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    disconnect?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    delete?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    connect?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    update?: MasterProdUpdateWithWhereUniqueWithoutProductInput | MasterProdUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: MasterProdUpdateManyWithWhereWithoutProductInput | MasterProdUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: MasterProdScalarWhereInput | MasterProdScalarWhereInput[]
  }

  export type BasketUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<BasketCreateWithoutProductInput, BasketUncheckedCreateWithoutProductInput> | BasketCreateWithoutProductInput[] | BasketUncheckedCreateWithoutProductInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutProductInput | BasketCreateOrConnectWithoutProductInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutProductInput | BasketUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: BasketCreateManyProductInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutProductInput | BasketUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutProductInput | BasketUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type ProductLevelsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductLevelsCreateWithoutProductInput, ProductLevelsUncheckedCreateWithoutProductInput> | ProductLevelsCreateWithoutProductInput[] | ProductLevelsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductLevelsCreateOrConnectWithoutProductInput | ProductLevelsCreateOrConnectWithoutProductInput[]
    upsert?: ProductLevelsUpsertWithWhereUniqueWithoutProductInput | ProductLevelsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductLevelsCreateManyProductInputEnvelope
    set?: ProductLevelsWhereUniqueInput | ProductLevelsWhereUniqueInput[]
    disconnect?: ProductLevelsWhereUniqueInput | ProductLevelsWhereUniqueInput[]
    delete?: ProductLevelsWhereUniqueInput | ProductLevelsWhereUniqueInput[]
    connect?: ProductLevelsWhereUniqueInput | ProductLevelsWhereUniqueInput[]
    update?: ProductLevelsUpdateWithWhereUniqueWithoutProductInput | ProductLevelsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductLevelsUpdateManyWithWhereWithoutProductInput | ProductLevelsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductLevelsScalarWhereInput | ProductLevelsScalarWhereInput[]
  }

  export type ProductToolsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductToolsCreateWithoutProductInput, ProductToolsUncheckedCreateWithoutProductInput> | ProductToolsCreateWithoutProductInput[] | ProductToolsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductToolsCreateOrConnectWithoutProductInput | ProductToolsCreateOrConnectWithoutProductInput[]
    upsert?: ProductToolsUpsertWithWhereUniqueWithoutProductInput | ProductToolsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductToolsCreateManyProductInputEnvelope
    set?: ProductToolsWhereUniqueInput | ProductToolsWhereUniqueInput[]
    disconnect?: ProductToolsWhereUniqueInput | ProductToolsWhereUniqueInput[]
    delete?: ProductToolsWhereUniqueInput | ProductToolsWhereUniqueInput[]
    connect?: ProductToolsWhereUniqueInput | ProductToolsWhereUniqueInput[]
    update?: ProductToolsUpdateWithWhereUniqueWithoutProductInput | ProductToolsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductToolsUpdateManyWithWhereWithoutProductInput | ProductToolsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductToolsScalarWhereInput | ProductToolsScalarWhereInput[]
  }

  export type OrderProductsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<OrderProductsCreateWithoutProductInput, OrderProductsUncheckedCreateWithoutProductInput> | OrderProductsCreateWithoutProductInput[] | OrderProductsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderProductsCreateOrConnectWithoutProductInput | OrderProductsCreateOrConnectWithoutProductInput[]
    upsert?: OrderProductsUpsertWithWhereUniqueWithoutProductInput | OrderProductsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: OrderProductsCreateManyProductInputEnvelope
    set?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    disconnect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    delete?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    connect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    update?: OrderProductsUpdateWithWhereUniqueWithoutProductInput | OrderProductsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: OrderProductsUpdateManyWithWhereWithoutProductInput | OrderProductsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: OrderProductsScalarWhereInput | OrderProductsScalarWhereInput[]
  }

  export type MasterProdCreateNestedManyWithoutLevelInput = {
    create?: XOR<MasterProdCreateWithoutLevelInput, MasterProdUncheckedCreateWithoutLevelInput> | MasterProdCreateWithoutLevelInput[] | MasterProdUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: MasterProdCreateOrConnectWithoutLevelInput | MasterProdCreateOrConnectWithoutLevelInput[]
    createMany?: MasterProdCreateManyLevelInputEnvelope
    connect?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
  }

  export type ProductLevelsCreateNestedManyWithoutLevelInput = {
    create?: XOR<ProductLevelsCreateWithoutLevelInput, ProductLevelsUncheckedCreateWithoutLevelInput> | ProductLevelsCreateWithoutLevelInput[] | ProductLevelsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: ProductLevelsCreateOrConnectWithoutLevelInput | ProductLevelsCreateOrConnectWithoutLevelInput[]
    createMany?: ProductLevelsCreateManyLevelInputEnvelope
    connect?: ProductLevelsWhereUniqueInput | ProductLevelsWhereUniqueInput[]
  }

  export type OrderProductsCreateNestedManyWithoutLevelInput = {
    create?: XOR<OrderProductsCreateWithoutLevelInput, OrderProductsUncheckedCreateWithoutLevelInput> | OrderProductsCreateWithoutLevelInput[] | OrderProductsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: OrderProductsCreateOrConnectWithoutLevelInput | OrderProductsCreateOrConnectWithoutLevelInput[]
    createMany?: OrderProductsCreateManyLevelInputEnvelope
    connect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
  }

  export type BasketCreateNestedManyWithoutLevelInput = {
    create?: XOR<BasketCreateWithoutLevelInput, BasketUncheckedCreateWithoutLevelInput> | BasketCreateWithoutLevelInput[] | BasketUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutLevelInput | BasketCreateOrConnectWithoutLevelInput[]
    createMany?: BasketCreateManyLevelInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type MasterProdUncheckedCreateNestedManyWithoutLevelInput = {
    create?: XOR<MasterProdCreateWithoutLevelInput, MasterProdUncheckedCreateWithoutLevelInput> | MasterProdCreateWithoutLevelInput[] | MasterProdUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: MasterProdCreateOrConnectWithoutLevelInput | MasterProdCreateOrConnectWithoutLevelInput[]
    createMany?: MasterProdCreateManyLevelInputEnvelope
    connect?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
  }

  export type ProductLevelsUncheckedCreateNestedManyWithoutLevelInput = {
    create?: XOR<ProductLevelsCreateWithoutLevelInput, ProductLevelsUncheckedCreateWithoutLevelInput> | ProductLevelsCreateWithoutLevelInput[] | ProductLevelsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: ProductLevelsCreateOrConnectWithoutLevelInput | ProductLevelsCreateOrConnectWithoutLevelInput[]
    createMany?: ProductLevelsCreateManyLevelInputEnvelope
    connect?: ProductLevelsWhereUniqueInput | ProductLevelsWhereUniqueInput[]
  }

  export type OrderProductsUncheckedCreateNestedManyWithoutLevelInput = {
    create?: XOR<OrderProductsCreateWithoutLevelInput, OrderProductsUncheckedCreateWithoutLevelInput> | OrderProductsCreateWithoutLevelInput[] | OrderProductsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: OrderProductsCreateOrConnectWithoutLevelInput | OrderProductsCreateOrConnectWithoutLevelInput[]
    createMany?: OrderProductsCreateManyLevelInputEnvelope
    connect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
  }

  export type BasketUncheckedCreateNestedManyWithoutLevelInput = {
    create?: XOR<BasketCreateWithoutLevelInput, BasketUncheckedCreateWithoutLevelInput> | BasketCreateWithoutLevelInput[] | BasketUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutLevelInput | BasketCreateOrConnectWithoutLevelInput[]
    createMany?: BasketCreateManyLevelInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type MasterProdUpdateManyWithoutLevelNestedInput = {
    create?: XOR<MasterProdCreateWithoutLevelInput, MasterProdUncheckedCreateWithoutLevelInput> | MasterProdCreateWithoutLevelInput[] | MasterProdUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: MasterProdCreateOrConnectWithoutLevelInput | MasterProdCreateOrConnectWithoutLevelInput[]
    upsert?: MasterProdUpsertWithWhereUniqueWithoutLevelInput | MasterProdUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: MasterProdCreateManyLevelInputEnvelope
    set?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    disconnect?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    delete?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    connect?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    update?: MasterProdUpdateWithWhereUniqueWithoutLevelInput | MasterProdUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: MasterProdUpdateManyWithWhereWithoutLevelInput | MasterProdUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: MasterProdScalarWhereInput | MasterProdScalarWhereInput[]
  }

  export type ProductLevelsUpdateManyWithoutLevelNestedInput = {
    create?: XOR<ProductLevelsCreateWithoutLevelInput, ProductLevelsUncheckedCreateWithoutLevelInput> | ProductLevelsCreateWithoutLevelInput[] | ProductLevelsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: ProductLevelsCreateOrConnectWithoutLevelInput | ProductLevelsCreateOrConnectWithoutLevelInput[]
    upsert?: ProductLevelsUpsertWithWhereUniqueWithoutLevelInput | ProductLevelsUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: ProductLevelsCreateManyLevelInputEnvelope
    set?: ProductLevelsWhereUniqueInput | ProductLevelsWhereUniqueInput[]
    disconnect?: ProductLevelsWhereUniqueInput | ProductLevelsWhereUniqueInput[]
    delete?: ProductLevelsWhereUniqueInput | ProductLevelsWhereUniqueInput[]
    connect?: ProductLevelsWhereUniqueInput | ProductLevelsWhereUniqueInput[]
    update?: ProductLevelsUpdateWithWhereUniqueWithoutLevelInput | ProductLevelsUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: ProductLevelsUpdateManyWithWhereWithoutLevelInput | ProductLevelsUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: ProductLevelsScalarWhereInput | ProductLevelsScalarWhereInput[]
  }

  export type OrderProductsUpdateManyWithoutLevelNestedInput = {
    create?: XOR<OrderProductsCreateWithoutLevelInput, OrderProductsUncheckedCreateWithoutLevelInput> | OrderProductsCreateWithoutLevelInput[] | OrderProductsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: OrderProductsCreateOrConnectWithoutLevelInput | OrderProductsCreateOrConnectWithoutLevelInput[]
    upsert?: OrderProductsUpsertWithWhereUniqueWithoutLevelInput | OrderProductsUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: OrderProductsCreateManyLevelInputEnvelope
    set?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    disconnect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    delete?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    connect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    update?: OrderProductsUpdateWithWhereUniqueWithoutLevelInput | OrderProductsUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: OrderProductsUpdateManyWithWhereWithoutLevelInput | OrderProductsUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: OrderProductsScalarWhereInput | OrderProductsScalarWhereInput[]
  }

  export type BasketUpdateManyWithoutLevelNestedInput = {
    create?: XOR<BasketCreateWithoutLevelInput, BasketUncheckedCreateWithoutLevelInput> | BasketCreateWithoutLevelInput[] | BasketUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutLevelInput | BasketCreateOrConnectWithoutLevelInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutLevelInput | BasketUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: BasketCreateManyLevelInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutLevelInput | BasketUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutLevelInput | BasketUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type MasterProdUncheckedUpdateManyWithoutLevelNestedInput = {
    create?: XOR<MasterProdCreateWithoutLevelInput, MasterProdUncheckedCreateWithoutLevelInput> | MasterProdCreateWithoutLevelInput[] | MasterProdUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: MasterProdCreateOrConnectWithoutLevelInput | MasterProdCreateOrConnectWithoutLevelInput[]
    upsert?: MasterProdUpsertWithWhereUniqueWithoutLevelInput | MasterProdUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: MasterProdCreateManyLevelInputEnvelope
    set?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    disconnect?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    delete?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    connect?: MasterProdWhereUniqueInput | MasterProdWhereUniqueInput[]
    update?: MasterProdUpdateWithWhereUniqueWithoutLevelInput | MasterProdUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: MasterProdUpdateManyWithWhereWithoutLevelInput | MasterProdUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: MasterProdScalarWhereInput | MasterProdScalarWhereInput[]
  }

  export type ProductLevelsUncheckedUpdateManyWithoutLevelNestedInput = {
    create?: XOR<ProductLevelsCreateWithoutLevelInput, ProductLevelsUncheckedCreateWithoutLevelInput> | ProductLevelsCreateWithoutLevelInput[] | ProductLevelsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: ProductLevelsCreateOrConnectWithoutLevelInput | ProductLevelsCreateOrConnectWithoutLevelInput[]
    upsert?: ProductLevelsUpsertWithWhereUniqueWithoutLevelInput | ProductLevelsUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: ProductLevelsCreateManyLevelInputEnvelope
    set?: ProductLevelsWhereUniqueInput | ProductLevelsWhereUniqueInput[]
    disconnect?: ProductLevelsWhereUniqueInput | ProductLevelsWhereUniqueInput[]
    delete?: ProductLevelsWhereUniqueInput | ProductLevelsWhereUniqueInput[]
    connect?: ProductLevelsWhereUniqueInput | ProductLevelsWhereUniqueInput[]
    update?: ProductLevelsUpdateWithWhereUniqueWithoutLevelInput | ProductLevelsUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: ProductLevelsUpdateManyWithWhereWithoutLevelInput | ProductLevelsUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: ProductLevelsScalarWhereInput | ProductLevelsScalarWhereInput[]
  }

  export type OrderProductsUncheckedUpdateManyWithoutLevelNestedInput = {
    create?: XOR<OrderProductsCreateWithoutLevelInput, OrderProductsUncheckedCreateWithoutLevelInput> | OrderProductsCreateWithoutLevelInput[] | OrderProductsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: OrderProductsCreateOrConnectWithoutLevelInput | OrderProductsCreateOrConnectWithoutLevelInput[]
    upsert?: OrderProductsUpsertWithWhereUniqueWithoutLevelInput | OrderProductsUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: OrderProductsCreateManyLevelInputEnvelope
    set?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    disconnect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    delete?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    connect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    update?: OrderProductsUpdateWithWhereUniqueWithoutLevelInput | OrderProductsUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: OrderProductsUpdateManyWithWhereWithoutLevelInput | OrderProductsUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: OrderProductsScalarWhereInput | OrderProductsScalarWhereInput[]
  }

  export type BasketUncheckedUpdateManyWithoutLevelNestedInput = {
    create?: XOR<BasketCreateWithoutLevelInput, BasketUncheckedCreateWithoutLevelInput> | BasketCreateWithoutLevelInput[] | BasketUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutLevelInput | BasketCreateOrConnectWithoutLevelInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutLevelInput | BasketUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: BasketCreateManyLevelInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutLevelInput | BasketUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutLevelInput | BasketUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type LevelCreateNestedOneWithoutProductLevelsInput = {
    create?: XOR<LevelCreateWithoutProductLevelsInput, LevelUncheckedCreateWithoutProductLevelsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutProductLevelsInput
    connect?: LevelWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutProductLevelsInput = {
    create?: XOR<ProductCreateWithoutProductLevelsInput, ProductUncheckedCreateWithoutProductLevelsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductLevelsInput
    connect?: ProductWhereUniqueInput
  }

  export type LevelUpdateOneRequiredWithoutProductLevelsNestedInput = {
    create?: XOR<LevelCreateWithoutProductLevelsInput, LevelUncheckedCreateWithoutProductLevelsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutProductLevelsInput
    upsert?: LevelUpsertWithoutProductLevelsInput
    connect?: LevelWhereUniqueInput
    update?: XOR<XOR<LevelUpdateToOneWithWhereWithoutProductLevelsInput, LevelUpdateWithoutProductLevelsInput>, LevelUncheckedUpdateWithoutProductLevelsInput>
  }

  export type ProductUpdateOneRequiredWithoutProductLevelsNestedInput = {
    create?: XOR<ProductCreateWithoutProductLevelsInput, ProductUncheckedCreateWithoutProductLevelsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductLevelsInput
    upsert?: ProductUpsertWithoutProductLevelsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutProductLevelsInput, ProductUpdateWithoutProductLevelsInput>, ProductUncheckedUpdateWithoutProductLevelsInput>
  }

  export type ToolsCreateNestedOneWithoutProductToolsInput = {
    create?: XOR<ToolsCreateWithoutProductToolsInput, ToolsUncheckedCreateWithoutProductToolsInput>
    connectOrCreate?: ToolsCreateOrConnectWithoutProductToolsInput
    connect?: ToolsWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutProductToolsInput = {
    create?: XOR<ProductCreateWithoutProductToolsInput, ProductUncheckedCreateWithoutProductToolsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductToolsInput
    connect?: ProductWhereUniqueInput
  }

  export type ToolsUpdateOneRequiredWithoutProductToolsNestedInput = {
    create?: XOR<ToolsCreateWithoutProductToolsInput, ToolsUncheckedCreateWithoutProductToolsInput>
    connectOrCreate?: ToolsCreateOrConnectWithoutProductToolsInput
    upsert?: ToolsUpsertWithoutProductToolsInput
    connect?: ToolsWhereUniqueInput
    update?: XOR<XOR<ToolsUpdateToOneWithWhereWithoutProductToolsInput, ToolsUpdateWithoutProductToolsInput>, ToolsUncheckedUpdateWithoutProductToolsInput>
  }

  export type ProductUpdateOneRequiredWithoutProductToolsNestedInput = {
    create?: XOR<ProductCreateWithoutProductToolsInput, ProductUncheckedCreateWithoutProductToolsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductToolsInput
    upsert?: ProductUpsertWithoutProductToolsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutProductToolsInput, ProductUpdateWithoutProductToolsInput>, ProductUncheckedUpdateWithoutProductToolsInput>
  }

  export type UserCreateNestedOneWithoutOrderInput = {
    create?: XOR<UserCreateWithoutOrderInput, UserUncheckedCreateWithoutOrderInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrderInput
    connect?: UserWhereUniqueInput
  }

  export type OrderProductsCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderProductsCreateWithoutOrderInput, OrderProductsUncheckedCreateWithoutOrderInput> | OrderProductsCreateWithoutOrderInput[] | OrderProductsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderProductsCreateOrConnectWithoutOrderInput | OrderProductsCreateOrConnectWithoutOrderInput[]
    createMany?: OrderProductsCreateManyOrderInputEnvelope
    connect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
  }

  export type OrderMastersCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderMastersCreateWithoutOrderInput, OrderMastersUncheckedCreateWithoutOrderInput> | OrderMastersCreateWithoutOrderInput[] | OrderMastersUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderMastersCreateOrConnectWithoutOrderInput | OrderMastersCreateOrConnectWithoutOrderInput[]
    createMany?: OrderMastersCreateManyOrderInputEnvelope
    connect?: OrderMastersWhereUniqueInput | OrderMastersWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutOrderInput = {
    create?: XOR<CommentCreateWithoutOrderInput, CommentUncheckedCreateWithoutOrderInput> | CommentCreateWithoutOrderInput[] | CommentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutOrderInput | CommentCreateOrConnectWithoutOrderInput[]
    createMany?: CommentCreateManyOrderInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type OrderProductsUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderProductsCreateWithoutOrderInput, OrderProductsUncheckedCreateWithoutOrderInput> | OrderProductsCreateWithoutOrderInput[] | OrderProductsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderProductsCreateOrConnectWithoutOrderInput | OrderProductsCreateOrConnectWithoutOrderInput[]
    createMany?: OrderProductsCreateManyOrderInputEnvelope
    connect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
  }

  export type OrderMastersUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderMastersCreateWithoutOrderInput, OrderMastersUncheckedCreateWithoutOrderInput> | OrderMastersCreateWithoutOrderInput[] | OrderMastersUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderMastersCreateOrConnectWithoutOrderInput | OrderMastersCreateOrConnectWithoutOrderInput[]
    createMany?: OrderMastersCreateManyOrderInputEnvelope
    connect?: OrderMastersWhereUniqueInput | OrderMastersWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<CommentCreateWithoutOrderInput, CommentUncheckedCreateWithoutOrderInput> | CommentCreateWithoutOrderInput[] | CommentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutOrderInput | CommentCreateOrConnectWithoutOrderInput[]
    createMany?: CommentCreateManyOrderInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumpaymentTypeFieldUpdateOperationsInput = {
    set?: $Enums.paymentType
  }

  export type EnumorderStatusFieldUpdateOperationsInput = {
    set?: $Enums.orderStatus
  }

  export type UserUpdateOneRequiredWithoutOrderNestedInput = {
    create?: XOR<UserCreateWithoutOrderInput, UserUncheckedCreateWithoutOrderInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrderInput
    upsert?: UserUpsertWithoutOrderInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrderInput, UserUpdateWithoutOrderInput>, UserUncheckedUpdateWithoutOrderInput>
  }

  export type OrderProductsUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderProductsCreateWithoutOrderInput, OrderProductsUncheckedCreateWithoutOrderInput> | OrderProductsCreateWithoutOrderInput[] | OrderProductsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderProductsCreateOrConnectWithoutOrderInput | OrderProductsCreateOrConnectWithoutOrderInput[]
    upsert?: OrderProductsUpsertWithWhereUniqueWithoutOrderInput | OrderProductsUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderProductsCreateManyOrderInputEnvelope
    set?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    disconnect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    delete?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    connect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    update?: OrderProductsUpdateWithWhereUniqueWithoutOrderInput | OrderProductsUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderProductsUpdateManyWithWhereWithoutOrderInput | OrderProductsUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderProductsScalarWhereInput | OrderProductsScalarWhereInput[]
  }

  export type OrderMastersUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderMastersCreateWithoutOrderInput, OrderMastersUncheckedCreateWithoutOrderInput> | OrderMastersCreateWithoutOrderInput[] | OrderMastersUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderMastersCreateOrConnectWithoutOrderInput | OrderMastersCreateOrConnectWithoutOrderInput[]
    upsert?: OrderMastersUpsertWithWhereUniqueWithoutOrderInput | OrderMastersUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderMastersCreateManyOrderInputEnvelope
    set?: OrderMastersWhereUniqueInput | OrderMastersWhereUniqueInput[]
    disconnect?: OrderMastersWhereUniqueInput | OrderMastersWhereUniqueInput[]
    delete?: OrderMastersWhereUniqueInput | OrderMastersWhereUniqueInput[]
    connect?: OrderMastersWhereUniqueInput | OrderMastersWhereUniqueInput[]
    update?: OrderMastersUpdateWithWhereUniqueWithoutOrderInput | OrderMastersUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderMastersUpdateManyWithWhereWithoutOrderInput | OrderMastersUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderMastersScalarWhereInput | OrderMastersScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutOrderNestedInput = {
    create?: XOR<CommentCreateWithoutOrderInput, CommentUncheckedCreateWithoutOrderInput> | CommentCreateWithoutOrderInput[] | CommentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutOrderInput | CommentCreateOrConnectWithoutOrderInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutOrderInput | CommentUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: CommentCreateManyOrderInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutOrderInput | CommentUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutOrderInput | CommentUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type OrderProductsUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderProductsCreateWithoutOrderInput, OrderProductsUncheckedCreateWithoutOrderInput> | OrderProductsCreateWithoutOrderInput[] | OrderProductsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderProductsCreateOrConnectWithoutOrderInput | OrderProductsCreateOrConnectWithoutOrderInput[]
    upsert?: OrderProductsUpsertWithWhereUniqueWithoutOrderInput | OrderProductsUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderProductsCreateManyOrderInputEnvelope
    set?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    disconnect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    delete?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    connect?: OrderProductsWhereUniqueInput | OrderProductsWhereUniqueInput[]
    update?: OrderProductsUpdateWithWhereUniqueWithoutOrderInput | OrderProductsUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderProductsUpdateManyWithWhereWithoutOrderInput | OrderProductsUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderProductsScalarWhereInput | OrderProductsScalarWhereInput[]
  }

  export type OrderMastersUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderMastersCreateWithoutOrderInput, OrderMastersUncheckedCreateWithoutOrderInput> | OrderMastersCreateWithoutOrderInput[] | OrderMastersUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderMastersCreateOrConnectWithoutOrderInput | OrderMastersCreateOrConnectWithoutOrderInput[]
    upsert?: OrderMastersUpsertWithWhereUniqueWithoutOrderInput | OrderMastersUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderMastersCreateManyOrderInputEnvelope
    set?: OrderMastersWhereUniqueInput | OrderMastersWhereUniqueInput[]
    disconnect?: OrderMastersWhereUniqueInput | OrderMastersWhereUniqueInput[]
    delete?: OrderMastersWhereUniqueInput | OrderMastersWhereUniqueInput[]
    connect?: OrderMastersWhereUniqueInput | OrderMastersWhereUniqueInput[]
    update?: OrderMastersUpdateWithWhereUniqueWithoutOrderInput | OrderMastersUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderMastersUpdateManyWithWhereWithoutOrderInput | OrderMastersUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderMastersScalarWhereInput | OrderMastersScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<CommentCreateWithoutOrderInput, CommentUncheckedCreateWithoutOrderInput> | CommentCreateWithoutOrderInput[] | CommentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutOrderInput | CommentCreateOrConnectWithoutOrderInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutOrderInput | CommentUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: CommentCreateManyOrderInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutOrderInput | CommentUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutOrderInput | CommentUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type OrderCreateNestedOneWithoutOrderProductsInput = {
    create?: XOR<OrderCreateWithoutOrderProductsInput, OrderUncheckedCreateWithoutOrderProductsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderProductsInput
    connect?: OrderWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutOrderProductsInput = {
    create?: XOR<ProductCreateWithoutOrderProductsInput, ProductUncheckedCreateWithoutOrderProductsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrderProductsInput
    connect?: ProductWhereUniqueInput
  }

  export type LevelCreateNestedOneWithoutOrderProductsInput = {
    create?: XOR<LevelCreateWithoutOrderProductsInput, LevelUncheckedCreateWithoutOrderProductsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutOrderProductsInput
    connect?: LevelWhereUniqueInput
  }

  export type ToolsCreateNestedOneWithoutOrderProductsInput = {
    create?: XOR<ToolsCreateWithoutOrderProductsInput, ToolsUncheckedCreateWithoutOrderProductsInput>
    connectOrCreate?: ToolsCreateOrConnectWithoutOrderProductsInput
    connect?: ToolsWhereUniqueInput
  }

  export type EnumMasterDailyFieldUpdateOperationsInput = {
    set?: $Enums.MasterDaily
  }

  export type OrderUpdateOneRequiredWithoutOrderProductsNestedInput = {
    create?: XOR<OrderCreateWithoutOrderProductsInput, OrderUncheckedCreateWithoutOrderProductsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderProductsInput
    upsert?: OrderUpsertWithoutOrderProductsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutOrderProductsInput, OrderUpdateWithoutOrderProductsInput>, OrderUncheckedUpdateWithoutOrderProductsInput>
  }

  export type ProductUpdateOneRequiredWithoutOrderProductsNestedInput = {
    create?: XOR<ProductCreateWithoutOrderProductsInput, ProductUncheckedCreateWithoutOrderProductsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrderProductsInput
    upsert?: ProductUpsertWithoutOrderProductsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutOrderProductsInput, ProductUpdateWithoutOrderProductsInput>, ProductUncheckedUpdateWithoutOrderProductsInput>
  }

  export type LevelUpdateOneRequiredWithoutOrderProductsNestedInput = {
    create?: XOR<LevelCreateWithoutOrderProductsInput, LevelUncheckedCreateWithoutOrderProductsInput>
    connectOrCreate?: LevelCreateOrConnectWithoutOrderProductsInput
    upsert?: LevelUpsertWithoutOrderProductsInput
    connect?: LevelWhereUniqueInput
    update?: XOR<XOR<LevelUpdateToOneWithWhereWithoutOrderProductsInput, LevelUpdateWithoutOrderProductsInput>, LevelUncheckedUpdateWithoutOrderProductsInput>
  }

  export type ToolsUpdateOneRequiredWithoutOrderProductsNestedInput = {
    create?: XOR<ToolsCreateWithoutOrderProductsInput, ToolsUncheckedCreateWithoutOrderProductsInput>
    connectOrCreate?: ToolsCreateOrConnectWithoutOrderProductsInput
    upsert?: ToolsUpsertWithoutOrderProductsInput
    connect?: ToolsWhereUniqueInput
    update?: XOR<XOR<ToolsUpdateToOneWithWhereWithoutOrderProductsInput, ToolsUpdateWithoutOrderProductsInput>, ToolsUncheckedUpdateWithoutOrderProductsInput>
  }

  export type OrderCreateNestedOneWithoutOrderMastersInput = {
    create?: XOR<OrderCreateWithoutOrderMastersInput, OrderUncheckedCreateWithoutOrderMastersInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderMastersInput
    connect?: OrderWhereUniqueInput
  }

  export type MasterCreateNestedOneWithoutOrderMastersInput = {
    create?: XOR<MasterCreateWithoutOrderMastersInput, MasterUncheckedCreateWithoutOrderMastersInput>
    connectOrCreate?: MasterCreateOrConnectWithoutOrderMastersInput
    connect?: MasterWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutOrderMastersNestedInput = {
    create?: XOR<OrderCreateWithoutOrderMastersInput, OrderUncheckedCreateWithoutOrderMastersInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderMastersInput
    upsert?: OrderUpsertWithoutOrderMastersInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutOrderMastersInput, OrderUpdateWithoutOrderMastersInput>, OrderUncheckedUpdateWithoutOrderMastersInput>
  }

  export type MasterUpdateOneRequiredWithoutOrderMastersNestedInput = {
    create?: XOR<MasterCreateWithoutOrderMastersInput, MasterUncheckedCreateWithoutOrderMastersInput>
    connectOrCreate?: MasterCreateOrConnectWithoutOrderMastersInput
    upsert?: MasterUpsertWithoutOrderMastersInput
    connect?: MasterWhereUniqueInput
    update?: XOR<XOR<MasterUpdateToOneWithWhereWithoutOrderMastersInput, MasterUpdateWithoutOrderMastersInput>, MasterUncheckedUpdateWithoutOrderMastersInput>
  }

  export type UserCreateNestedOneWithoutCommentInput = {
    create?: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentInput
    connect?: UserWhereUniqueInput
  }

  export type OrderCreateNestedOneWithoutCommentInput = {
    create?: XOR<OrderCreateWithoutCommentInput, OrderUncheckedCreateWithoutCommentInput>
    connectOrCreate?: OrderCreateOrConnectWithoutCommentInput
    connect?: OrderWhereUniqueInput
  }

  export type MasterRatingsCreateNestedManyWithoutCommentInput = {
    create?: XOR<MasterRatingsCreateWithoutCommentInput, MasterRatingsUncheckedCreateWithoutCommentInput> | MasterRatingsCreateWithoutCommentInput[] | MasterRatingsUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutCommentInput | MasterRatingsCreateOrConnectWithoutCommentInput[]
    createMany?: MasterRatingsCreateManyCommentInputEnvelope
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
  }

  export type MasterRatingsUncheckedCreateNestedManyWithoutCommentInput = {
    create?: XOR<MasterRatingsCreateWithoutCommentInput, MasterRatingsUncheckedCreateWithoutCommentInput> | MasterRatingsCreateWithoutCommentInput[] | MasterRatingsUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutCommentInput | MasterRatingsCreateOrConnectWithoutCommentInput[]
    createMany?: MasterRatingsCreateManyCommentInputEnvelope
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentInput
    upsert?: UserUpsertWithoutCommentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentInput, UserUpdateWithoutCommentInput>, UserUncheckedUpdateWithoutCommentInput>
  }

  export type OrderUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<OrderCreateWithoutCommentInput, OrderUncheckedCreateWithoutCommentInput>
    connectOrCreate?: OrderCreateOrConnectWithoutCommentInput
    upsert?: OrderUpsertWithoutCommentInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutCommentInput, OrderUpdateWithoutCommentInput>, OrderUncheckedUpdateWithoutCommentInput>
  }

  export type MasterRatingsUpdateManyWithoutCommentNestedInput = {
    create?: XOR<MasterRatingsCreateWithoutCommentInput, MasterRatingsUncheckedCreateWithoutCommentInput> | MasterRatingsCreateWithoutCommentInput[] | MasterRatingsUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutCommentInput | MasterRatingsCreateOrConnectWithoutCommentInput[]
    upsert?: MasterRatingsUpsertWithWhereUniqueWithoutCommentInput | MasterRatingsUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: MasterRatingsCreateManyCommentInputEnvelope
    set?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    disconnect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    delete?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    update?: MasterRatingsUpdateWithWhereUniqueWithoutCommentInput | MasterRatingsUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: MasterRatingsUpdateManyWithWhereWithoutCommentInput | MasterRatingsUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: MasterRatingsScalarWhereInput | MasterRatingsScalarWhereInput[]
  }

  export type MasterRatingsUncheckedUpdateManyWithoutCommentNestedInput = {
    create?: XOR<MasterRatingsCreateWithoutCommentInput, MasterRatingsUncheckedCreateWithoutCommentInput> | MasterRatingsCreateWithoutCommentInput[] | MasterRatingsUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: MasterRatingsCreateOrConnectWithoutCommentInput | MasterRatingsCreateOrConnectWithoutCommentInput[]
    upsert?: MasterRatingsUpsertWithWhereUniqueWithoutCommentInput | MasterRatingsUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: MasterRatingsCreateManyCommentInputEnvelope
    set?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    disconnect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    delete?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    connect?: MasterRatingsWhereUniqueInput | MasterRatingsWhereUniqueInput[]
    update?: MasterRatingsUpdateWithWhereUniqueWithoutCommentInput | MasterRatingsUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: MasterRatingsUpdateManyWithWhereWithoutCommentInput | MasterRatingsUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: MasterRatingsScalarWhereInput | MasterRatingsScalarWhereInput[]
  }

  export type CommentCreateNestedOneWithoutMasterRatingsInput = {
    create?: XOR<CommentCreateWithoutMasterRatingsInput, CommentUncheckedCreateWithoutMasterRatingsInput>
    connectOrCreate?: CommentCreateOrConnectWithoutMasterRatingsInput
    connect?: CommentWhereUniqueInput
  }

  export type MasterCreateNestedOneWithoutMasterRatingsInput = {
    create?: XOR<MasterCreateWithoutMasterRatingsInput, MasterUncheckedCreateWithoutMasterRatingsInput>
    connectOrCreate?: MasterCreateOrConnectWithoutMasterRatingsInput
    connect?: MasterWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CommentUpdateOneRequiredWithoutMasterRatingsNestedInput = {
    create?: XOR<CommentCreateWithoutMasterRatingsInput, CommentUncheckedCreateWithoutMasterRatingsInput>
    connectOrCreate?: CommentCreateOrConnectWithoutMasterRatingsInput
    upsert?: CommentUpsertWithoutMasterRatingsInput
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutMasterRatingsInput, CommentUpdateWithoutMasterRatingsInput>, CommentUncheckedUpdateWithoutMasterRatingsInput>
  }

  export type MasterUpdateOneRequiredWithoutMasterRatingsNestedInput = {
    create?: XOR<MasterCreateWithoutMasterRatingsInput, MasterUncheckedCreateWithoutMasterRatingsInput>
    connectOrCreate?: MasterCreateOrConnectWithoutMasterRatingsInput
    upsert?: MasterUpsertWithoutMasterRatingsInput
    connect?: MasterWhereUniqueInput
    update?: XOR<XOR<MasterUpdateToOneWithWhereWithoutMasterRatingsInput, MasterUpdateWithoutMasterRatingsInput>, MasterUncheckedUpdateWithoutMasterRatingsInput>
  }

  export type ProductCreateNestedOneWithoutBasketInput = {
    create?: XOR<ProductCreateWithoutBasketInput, ProductUncheckedCreateWithoutBasketInput>
    connectOrCreate?: ProductCreateOrConnectWithoutBasketInput
    connect?: ProductWhereUniqueInput
  }

  export type ToolsCreateNestedOneWithoutBasketInput = {
    create?: XOR<ToolsCreateWithoutBasketInput, ToolsUncheckedCreateWithoutBasketInput>
    connectOrCreate?: ToolsCreateOrConnectWithoutBasketInput
    connect?: ToolsWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBasketInput = {
    create?: XOR<UserCreateWithoutBasketInput, UserUncheckedCreateWithoutBasketInput>
    connectOrCreate?: UserCreateOrConnectWithoutBasketInput
    connect?: UserWhereUniqueInput
  }

  export type LevelCreateNestedOneWithoutBasketInput = {
    create?: XOR<LevelCreateWithoutBasketInput, LevelUncheckedCreateWithoutBasketInput>
    connectOrCreate?: LevelCreateOrConnectWithoutBasketInput
    connect?: LevelWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutBasketNestedInput = {
    create?: XOR<ProductCreateWithoutBasketInput, ProductUncheckedCreateWithoutBasketInput>
    connectOrCreate?: ProductCreateOrConnectWithoutBasketInput
    upsert?: ProductUpsertWithoutBasketInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutBasketInput, ProductUpdateWithoutBasketInput>, ProductUncheckedUpdateWithoutBasketInput>
  }

  export type ToolsUpdateOneRequiredWithoutBasketNestedInput = {
    create?: XOR<ToolsCreateWithoutBasketInput, ToolsUncheckedCreateWithoutBasketInput>
    connectOrCreate?: ToolsCreateOrConnectWithoutBasketInput
    upsert?: ToolsUpsertWithoutBasketInput
    connect?: ToolsWhereUniqueInput
    update?: XOR<XOR<ToolsUpdateToOneWithWhereWithoutBasketInput, ToolsUpdateWithoutBasketInput>, ToolsUncheckedUpdateWithoutBasketInput>
  }

  export type UserUpdateOneRequiredWithoutBasketNestedInput = {
    create?: XOR<UserCreateWithoutBasketInput, UserUncheckedCreateWithoutBasketInput>
    connectOrCreate?: UserCreateOrConnectWithoutBasketInput
    upsert?: UserUpsertWithoutBasketInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBasketInput, UserUpdateWithoutBasketInput>, UserUncheckedUpdateWithoutBasketInput>
  }

  export type LevelUpdateOneRequiredWithoutBasketNestedInput = {
    create?: XOR<LevelCreateWithoutBasketInput, LevelUncheckedCreateWithoutBasketInput>
    connectOrCreate?: LevelCreateOrConnectWithoutBasketInput
    upsert?: LevelUpsertWithoutBasketInput
    connect?: LevelWhereUniqueInput
    update?: XOR<XOR<LevelUpdateToOneWithWhereWithoutBasketInput, LevelUpdateWithoutBasketInput>, LevelUncheckedUpdateWithoutBasketInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumuserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.userRole | EnumuserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.userRole[] | ListEnumuserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.userRole[] | ListEnumuserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumuserRoleFilter<$PrismaModel> | $Enums.userRole
  }

  export type NestedEnumuserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.userStatus | EnumuserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumuserStatusFilter<$PrismaModel> | $Enums.userStatus
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumuserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.userRole | EnumuserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.userRole[] | ListEnumuserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.userRole[] | ListEnumuserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumuserRoleWithAggregatesFilter<$PrismaModel> | $Enums.userRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuserRoleFilter<$PrismaModel>
    _max?: NestedEnumuserRoleFilter<$PrismaModel>
  }

  export type NestedEnumuserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.userStatus | EnumuserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumuserStatusWithAggregatesFilter<$PrismaModel> | $Enums.userStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuserStatusFilter<$PrismaModel>
    _max?: NestedEnumuserStatusFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumpaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.paymentType | EnumpaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.paymentType[] | ListEnumpaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.paymentType[] | ListEnumpaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumpaymentTypeFilter<$PrismaModel> | $Enums.paymentType
  }

  export type NestedEnumorderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.orderStatus | EnumorderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.orderStatus[] | ListEnumorderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.orderStatus[] | ListEnumorderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumorderStatusFilter<$PrismaModel> | $Enums.orderStatus
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumpaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.paymentType | EnumpaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.paymentType[] | ListEnumpaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.paymentType[] | ListEnumpaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumpaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.paymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumpaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumpaymentTypeFilter<$PrismaModel>
  }

  export type NestedEnumorderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.orderStatus | EnumorderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.orderStatus[] | ListEnumorderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.orderStatus[] | ListEnumorderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumorderStatusWithAggregatesFilter<$PrismaModel> | $Enums.orderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumorderStatusFilter<$PrismaModel>
    _max?: NestedEnumorderStatusFilter<$PrismaModel>
  }

  export type NestedEnumMasterDailyFilter<$PrismaModel = never> = {
    equals?: $Enums.MasterDaily | EnumMasterDailyFieldRefInput<$PrismaModel>
    in?: $Enums.MasterDaily[] | ListEnumMasterDailyFieldRefInput<$PrismaModel>
    notIn?: $Enums.MasterDaily[] | ListEnumMasterDailyFieldRefInput<$PrismaModel>
    not?: NestedEnumMasterDailyFilter<$PrismaModel> | $Enums.MasterDaily
  }

  export type NestedEnumMasterDailyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MasterDaily | EnumMasterDailyFieldRefInput<$PrismaModel>
    in?: $Enums.MasterDaily[] | ListEnumMasterDailyFieldRefInput<$PrismaModel>
    notIn?: $Enums.MasterDaily[] | ListEnumMasterDailyFieldRefInput<$PrismaModel>
    not?: NestedEnumMasterDailyWithAggregatesFilter<$PrismaModel> | $Enums.MasterDaily
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMasterDailyFilter<$PrismaModel>
    _max?: NestedEnumMasterDailyFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type UserCreateWithoutRegionInput = {
    id?: string
    fullName: string
    password: string
    phoneNumber: string
    IIN?: string | null
    MFO?: string | null
    RS?: string | null
    Bank?: string | null
    OKED?: string | null
    ADDRESS: string
    role: $Enums.userRole
    status: $Enums.userStatus
    Basket?: BasketCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Order?: OrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRegionInput = {
    id?: string
    fullName: string
    password: string
    phoneNumber: string
    IIN?: string | null
    MFO?: string | null
    RS?: string | null
    Bank?: string | null
    OKED?: string | null
    ADDRESS: string
    role: $Enums.userRole
    status: $Enums.userStatus
    Basket?: BasketUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Order?: OrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRegionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput>
  }

  export type UserCreateManyRegionInputEnvelope = {
    data: UserCreateManyRegionInput | UserCreateManyRegionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutRegionInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRegionInput, UserUncheckedUpdateWithoutRegionInput>
    create: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRegionInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRegionInput, UserUncheckedUpdateWithoutRegionInput>
  }

  export type UserUpdateManyWithWhereWithoutRegionInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRegionInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    regionId?: StringFilter<"User"> | string
    IIN?: StringNullableFilter<"User"> | string | null
    MFO?: StringNullableFilter<"User"> | string | null
    RS?: StringNullableFilter<"User"> | string | null
    Bank?: StringNullableFilter<"User"> | string | null
    OKED?: StringNullableFilter<"User"> | string | null
    ADDRESS?: StringFilter<"User"> | string
    role?: EnumuserRoleFilter<"User"> | $Enums.userRole
    status?: EnumuserStatusFilter<"User"> | $Enums.userStatus
  }

  export type ToolsCreateWithoutBrandInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    price: number
    quantity: number
    code: number
    image: string
    isActive: boolean
    capacity: CapacityCreateNestedOneWithoutToolsInput
    size: SizeCreateNestedOneWithoutToolsInput
    Basket?: BasketCreateNestedManyWithoutToolInput
    OrderProducts?: OrderProductsCreateNestedManyWithoutToolInput
    ProductTools?: ProductToolsCreateNestedManyWithoutToolInput
  }

  export type ToolsUncheckedCreateWithoutBrandInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    price: number
    quantity: number
    code: number
    image: string
    isActive: boolean
    capacityId: string
    sizeId: string
    Basket?: BasketUncheckedCreateNestedManyWithoutToolInput
    OrderProducts?: OrderProductsUncheckedCreateNestedManyWithoutToolInput
    ProductTools?: ProductToolsUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolsCreateOrConnectWithoutBrandInput = {
    where: ToolsWhereUniqueInput
    create: XOR<ToolsCreateWithoutBrandInput, ToolsUncheckedCreateWithoutBrandInput>
  }

  export type ToolsCreateManyBrandInputEnvelope = {
    data: ToolsCreateManyBrandInput | ToolsCreateManyBrandInput[]
    skipDuplicates?: boolean
  }

  export type ToolsUpsertWithWhereUniqueWithoutBrandInput = {
    where: ToolsWhereUniqueInput
    update: XOR<ToolsUpdateWithoutBrandInput, ToolsUncheckedUpdateWithoutBrandInput>
    create: XOR<ToolsCreateWithoutBrandInput, ToolsUncheckedCreateWithoutBrandInput>
  }

  export type ToolsUpdateWithWhereUniqueWithoutBrandInput = {
    where: ToolsWhereUniqueInput
    data: XOR<ToolsUpdateWithoutBrandInput, ToolsUncheckedUpdateWithoutBrandInput>
  }

  export type ToolsUpdateManyWithWhereWithoutBrandInput = {
    where: ToolsScalarWhereInput
    data: XOR<ToolsUpdateManyMutationInput, ToolsUncheckedUpdateManyWithoutBrandInput>
  }

  export type ToolsScalarWhereInput = {
    AND?: ToolsScalarWhereInput | ToolsScalarWhereInput[]
    OR?: ToolsScalarWhereInput[]
    NOT?: ToolsScalarWhereInput | ToolsScalarWhereInput[]
    id?: StringFilter<"Tools"> | string
    nameUz?: StringFilter<"Tools"> | string
    nameRU?: StringFilter<"Tools"> | string
    nameEng?: StringFilter<"Tools"> | string
    descriptionUz?: StringFilter<"Tools"> | string
    descriptionRU?: StringFilter<"Tools"> | string
    descriptionEng?: StringFilter<"Tools"> | string
    price?: IntFilter<"Tools"> | number
    quantity?: IntFilter<"Tools"> | number
    code?: IntFilter<"Tools"> | number
    image?: StringFilter<"Tools"> | string
    brandId?: StringFilter<"Tools"> | string
    isActive?: BoolFilter<"Tools"> | boolean
    capacityId?: StringFilter<"Tools"> | string
    sizeId?: StringFilter<"Tools"> | string
  }

  export type ToolsCreateWithoutCapacityInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    price: number
    quantity: number
    code: number
    image: string
    isActive: boolean
    brand: BrandCreateNestedOneWithoutToolsInput
    size: SizeCreateNestedOneWithoutToolsInput
    Basket?: BasketCreateNestedManyWithoutToolInput
    OrderProducts?: OrderProductsCreateNestedManyWithoutToolInput
    ProductTools?: ProductToolsCreateNestedManyWithoutToolInput
  }

  export type ToolsUncheckedCreateWithoutCapacityInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    price: number
    quantity: number
    code: number
    image: string
    brandId: string
    isActive: boolean
    sizeId: string
    Basket?: BasketUncheckedCreateNestedManyWithoutToolInput
    OrderProducts?: OrderProductsUncheckedCreateNestedManyWithoutToolInput
    ProductTools?: ProductToolsUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolsCreateOrConnectWithoutCapacityInput = {
    where: ToolsWhereUniqueInput
    create: XOR<ToolsCreateWithoutCapacityInput, ToolsUncheckedCreateWithoutCapacityInput>
  }

  export type ToolsCreateManyCapacityInputEnvelope = {
    data: ToolsCreateManyCapacityInput | ToolsCreateManyCapacityInput[]
    skipDuplicates?: boolean
  }

  export type ToolsUpsertWithWhereUniqueWithoutCapacityInput = {
    where: ToolsWhereUniqueInput
    update: XOR<ToolsUpdateWithoutCapacityInput, ToolsUncheckedUpdateWithoutCapacityInput>
    create: XOR<ToolsCreateWithoutCapacityInput, ToolsUncheckedCreateWithoutCapacityInput>
  }

  export type ToolsUpdateWithWhereUniqueWithoutCapacityInput = {
    where: ToolsWhereUniqueInput
    data: XOR<ToolsUpdateWithoutCapacityInput, ToolsUncheckedUpdateWithoutCapacityInput>
  }

  export type ToolsUpdateManyWithWhereWithoutCapacityInput = {
    where: ToolsScalarWhereInput
    data: XOR<ToolsUpdateManyMutationInput, ToolsUncheckedUpdateManyWithoutCapacityInput>
  }

  export type ToolsCreateWithoutSizeInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    price: number
    quantity: number
    code: number
    image: string
    isActive: boolean
    brand: BrandCreateNestedOneWithoutToolsInput
    capacity: CapacityCreateNestedOneWithoutToolsInput
    Basket?: BasketCreateNestedManyWithoutToolInput
    OrderProducts?: OrderProductsCreateNestedManyWithoutToolInput
    ProductTools?: ProductToolsCreateNestedManyWithoutToolInput
  }

  export type ToolsUncheckedCreateWithoutSizeInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    price: number
    quantity: number
    code: number
    image: string
    brandId: string
    isActive: boolean
    capacityId: string
    Basket?: BasketUncheckedCreateNestedManyWithoutToolInput
    OrderProducts?: OrderProductsUncheckedCreateNestedManyWithoutToolInput
    ProductTools?: ProductToolsUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolsCreateOrConnectWithoutSizeInput = {
    where: ToolsWhereUniqueInput
    create: XOR<ToolsCreateWithoutSizeInput, ToolsUncheckedCreateWithoutSizeInput>
  }

  export type ToolsCreateManySizeInputEnvelope = {
    data: ToolsCreateManySizeInput | ToolsCreateManySizeInput[]
    skipDuplicates?: boolean
  }

  export type ToolsUpsertWithWhereUniqueWithoutSizeInput = {
    where: ToolsWhereUniqueInput
    update: XOR<ToolsUpdateWithoutSizeInput, ToolsUncheckedUpdateWithoutSizeInput>
    create: XOR<ToolsCreateWithoutSizeInput, ToolsUncheckedCreateWithoutSizeInput>
  }

  export type ToolsUpdateWithWhereUniqueWithoutSizeInput = {
    where: ToolsWhereUniqueInput
    data: XOR<ToolsUpdateWithoutSizeInput, ToolsUncheckedUpdateWithoutSizeInput>
  }

  export type ToolsUpdateManyWithWhereWithoutSizeInput = {
    where: ToolsScalarWhereInput
    data: XOR<ToolsUpdateManyMutationInput, ToolsUncheckedUpdateManyWithoutSizeInput>
  }

  export type RegionCreateWithoutUserInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
  }

  export type RegionUncheckedCreateWithoutUserInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
  }

  export type RegionCreateOrConnectWithoutUserInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutUserInput, RegionUncheckedCreateWithoutUserInput>
  }

  export type BasketCreateWithoutUserInput = {
    id?: string
    productCount: number
    quantity: number
    measure: number
    total: number
    timeUnit: $Enums.MasterDaily
    product: ProductCreateNestedOneWithoutBasketInput
    tool: ToolsCreateNestedOneWithoutBasketInput
    level: LevelCreateNestedOneWithoutBasketInput
  }

  export type BasketUncheckedCreateWithoutUserInput = {
    id?: string
    productId: string
    productCount: number
    quantity: number
    measure: number
    toolId: string
    total: number
    timeUnit: $Enums.MasterDaily
    levelId: string
  }

  export type BasketCreateOrConnectWithoutUserInput = {
    where: BasketWhereUniqueInput
    create: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput>
  }

  export type BasketCreateManyUserInputEnvelope = {
    data: BasketCreateManyUserInput | BasketCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutUserInput = {
    id?: string
    text: string
    order: OrderCreateNestedOneWithoutCommentInput
    MasterRatings?: MasterRatingsCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: string
    text: string
    orderId: string
    MasterRatings?: MasterRatingsUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: CommentCreateManyUserInput | CommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutUserInput = {
    id?: string
    productCount: number
    quantity: number
    measure: number
    tool: number
    total: number
    location: string
    address: string
    date: Date | string
    paymentType: $Enums.paymentType
    withDelivery: boolean
    status: $Enums.orderStatus
    commentToDelivery: string
    OrderProducts?: OrderProductsCreateNestedManyWithoutOrderInput
    OrderMasters?: OrderMastersCreateNestedManyWithoutOrderInput
    Comment?: CommentCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutUserInput = {
    id?: string
    productCount: number
    quantity: number
    measure: number
    tool: number
    total: number
    location: string
    address: string
    date: Date | string
    paymentType: $Enums.paymentType
    withDelivery: boolean
    status: $Enums.orderStatus
    commentToDelivery: string
    OrderProducts?: OrderProductsUncheckedCreateNestedManyWithoutOrderInput
    OrderMasters?: OrderMastersUncheckedCreateNestedManyWithoutOrderInput
    Comment?: CommentUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutUserInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderCreateManyUserInputEnvelope = {
    data: OrderCreateManyUserInput | OrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RegionUpsertWithoutUserInput = {
    update: XOR<RegionUpdateWithoutUserInput, RegionUncheckedUpdateWithoutUserInput>
    create: XOR<RegionCreateWithoutUserInput, RegionUncheckedCreateWithoutUserInput>
    where?: RegionWhereInput
  }

  export type RegionUpdateToOneWithWhereWithoutUserInput = {
    where?: RegionWhereInput
    data: XOR<RegionUpdateWithoutUserInput, RegionUncheckedUpdateWithoutUserInput>
  }

  export type RegionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
  }

  export type RegionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
  }

  export type BasketUpsertWithWhereUniqueWithoutUserInput = {
    where: BasketWhereUniqueInput
    update: XOR<BasketUpdateWithoutUserInput, BasketUncheckedUpdateWithoutUserInput>
    create: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput>
  }

  export type BasketUpdateWithWhereUniqueWithoutUserInput = {
    where: BasketWhereUniqueInput
    data: XOR<BasketUpdateWithoutUserInput, BasketUncheckedUpdateWithoutUserInput>
  }

  export type BasketUpdateManyWithWhereWithoutUserInput = {
    where: BasketScalarWhereInput
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyWithoutUserInput>
  }

  export type BasketScalarWhereInput = {
    AND?: BasketScalarWhereInput | BasketScalarWhereInput[]
    OR?: BasketScalarWhereInput[]
    NOT?: BasketScalarWhereInput | BasketScalarWhereInput[]
    id?: StringFilter<"Basket"> | string
    productId?: StringFilter<"Basket"> | string
    productCount?: IntFilter<"Basket"> | number
    quantity?: IntFilter<"Basket"> | number
    measure?: IntFilter<"Basket"> | number
    toolId?: StringFilter<"Basket"> | string
    total?: IntFilter<"Basket"> | number
    userId?: StringFilter<"Basket"> | string
    timeUnit?: EnumMasterDailyFilter<"Basket"> | $Enums.MasterDaily
    levelId?: StringFilter<"Basket"> | string
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutUserInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    text?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    orderId?: StringFilter<"Comment"> | string
  }

  export type OrderUpsertWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
  }

  export type OrderUpdateManyWithWhereWithoutUserInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutUserInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: StringFilter<"Order"> | string
    productCount?: IntFilter<"Order"> | number
    quantity?: IntFilter<"Order"> | number
    measure?: IntFilter<"Order"> | number
    tool?: IntFilter<"Order"> | number
    total?: IntFilter<"Order"> | number
    location?: StringFilter<"Order"> | string
    address?: StringFilter<"Order"> | string
    date?: DateTimeFilter<"Order"> | Date | string
    paymentType?: EnumpaymentTypeFilter<"Order"> | $Enums.paymentType
    withDelivery?: BoolFilter<"Order"> | boolean
    status?: EnumorderStatusFilter<"Order"> | $Enums.orderStatus
    commentToDelivery?: StringFilter<"Order"> | string
    userId?: StringFilter<"Order"> | string
  }

  export type BrandCreateWithoutToolsInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
  }

  export type BrandUncheckedCreateWithoutToolsInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
  }

  export type BrandCreateOrConnectWithoutToolsInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutToolsInput, BrandUncheckedCreateWithoutToolsInput>
  }

  export type CapacityCreateWithoutToolsInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
  }

  export type CapacityUncheckedCreateWithoutToolsInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
  }

  export type CapacityCreateOrConnectWithoutToolsInput = {
    where: CapacityWhereUniqueInput
    create: XOR<CapacityCreateWithoutToolsInput, CapacityUncheckedCreateWithoutToolsInput>
  }

  export type SizeCreateWithoutToolsInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
  }

  export type SizeUncheckedCreateWithoutToolsInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
  }

  export type SizeCreateOrConnectWithoutToolsInput = {
    where: SizeWhereUniqueInput
    create: XOR<SizeCreateWithoutToolsInput, SizeUncheckedCreateWithoutToolsInput>
  }

  export type BasketCreateWithoutToolInput = {
    id?: string
    productCount: number
    quantity: number
    measure: number
    total: number
    timeUnit: $Enums.MasterDaily
    product: ProductCreateNestedOneWithoutBasketInput
    user: UserCreateNestedOneWithoutBasketInput
    level: LevelCreateNestedOneWithoutBasketInput
  }

  export type BasketUncheckedCreateWithoutToolInput = {
    id?: string
    productId: string
    productCount: number
    quantity: number
    measure: number
    total: number
    userId: string
    timeUnit: $Enums.MasterDaily
    levelId: string
  }

  export type BasketCreateOrConnectWithoutToolInput = {
    where: BasketWhereUniqueInput
    create: XOR<BasketCreateWithoutToolInput, BasketUncheckedCreateWithoutToolInput>
  }

  export type BasketCreateManyToolInputEnvelope = {
    data: BasketCreateManyToolInput | BasketCreateManyToolInput[]
    skipDuplicates?: boolean
  }

  export type OrderProductsCreateWithoutToolInput = {
    id?: string
    count: number
    price: number
    workingTime: number
    timeUnit: $Enums.MasterDaily
    order: OrderCreateNestedOneWithoutOrderProductsInput
    product: ProductCreateNestedOneWithoutOrderProductsInput
    level: LevelCreateNestedOneWithoutOrderProductsInput
  }

  export type OrderProductsUncheckedCreateWithoutToolInput = {
    id?: string
    orderId: string
    productId: string
    levelId: string
    count: number
    price: number
    workingTime: number
    timeUnit: $Enums.MasterDaily
  }

  export type OrderProductsCreateOrConnectWithoutToolInput = {
    where: OrderProductsWhereUniqueInput
    create: XOR<OrderProductsCreateWithoutToolInput, OrderProductsUncheckedCreateWithoutToolInput>
  }

  export type OrderProductsCreateManyToolInputEnvelope = {
    data: OrderProductsCreateManyToolInput | OrderProductsCreateManyToolInput[]
    skipDuplicates?: boolean
  }

  export type ProductToolsCreateWithoutToolInput = {
    id?: string
    product: ProductCreateNestedOneWithoutProductToolsInput
  }

  export type ProductToolsUncheckedCreateWithoutToolInput = {
    id?: string
    productId: string
  }

  export type ProductToolsCreateOrConnectWithoutToolInput = {
    where: ProductToolsWhereUniqueInput
    create: XOR<ProductToolsCreateWithoutToolInput, ProductToolsUncheckedCreateWithoutToolInput>
  }

  export type ProductToolsCreateManyToolInputEnvelope = {
    data: ProductToolsCreateManyToolInput | ProductToolsCreateManyToolInput[]
    skipDuplicates?: boolean
  }

  export type BrandUpsertWithoutToolsInput = {
    update: XOR<BrandUpdateWithoutToolsInput, BrandUncheckedUpdateWithoutToolsInput>
    create: XOR<BrandCreateWithoutToolsInput, BrandUncheckedCreateWithoutToolsInput>
    where?: BrandWhereInput
  }

  export type BrandUpdateToOneWithWhereWithoutToolsInput = {
    where?: BrandWhereInput
    data: XOR<BrandUpdateWithoutToolsInput, BrandUncheckedUpdateWithoutToolsInput>
  }

  export type BrandUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
  }

  export type BrandUncheckedUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
  }

  export type CapacityUpsertWithoutToolsInput = {
    update: XOR<CapacityUpdateWithoutToolsInput, CapacityUncheckedUpdateWithoutToolsInput>
    create: XOR<CapacityCreateWithoutToolsInput, CapacityUncheckedCreateWithoutToolsInput>
    where?: CapacityWhereInput
  }

  export type CapacityUpdateToOneWithWhereWithoutToolsInput = {
    where?: CapacityWhereInput
    data: XOR<CapacityUpdateWithoutToolsInput, CapacityUncheckedUpdateWithoutToolsInput>
  }

  export type CapacityUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
  }

  export type CapacityUncheckedUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
  }

  export type SizeUpsertWithoutToolsInput = {
    update: XOR<SizeUpdateWithoutToolsInput, SizeUncheckedUpdateWithoutToolsInput>
    create: XOR<SizeCreateWithoutToolsInput, SizeUncheckedCreateWithoutToolsInput>
    where?: SizeWhereInput
  }

  export type SizeUpdateToOneWithWhereWithoutToolsInput = {
    where?: SizeWhereInput
    data: XOR<SizeUpdateWithoutToolsInput, SizeUncheckedUpdateWithoutToolsInput>
  }

  export type SizeUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
  }

  export type SizeUncheckedUpdateWithoutToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
  }

  export type BasketUpsertWithWhereUniqueWithoutToolInput = {
    where: BasketWhereUniqueInput
    update: XOR<BasketUpdateWithoutToolInput, BasketUncheckedUpdateWithoutToolInput>
    create: XOR<BasketCreateWithoutToolInput, BasketUncheckedCreateWithoutToolInput>
  }

  export type BasketUpdateWithWhereUniqueWithoutToolInput = {
    where: BasketWhereUniqueInput
    data: XOR<BasketUpdateWithoutToolInput, BasketUncheckedUpdateWithoutToolInput>
  }

  export type BasketUpdateManyWithWhereWithoutToolInput = {
    where: BasketScalarWhereInput
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyWithoutToolInput>
  }

  export type OrderProductsUpsertWithWhereUniqueWithoutToolInput = {
    where: OrderProductsWhereUniqueInput
    update: XOR<OrderProductsUpdateWithoutToolInput, OrderProductsUncheckedUpdateWithoutToolInput>
    create: XOR<OrderProductsCreateWithoutToolInput, OrderProductsUncheckedCreateWithoutToolInput>
  }

  export type OrderProductsUpdateWithWhereUniqueWithoutToolInput = {
    where: OrderProductsWhereUniqueInput
    data: XOR<OrderProductsUpdateWithoutToolInput, OrderProductsUncheckedUpdateWithoutToolInput>
  }

  export type OrderProductsUpdateManyWithWhereWithoutToolInput = {
    where: OrderProductsScalarWhereInput
    data: XOR<OrderProductsUpdateManyMutationInput, OrderProductsUncheckedUpdateManyWithoutToolInput>
  }

  export type OrderProductsScalarWhereInput = {
    AND?: OrderProductsScalarWhereInput | OrderProductsScalarWhereInput[]
    OR?: OrderProductsScalarWhereInput[]
    NOT?: OrderProductsScalarWhereInput | OrderProductsScalarWhereInput[]
    id?: StringFilter<"OrderProducts"> | string
    orderId?: StringFilter<"OrderProducts"> | string
    productId?: StringFilter<"OrderProducts"> | string
    levelId?: StringFilter<"OrderProducts"> | string
    toolId?: StringFilter<"OrderProducts"> | string
    count?: IntFilter<"OrderProducts"> | number
    price?: IntFilter<"OrderProducts"> | number
    workingTime?: IntFilter<"OrderProducts"> | number
    timeUnit?: EnumMasterDailyFilter<"OrderProducts"> | $Enums.MasterDaily
  }

  export type ProductToolsUpsertWithWhereUniqueWithoutToolInput = {
    where: ProductToolsWhereUniqueInput
    update: XOR<ProductToolsUpdateWithoutToolInput, ProductToolsUncheckedUpdateWithoutToolInput>
    create: XOR<ProductToolsCreateWithoutToolInput, ProductToolsUncheckedCreateWithoutToolInput>
  }

  export type ProductToolsUpdateWithWhereUniqueWithoutToolInput = {
    where: ProductToolsWhereUniqueInput
    data: XOR<ProductToolsUpdateWithoutToolInput, ProductToolsUncheckedUpdateWithoutToolInput>
  }

  export type ProductToolsUpdateManyWithWhereWithoutToolInput = {
    where: ProductToolsScalarWhereInput
    data: XOR<ProductToolsUpdateManyMutationInput, ProductToolsUncheckedUpdateManyWithoutToolInput>
  }

  export type ProductToolsScalarWhereInput = {
    AND?: ProductToolsScalarWhereInput | ProductToolsScalarWhereInput[]
    OR?: ProductToolsScalarWhereInput[]
    NOT?: ProductToolsScalarWhereInput | ProductToolsScalarWhereInput[]
    id?: StringFilter<"ProductTools"> | string
    toolId?: StringFilter<"ProductTools"> | string
    productId?: StringFilter<"ProductTools"> | string
  }

  export type MasterProdCreateWithoutMasterInput = {
    id?: string
    minWorkingHour: number
    priceHourly: number
    priceDaily: number
    experience: number
    product: ProductCreateNestedOneWithoutMasterProdInput
    level: LevelCreateNestedOneWithoutMasterProdInput
  }

  export type MasterProdUncheckedCreateWithoutMasterInput = {
    id?: string
    productId: string
    minWorkingHour: number
    levelId: string
    priceHourly: number
    priceDaily: number
    experience: number
  }

  export type MasterProdCreateOrConnectWithoutMasterInput = {
    where: MasterProdWhereUniqueInput
    create: XOR<MasterProdCreateWithoutMasterInput, MasterProdUncheckedCreateWithoutMasterInput>
  }

  export type MasterProdCreateManyMasterInputEnvelope = {
    data: MasterProdCreateManyMasterInput | MasterProdCreateManyMasterInput[]
    skipDuplicates?: boolean
  }

  export type OrderMastersCreateWithoutMasterInput = {
    id?: string
    order: OrderCreateNestedOneWithoutOrderMastersInput
  }

  export type OrderMastersUncheckedCreateWithoutMasterInput = {
    id?: string
    orderId: string
  }

  export type OrderMastersCreateOrConnectWithoutMasterInput = {
    where: OrderMastersWhereUniqueInput
    create: XOR<OrderMastersCreateWithoutMasterInput, OrderMastersUncheckedCreateWithoutMasterInput>
  }

  export type OrderMastersCreateManyMasterInputEnvelope = {
    data: OrderMastersCreateManyMasterInput | OrderMastersCreateManyMasterInput[]
    skipDuplicates?: boolean
  }

  export type MasterRatingsCreateWithoutMasterInput = {
    id?: string
    star: number
    comment: CommentCreateNestedOneWithoutMasterRatingsInput
  }

  export type MasterRatingsUncheckedCreateWithoutMasterInput = {
    id?: string
    star: number
    commentId: string
  }

  export type MasterRatingsCreateOrConnectWithoutMasterInput = {
    where: MasterRatingsWhereUniqueInput
    create: XOR<MasterRatingsCreateWithoutMasterInput, MasterRatingsUncheckedCreateWithoutMasterInput>
  }

  export type MasterRatingsCreateManyMasterInputEnvelope = {
    data: MasterRatingsCreateManyMasterInput | MasterRatingsCreateManyMasterInput[]
    skipDuplicates?: boolean
  }

  export type MasterProdUpsertWithWhereUniqueWithoutMasterInput = {
    where: MasterProdWhereUniqueInput
    update: XOR<MasterProdUpdateWithoutMasterInput, MasterProdUncheckedUpdateWithoutMasterInput>
    create: XOR<MasterProdCreateWithoutMasterInput, MasterProdUncheckedCreateWithoutMasterInput>
  }

  export type MasterProdUpdateWithWhereUniqueWithoutMasterInput = {
    where: MasterProdWhereUniqueInput
    data: XOR<MasterProdUpdateWithoutMasterInput, MasterProdUncheckedUpdateWithoutMasterInput>
  }

  export type MasterProdUpdateManyWithWhereWithoutMasterInput = {
    where: MasterProdScalarWhereInput
    data: XOR<MasterProdUpdateManyMutationInput, MasterProdUncheckedUpdateManyWithoutMasterInput>
  }

  export type MasterProdScalarWhereInput = {
    AND?: MasterProdScalarWhereInput | MasterProdScalarWhereInput[]
    OR?: MasterProdScalarWhereInput[]
    NOT?: MasterProdScalarWhereInput | MasterProdScalarWhereInput[]
    id?: StringFilter<"MasterProd"> | string
    masterId?: StringFilter<"MasterProd"> | string
    productId?: StringFilter<"MasterProd"> | string
    minWorkingHour?: IntFilter<"MasterProd"> | number
    levelId?: StringFilter<"MasterProd"> | string
    priceHourly?: IntFilter<"MasterProd"> | number
    priceDaily?: IntFilter<"MasterProd"> | number
    experience?: IntFilter<"MasterProd"> | number
  }

  export type OrderMastersUpsertWithWhereUniqueWithoutMasterInput = {
    where: OrderMastersWhereUniqueInput
    update: XOR<OrderMastersUpdateWithoutMasterInput, OrderMastersUncheckedUpdateWithoutMasterInput>
    create: XOR<OrderMastersCreateWithoutMasterInput, OrderMastersUncheckedCreateWithoutMasterInput>
  }

  export type OrderMastersUpdateWithWhereUniqueWithoutMasterInput = {
    where: OrderMastersWhereUniqueInput
    data: XOR<OrderMastersUpdateWithoutMasterInput, OrderMastersUncheckedUpdateWithoutMasterInput>
  }

  export type OrderMastersUpdateManyWithWhereWithoutMasterInput = {
    where: OrderMastersScalarWhereInput
    data: XOR<OrderMastersUpdateManyMutationInput, OrderMastersUncheckedUpdateManyWithoutMasterInput>
  }

  export type OrderMastersScalarWhereInput = {
    AND?: OrderMastersScalarWhereInput | OrderMastersScalarWhereInput[]
    OR?: OrderMastersScalarWhereInput[]
    NOT?: OrderMastersScalarWhereInput | OrderMastersScalarWhereInput[]
    id?: StringFilter<"OrderMasters"> | string
    orderId?: StringFilter<"OrderMasters"> | string
    masterId?: StringFilter<"OrderMasters"> | string
  }

  export type MasterRatingsUpsertWithWhereUniqueWithoutMasterInput = {
    where: MasterRatingsWhereUniqueInput
    update: XOR<MasterRatingsUpdateWithoutMasterInput, MasterRatingsUncheckedUpdateWithoutMasterInput>
    create: XOR<MasterRatingsCreateWithoutMasterInput, MasterRatingsUncheckedCreateWithoutMasterInput>
  }

  export type MasterRatingsUpdateWithWhereUniqueWithoutMasterInput = {
    where: MasterRatingsWhereUniqueInput
    data: XOR<MasterRatingsUpdateWithoutMasterInput, MasterRatingsUncheckedUpdateWithoutMasterInput>
  }

  export type MasterRatingsUpdateManyWithWhereWithoutMasterInput = {
    where: MasterRatingsScalarWhereInput
    data: XOR<MasterRatingsUpdateManyMutationInput, MasterRatingsUncheckedUpdateManyWithoutMasterInput>
  }

  export type MasterRatingsScalarWhereInput = {
    AND?: MasterRatingsScalarWhereInput | MasterRatingsScalarWhereInput[]
    OR?: MasterRatingsScalarWhereInput[]
    NOT?: MasterRatingsScalarWhereInput | MasterRatingsScalarWhereInput[]
    id?: StringFilter<"MasterRatings"> | string
    star?: FloatFilter<"MasterRatings"> | number
    masterId?: StringFilter<"MasterRatings"> | string
    commentId?: StringFilter<"MasterRatings"> | string
  }

  export type MasterCreateWithoutMasterProdInput = {
    id?: string
    fullName: string
    phone: string
    isActive: boolean
    year: number
    image: string
    passportImage: string
    about: string
    OrderMasters?: OrderMastersCreateNestedManyWithoutMasterInput
    MasterRatings?: MasterRatingsCreateNestedManyWithoutMasterInput
  }

  export type MasterUncheckedCreateWithoutMasterProdInput = {
    id?: string
    fullName: string
    phone: string
    isActive: boolean
    year: number
    image: string
    passportImage: string
    about: string
    OrderMasters?: OrderMastersUncheckedCreateNestedManyWithoutMasterInput
    MasterRatings?: MasterRatingsUncheckedCreateNestedManyWithoutMasterInput
  }

  export type MasterCreateOrConnectWithoutMasterProdInput = {
    where: MasterWhereUniqueInput
    create: XOR<MasterCreateWithoutMasterProdInput, MasterUncheckedCreateWithoutMasterProdInput>
  }

  export type ProductCreateWithoutMasterProdInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    image: string
    isActive: boolean
    Basket?: BasketCreateNestedManyWithoutProductInput
    productLevels?: ProductLevelsCreateNestedManyWithoutProductInput
    ProductTools?: ProductToolsCreateNestedManyWithoutProductInput
    OrderProducts?: OrderProductsCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutMasterProdInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    image: string
    isActive: boolean
    Basket?: BasketUncheckedCreateNestedManyWithoutProductInput
    productLevels?: ProductLevelsUncheckedCreateNestedManyWithoutProductInput
    ProductTools?: ProductToolsUncheckedCreateNestedManyWithoutProductInput
    OrderProducts?: OrderProductsUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutMasterProdInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutMasterProdInput, ProductUncheckedCreateWithoutMasterProdInput>
  }

  export type LevelCreateWithoutMasterProdInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    productLevels?: ProductLevelsCreateNestedManyWithoutLevelInput
    OrderProducts?: OrderProductsCreateNestedManyWithoutLevelInput
    Basket?: BasketCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateWithoutMasterProdInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    productLevels?: ProductLevelsUncheckedCreateNestedManyWithoutLevelInput
    OrderProducts?: OrderProductsUncheckedCreateNestedManyWithoutLevelInput
    Basket?: BasketUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelCreateOrConnectWithoutMasterProdInput = {
    where: LevelWhereUniqueInput
    create: XOR<LevelCreateWithoutMasterProdInput, LevelUncheckedCreateWithoutMasterProdInput>
  }

  export type MasterUpsertWithoutMasterProdInput = {
    update: XOR<MasterUpdateWithoutMasterProdInput, MasterUncheckedUpdateWithoutMasterProdInput>
    create: XOR<MasterCreateWithoutMasterProdInput, MasterUncheckedCreateWithoutMasterProdInput>
    where?: MasterWhereInput
  }

  export type MasterUpdateToOneWithWhereWithoutMasterProdInput = {
    where?: MasterWhereInput
    data: XOR<MasterUpdateWithoutMasterProdInput, MasterUncheckedUpdateWithoutMasterProdInput>
  }

  export type MasterUpdateWithoutMasterProdInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    passportImage?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    OrderMasters?: OrderMastersUpdateManyWithoutMasterNestedInput
    MasterRatings?: MasterRatingsUpdateManyWithoutMasterNestedInput
  }

  export type MasterUncheckedUpdateWithoutMasterProdInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    passportImage?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    OrderMasters?: OrderMastersUncheckedUpdateManyWithoutMasterNestedInput
    MasterRatings?: MasterRatingsUncheckedUpdateManyWithoutMasterNestedInput
  }

  export type ProductUpsertWithoutMasterProdInput = {
    update: XOR<ProductUpdateWithoutMasterProdInput, ProductUncheckedUpdateWithoutMasterProdInput>
    create: XOR<ProductCreateWithoutMasterProdInput, ProductUncheckedCreateWithoutMasterProdInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutMasterProdInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutMasterProdInput, ProductUncheckedUpdateWithoutMasterProdInput>
  }

  export type ProductUpdateWithoutMasterProdInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    Basket?: BasketUpdateManyWithoutProductNestedInput
    productLevels?: ProductLevelsUpdateManyWithoutProductNestedInput
    ProductTools?: ProductToolsUpdateManyWithoutProductNestedInput
    OrderProducts?: OrderProductsUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutMasterProdInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    Basket?: BasketUncheckedUpdateManyWithoutProductNestedInput
    productLevels?: ProductLevelsUncheckedUpdateManyWithoutProductNestedInput
    ProductTools?: ProductToolsUncheckedUpdateManyWithoutProductNestedInput
    OrderProducts?: OrderProductsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type LevelUpsertWithoutMasterProdInput = {
    update: XOR<LevelUpdateWithoutMasterProdInput, LevelUncheckedUpdateWithoutMasterProdInput>
    create: XOR<LevelCreateWithoutMasterProdInput, LevelUncheckedCreateWithoutMasterProdInput>
    where?: LevelWhereInput
  }

  export type LevelUpdateToOneWithWhereWithoutMasterProdInput = {
    where?: LevelWhereInput
    data: XOR<LevelUpdateWithoutMasterProdInput, LevelUncheckedUpdateWithoutMasterProdInput>
  }

  export type LevelUpdateWithoutMasterProdInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    productLevels?: ProductLevelsUpdateManyWithoutLevelNestedInput
    OrderProducts?: OrderProductsUpdateManyWithoutLevelNestedInput
    Basket?: BasketUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateWithoutMasterProdInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    productLevels?: ProductLevelsUncheckedUpdateManyWithoutLevelNestedInput
    OrderProducts?: OrderProductsUncheckedUpdateManyWithoutLevelNestedInput
    Basket?: BasketUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type MasterProdCreateWithoutProductInput = {
    id?: string
    minWorkingHour: number
    priceHourly: number
    priceDaily: number
    experience: number
    master: MasterCreateNestedOneWithoutMasterProdInput
    level: LevelCreateNestedOneWithoutMasterProdInput
  }

  export type MasterProdUncheckedCreateWithoutProductInput = {
    id?: string
    masterId: string
    minWorkingHour: number
    levelId: string
    priceHourly: number
    priceDaily: number
    experience: number
  }

  export type MasterProdCreateOrConnectWithoutProductInput = {
    where: MasterProdWhereUniqueInput
    create: XOR<MasterProdCreateWithoutProductInput, MasterProdUncheckedCreateWithoutProductInput>
  }

  export type MasterProdCreateManyProductInputEnvelope = {
    data: MasterProdCreateManyProductInput | MasterProdCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type BasketCreateWithoutProductInput = {
    id?: string
    productCount: number
    quantity: number
    measure: number
    total: number
    timeUnit: $Enums.MasterDaily
    tool: ToolsCreateNestedOneWithoutBasketInput
    user: UserCreateNestedOneWithoutBasketInput
    level: LevelCreateNestedOneWithoutBasketInput
  }

  export type BasketUncheckedCreateWithoutProductInput = {
    id?: string
    productCount: number
    quantity: number
    measure: number
    toolId: string
    total: number
    userId: string
    timeUnit: $Enums.MasterDaily
    levelId: string
  }

  export type BasketCreateOrConnectWithoutProductInput = {
    where: BasketWhereUniqueInput
    create: XOR<BasketCreateWithoutProductInput, BasketUncheckedCreateWithoutProductInput>
  }

  export type BasketCreateManyProductInputEnvelope = {
    data: BasketCreateManyProductInput | BasketCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ProductLevelsCreateWithoutProductInput = {
    id?: string
    priceHourly: number
    priceDaily: number
    minWorkingHour: number
    level: LevelCreateNestedOneWithoutProductLevelsInput
  }

  export type ProductLevelsUncheckedCreateWithoutProductInput = {
    id?: string
    levelId: string
    priceHourly: number
    priceDaily: number
    minWorkingHour: number
  }

  export type ProductLevelsCreateOrConnectWithoutProductInput = {
    where: ProductLevelsWhereUniqueInput
    create: XOR<ProductLevelsCreateWithoutProductInput, ProductLevelsUncheckedCreateWithoutProductInput>
  }

  export type ProductLevelsCreateManyProductInputEnvelope = {
    data: ProductLevelsCreateManyProductInput | ProductLevelsCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ProductToolsCreateWithoutProductInput = {
    id?: string
    tool: ToolsCreateNestedOneWithoutProductToolsInput
  }

  export type ProductToolsUncheckedCreateWithoutProductInput = {
    id?: string
    toolId: string
  }

  export type ProductToolsCreateOrConnectWithoutProductInput = {
    where: ProductToolsWhereUniqueInput
    create: XOR<ProductToolsCreateWithoutProductInput, ProductToolsUncheckedCreateWithoutProductInput>
  }

  export type ProductToolsCreateManyProductInputEnvelope = {
    data: ProductToolsCreateManyProductInput | ProductToolsCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type OrderProductsCreateWithoutProductInput = {
    id?: string
    count: number
    price: number
    workingTime: number
    timeUnit: $Enums.MasterDaily
    order: OrderCreateNestedOneWithoutOrderProductsInput
    level: LevelCreateNestedOneWithoutOrderProductsInput
    tool: ToolsCreateNestedOneWithoutOrderProductsInput
  }

  export type OrderProductsUncheckedCreateWithoutProductInput = {
    id?: string
    orderId: string
    levelId: string
    toolId: string
    count: number
    price: number
    workingTime: number
    timeUnit: $Enums.MasterDaily
  }

  export type OrderProductsCreateOrConnectWithoutProductInput = {
    where: OrderProductsWhereUniqueInput
    create: XOR<OrderProductsCreateWithoutProductInput, OrderProductsUncheckedCreateWithoutProductInput>
  }

  export type OrderProductsCreateManyProductInputEnvelope = {
    data: OrderProductsCreateManyProductInput | OrderProductsCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type MasterProdUpsertWithWhereUniqueWithoutProductInput = {
    where: MasterProdWhereUniqueInput
    update: XOR<MasterProdUpdateWithoutProductInput, MasterProdUncheckedUpdateWithoutProductInput>
    create: XOR<MasterProdCreateWithoutProductInput, MasterProdUncheckedCreateWithoutProductInput>
  }

  export type MasterProdUpdateWithWhereUniqueWithoutProductInput = {
    where: MasterProdWhereUniqueInput
    data: XOR<MasterProdUpdateWithoutProductInput, MasterProdUncheckedUpdateWithoutProductInput>
  }

  export type MasterProdUpdateManyWithWhereWithoutProductInput = {
    where: MasterProdScalarWhereInput
    data: XOR<MasterProdUpdateManyMutationInput, MasterProdUncheckedUpdateManyWithoutProductInput>
  }

  export type BasketUpsertWithWhereUniqueWithoutProductInput = {
    where: BasketWhereUniqueInput
    update: XOR<BasketUpdateWithoutProductInput, BasketUncheckedUpdateWithoutProductInput>
    create: XOR<BasketCreateWithoutProductInput, BasketUncheckedCreateWithoutProductInput>
  }

  export type BasketUpdateWithWhereUniqueWithoutProductInput = {
    where: BasketWhereUniqueInput
    data: XOR<BasketUpdateWithoutProductInput, BasketUncheckedUpdateWithoutProductInput>
  }

  export type BasketUpdateManyWithWhereWithoutProductInput = {
    where: BasketScalarWhereInput
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductLevelsUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductLevelsWhereUniqueInput
    update: XOR<ProductLevelsUpdateWithoutProductInput, ProductLevelsUncheckedUpdateWithoutProductInput>
    create: XOR<ProductLevelsCreateWithoutProductInput, ProductLevelsUncheckedCreateWithoutProductInput>
  }

  export type ProductLevelsUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductLevelsWhereUniqueInput
    data: XOR<ProductLevelsUpdateWithoutProductInput, ProductLevelsUncheckedUpdateWithoutProductInput>
  }

  export type ProductLevelsUpdateManyWithWhereWithoutProductInput = {
    where: ProductLevelsScalarWhereInput
    data: XOR<ProductLevelsUpdateManyMutationInput, ProductLevelsUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductLevelsScalarWhereInput = {
    AND?: ProductLevelsScalarWhereInput | ProductLevelsScalarWhereInput[]
    OR?: ProductLevelsScalarWhereInput[]
    NOT?: ProductLevelsScalarWhereInput | ProductLevelsScalarWhereInput[]
    id?: StringFilter<"ProductLevels"> | string
    levelId?: StringFilter<"ProductLevels"> | string
    productId?: StringFilter<"ProductLevels"> | string
    priceHourly?: IntFilter<"ProductLevels"> | number
    priceDaily?: IntFilter<"ProductLevels"> | number
    minWorkingHour?: IntFilter<"ProductLevels"> | number
  }

  export type ProductToolsUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductToolsWhereUniqueInput
    update: XOR<ProductToolsUpdateWithoutProductInput, ProductToolsUncheckedUpdateWithoutProductInput>
    create: XOR<ProductToolsCreateWithoutProductInput, ProductToolsUncheckedCreateWithoutProductInput>
  }

  export type ProductToolsUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductToolsWhereUniqueInput
    data: XOR<ProductToolsUpdateWithoutProductInput, ProductToolsUncheckedUpdateWithoutProductInput>
  }

  export type ProductToolsUpdateManyWithWhereWithoutProductInput = {
    where: ProductToolsScalarWhereInput
    data: XOR<ProductToolsUpdateManyMutationInput, ProductToolsUncheckedUpdateManyWithoutProductInput>
  }

  export type OrderProductsUpsertWithWhereUniqueWithoutProductInput = {
    where: OrderProductsWhereUniqueInput
    update: XOR<OrderProductsUpdateWithoutProductInput, OrderProductsUncheckedUpdateWithoutProductInput>
    create: XOR<OrderProductsCreateWithoutProductInput, OrderProductsUncheckedCreateWithoutProductInput>
  }

  export type OrderProductsUpdateWithWhereUniqueWithoutProductInput = {
    where: OrderProductsWhereUniqueInput
    data: XOR<OrderProductsUpdateWithoutProductInput, OrderProductsUncheckedUpdateWithoutProductInput>
  }

  export type OrderProductsUpdateManyWithWhereWithoutProductInput = {
    where: OrderProductsScalarWhereInput
    data: XOR<OrderProductsUpdateManyMutationInput, OrderProductsUncheckedUpdateManyWithoutProductInput>
  }

  export type MasterProdCreateWithoutLevelInput = {
    id?: string
    minWorkingHour: number
    priceHourly: number
    priceDaily: number
    experience: number
    master: MasterCreateNestedOneWithoutMasterProdInput
    product: ProductCreateNestedOneWithoutMasterProdInput
  }

  export type MasterProdUncheckedCreateWithoutLevelInput = {
    id?: string
    masterId: string
    productId: string
    minWorkingHour: number
    priceHourly: number
    priceDaily: number
    experience: number
  }

  export type MasterProdCreateOrConnectWithoutLevelInput = {
    where: MasterProdWhereUniqueInput
    create: XOR<MasterProdCreateWithoutLevelInput, MasterProdUncheckedCreateWithoutLevelInput>
  }

  export type MasterProdCreateManyLevelInputEnvelope = {
    data: MasterProdCreateManyLevelInput | MasterProdCreateManyLevelInput[]
    skipDuplicates?: boolean
  }

  export type ProductLevelsCreateWithoutLevelInput = {
    id?: string
    priceHourly: number
    priceDaily: number
    minWorkingHour: number
    product: ProductCreateNestedOneWithoutProductLevelsInput
  }

  export type ProductLevelsUncheckedCreateWithoutLevelInput = {
    id?: string
    productId: string
    priceHourly: number
    priceDaily: number
    minWorkingHour: number
  }

  export type ProductLevelsCreateOrConnectWithoutLevelInput = {
    where: ProductLevelsWhereUniqueInput
    create: XOR<ProductLevelsCreateWithoutLevelInput, ProductLevelsUncheckedCreateWithoutLevelInput>
  }

  export type ProductLevelsCreateManyLevelInputEnvelope = {
    data: ProductLevelsCreateManyLevelInput | ProductLevelsCreateManyLevelInput[]
    skipDuplicates?: boolean
  }

  export type OrderProductsCreateWithoutLevelInput = {
    id?: string
    count: number
    price: number
    workingTime: number
    timeUnit: $Enums.MasterDaily
    order: OrderCreateNestedOneWithoutOrderProductsInput
    product: ProductCreateNestedOneWithoutOrderProductsInput
    tool: ToolsCreateNestedOneWithoutOrderProductsInput
  }

  export type OrderProductsUncheckedCreateWithoutLevelInput = {
    id?: string
    orderId: string
    productId: string
    toolId: string
    count: number
    price: number
    workingTime: number
    timeUnit: $Enums.MasterDaily
  }

  export type OrderProductsCreateOrConnectWithoutLevelInput = {
    where: OrderProductsWhereUniqueInput
    create: XOR<OrderProductsCreateWithoutLevelInput, OrderProductsUncheckedCreateWithoutLevelInput>
  }

  export type OrderProductsCreateManyLevelInputEnvelope = {
    data: OrderProductsCreateManyLevelInput | OrderProductsCreateManyLevelInput[]
    skipDuplicates?: boolean
  }

  export type BasketCreateWithoutLevelInput = {
    id?: string
    productCount: number
    quantity: number
    measure: number
    total: number
    timeUnit: $Enums.MasterDaily
    product: ProductCreateNestedOneWithoutBasketInput
    tool: ToolsCreateNestedOneWithoutBasketInput
    user: UserCreateNestedOneWithoutBasketInput
  }

  export type BasketUncheckedCreateWithoutLevelInput = {
    id?: string
    productId: string
    productCount: number
    quantity: number
    measure: number
    toolId: string
    total: number
    userId: string
    timeUnit: $Enums.MasterDaily
  }

  export type BasketCreateOrConnectWithoutLevelInput = {
    where: BasketWhereUniqueInput
    create: XOR<BasketCreateWithoutLevelInput, BasketUncheckedCreateWithoutLevelInput>
  }

  export type BasketCreateManyLevelInputEnvelope = {
    data: BasketCreateManyLevelInput | BasketCreateManyLevelInput[]
    skipDuplicates?: boolean
  }

  export type MasterProdUpsertWithWhereUniqueWithoutLevelInput = {
    where: MasterProdWhereUniqueInput
    update: XOR<MasterProdUpdateWithoutLevelInput, MasterProdUncheckedUpdateWithoutLevelInput>
    create: XOR<MasterProdCreateWithoutLevelInput, MasterProdUncheckedCreateWithoutLevelInput>
  }

  export type MasterProdUpdateWithWhereUniqueWithoutLevelInput = {
    where: MasterProdWhereUniqueInput
    data: XOR<MasterProdUpdateWithoutLevelInput, MasterProdUncheckedUpdateWithoutLevelInput>
  }

  export type MasterProdUpdateManyWithWhereWithoutLevelInput = {
    where: MasterProdScalarWhereInput
    data: XOR<MasterProdUpdateManyMutationInput, MasterProdUncheckedUpdateManyWithoutLevelInput>
  }

  export type ProductLevelsUpsertWithWhereUniqueWithoutLevelInput = {
    where: ProductLevelsWhereUniqueInput
    update: XOR<ProductLevelsUpdateWithoutLevelInput, ProductLevelsUncheckedUpdateWithoutLevelInput>
    create: XOR<ProductLevelsCreateWithoutLevelInput, ProductLevelsUncheckedCreateWithoutLevelInput>
  }

  export type ProductLevelsUpdateWithWhereUniqueWithoutLevelInput = {
    where: ProductLevelsWhereUniqueInput
    data: XOR<ProductLevelsUpdateWithoutLevelInput, ProductLevelsUncheckedUpdateWithoutLevelInput>
  }

  export type ProductLevelsUpdateManyWithWhereWithoutLevelInput = {
    where: ProductLevelsScalarWhereInput
    data: XOR<ProductLevelsUpdateManyMutationInput, ProductLevelsUncheckedUpdateManyWithoutLevelInput>
  }

  export type OrderProductsUpsertWithWhereUniqueWithoutLevelInput = {
    where: OrderProductsWhereUniqueInput
    update: XOR<OrderProductsUpdateWithoutLevelInput, OrderProductsUncheckedUpdateWithoutLevelInput>
    create: XOR<OrderProductsCreateWithoutLevelInput, OrderProductsUncheckedCreateWithoutLevelInput>
  }

  export type OrderProductsUpdateWithWhereUniqueWithoutLevelInput = {
    where: OrderProductsWhereUniqueInput
    data: XOR<OrderProductsUpdateWithoutLevelInput, OrderProductsUncheckedUpdateWithoutLevelInput>
  }

  export type OrderProductsUpdateManyWithWhereWithoutLevelInput = {
    where: OrderProductsScalarWhereInput
    data: XOR<OrderProductsUpdateManyMutationInput, OrderProductsUncheckedUpdateManyWithoutLevelInput>
  }

  export type BasketUpsertWithWhereUniqueWithoutLevelInput = {
    where: BasketWhereUniqueInput
    update: XOR<BasketUpdateWithoutLevelInput, BasketUncheckedUpdateWithoutLevelInput>
    create: XOR<BasketCreateWithoutLevelInput, BasketUncheckedCreateWithoutLevelInput>
  }

  export type BasketUpdateWithWhereUniqueWithoutLevelInput = {
    where: BasketWhereUniqueInput
    data: XOR<BasketUpdateWithoutLevelInput, BasketUncheckedUpdateWithoutLevelInput>
  }

  export type BasketUpdateManyWithWhereWithoutLevelInput = {
    where: BasketScalarWhereInput
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyWithoutLevelInput>
  }

  export type LevelCreateWithoutProductLevelsInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    MasterProd?: MasterProdCreateNestedManyWithoutLevelInput
    OrderProducts?: OrderProductsCreateNestedManyWithoutLevelInput
    Basket?: BasketCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateWithoutProductLevelsInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    MasterProd?: MasterProdUncheckedCreateNestedManyWithoutLevelInput
    OrderProducts?: OrderProductsUncheckedCreateNestedManyWithoutLevelInput
    Basket?: BasketUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelCreateOrConnectWithoutProductLevelsInput = {
    where: LevelWhereUniqueInput
    create: XOR<LevelCreateWithoutProductLevelsInput, LevelUncheckedCreateWithoutProductLevelsInput>
  }

  export type ProductCreateWithoutProductLevelsInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    image: string
    isActive: boolean
    MasterProd?: MasterProdCreateNestedManyWithoutProductInput
    Basket?: BasketCreateNestedManyWithoutProductInput
    ProductTools?: ProductToolsCreateNestedManyWithoutProductInput
    OrderProducts?: OrderProductsCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutProductLevelsInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    image: string
    isActive: boolean
    MasterProd?: MasterProdUncheckedCreateNestedManyWithoutProductInput
    Basket?: BasketUncheckedCreateNestedManyWithoutProductInput
    ProductTools?: ProductToolsUncheckedCreateNestedManyWithoutProductInput
    OrderProducts?: OrderProductsUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutProductLevelsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutProductLevelsInput, ProductUncheckedCreateWithoutProductLevelsInput>
  }

  export type LevelUpsertWithoutProductLevelsInput = {
    update: XOR<LevelUpdateWithoutProductLevelsInput, LevelUncheckedUpdateWithoutProductLevelsInput>
    create: XOR<LevelCreateWithoutProductLevelsInput, LevelUncheckedCreateWithoutProductLevelsInput>
    where?: LevelWhereInput
  }

  export type LevelUpdateToOneWithWhereWithoutProductLevelsInput = {
    where?: LevelWhereInput
    data: XOR<LevelUpdateWithoutProductLevelsInput, LevelUncheckedUpdateWithoutProductLevelsInput>
  }

  export type LevelUpdateWithoutProductLevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    MasterProd?: MasterProdUpdateManyWithoutLevelNestedInput
    OrderProducts?: OrderProductsUpdateManyWithoutLevelNestedInput
    Basket?: BasketUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateWithoutProductLevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    MasterProd?: MasterProdUncheckedUpdateManyWithoutLevelNestedInput
    OrderProducts?: OrderProductsUncheckedUpdateManyWithoutLevelNestedInput
    Basket?: BasketUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type ProductUpsertWithoutProductLevelsInput = {
    update: XOR<ProductUpdateWithoutProductLevelsInput, ProductUncheckedUpdateWithoutProductLevelsInput>
    create: XOR<ProductCreateWithoutProductLevelsInput, ProductUncheckedCreateWithoutProductLevelsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutProductLevelsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutProductLevelsInput, ProductUncheckedUpdateWithoutProductLevelsInput>
  }

  export type ProductUpdateWithoutProductLevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    MasterProd?: MasterProdUpdateManyWithoutProductNestedInput
    Basket?: BasketUpdateManyWithoutProductNestedInput
    ProductTools?: ProductToolsUpdateManyWithoutProductNestedInput
    OrderProducts?: OrderProductsUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutProductLevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    MasterProd?: MasterProdUncheckedUpdateManyWithoutProductNestedInput
    Basket?: BasketUncheckedUpdateManyWithoutProductNestedInput
    ProductTools?: ProductToolsUncheckedUpdateManyWithoutProductNestedInput
    OrderProducts?: OrderProductsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ToolsCreateWithoutProductToolsInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    price: number
    quantity: number
    code: number
    image: string
    isActive: boolean
    brand: BrandCreateNestedOneWithoutToolsInput
    capacity: CapacityCreateNestedOneWithoutToolsInput
    size: SizeCreateNestedOneWithoutToolsInput
    Basket?: BasketCreateNestedManyWithoutToolInput
    OrderProducts?: OrderProductsCreateNestedManyWithoutToolInput
  }

  export type ToolsUncheckedCreateWithoutProductToolsInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    price: number
    quantity: number
    code: number
    image: string
    brandId: string
    isActive: boolean
    capacityId: string
    sizeId: string
    Basket?: BasketUncheckedCreateNestedManyWithoutToolInput
    OrderProducts?: OrderProductsUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolsCreateOrConnectWithoutProductToolsInput = {
    where: ToolsWhereUniqueInput
    create: XOR<ToolsCreateWithoutProductToolsInput, ToolsUncheckedCreateWithoutProductToolsInput>
  }

  export type ProductCreateWithoutProductToolsInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    image: string
    isActive: boolean
    MasterProd?: MasterProdCreateNestedManyWithoutProductInput
    Basket?: BasketCreateNestedManyWithoutProductInput
    productLevels?: ProductLevelsCreateNestedManyWithoutProductInput
    OrderProducts?: OrderProductsCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutProductToolsInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    image: string
    isActive: boolean
    MasterProd?: MasterProdUncheckedCreateNestedManyWithoutProductInput
    Basket?: BasketUncheckedCreateNestedManyWithoutProductInput
    productLevels?: ProductLevelsUncheckedCreateNestedManyWithoutProductInput
    OrderProducts?: OrderProductsUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutProductToolsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutProductToolsInput, ProductUncheckedCreateWithoutProductToolsInput>
  }

  export type ToolsUpsertWithoutProductToolsInput = {
    update: XOR<ToolsUpdateWithoutProductToolsInput, ToolsUncheckedUpdateWithoutProductToolsInput>
    create: XOR<ToolsCreateWithoutProductToolsInput, ToolsUncheckedCreateWithoutProductToolsInput>
    where?: ToolsWhereInput
  }

  export type ToolsUpdateToOneWithWhereWithoutProductToolsInput = {
    where?: ToolsWhereInput
    data: XOR<ToolsUpdateWithoutProductToolsInput, ToolsUncheckedUpdateWithoutProductToolsInput>
  }

  export type ToolsUpdateWithoutProductToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    brand?: BrandUpdateOneRequiredWithoutToolsNestedInput
    capacity?: CapacityUpdateOneRequiredWithoutToolsNestedInput
    size?: SizeUpdateOneRequiredWithoutToolsNestedInput
    Basket?: BasketUpdateManyWithoutToolNestedInput
    OrderProducts?: OrderProductsUpdateManyWithoutToolNestedInput
  }

  export type ToolsUncheckedUpdateWithoutProductToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacityId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    Basket?: BasketUncheckedUpdateManyWithoutToolNestedInput
    OrderProducts?: OrderProductsUncheckedUpdateManyWithoutToolNestedInput
  }

  export type ProductUpsertWithoutProductToolsInput = {
    update: XOR<ProductUpdateWithoutProductToolsInput, ProductUncheckedUpdateWithoutProductToolsInput>
    create: XOR<ProductCreateWithoutProductToolsInput, ProductUncheckedCreateWithoutProductToolsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutProductToolsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutProductToolsInput, ProductUncheckedUpdateWithoutProductToolsInput>
  }

  export type ProductUpdateWithoutProductToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    MasterProd?: MasterProdUpdateManyWithoutProductNestedInput
    Basket?: BasketUpdateManyWithoutProductNestedInput
    productLevels?: ProductLevelsUpdateManyWithoutProductNestedInput
    OrderProducts?: OrderProductsUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutProductToolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    MasterProd?: MasterProdUncheckedUpdateManyWithoutProductNestedInput
    Basket?: BasketUncheckedUpdateManyWithoutProductNestedInput
    productLevels?: ProductLevelsUncheckedUpdateManyWithoutProductNestedInput
    OrderProducts?: OrderProductsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type UserCreateWithoutOrderInput = {
    id?: string
    fullName: string
    password: string
    phoneNumber: string
    IIN?: string | null
    MFO?: string | null
    RS?: string | null
    Bank?: string | null
    OKED?: string | null
    ADDRESS: string
    role: $Enums.userRole
    status: $Enums.userStatus
    region: RegionCreateNestedOneWithoutUserInput
    Basket?: BasketCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrderInput = {
    id?: string
    fullName: string
    password: string
    phoneNumber: string
    regionId: string
    IIN?: string | null
    MFO?: string | null
    RS?: string | null
    Bank?: string | null
    OKED?: string | null
    ADDRESS: string
    role: $Enums.userRole
    status: $Enums.userStatus
    Basket?: BasketUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrderInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrderInput, UserUncheckedCreateWithoutOrderInput>
  }

  export type OrderProductsCreateWithoutOrderInput = {
    id?: string
    count: number
    price: number
    workingTime: number
    timeUnit: $Enums.MasterDaily
    product: ProductCreateNestedOneWithoutOrderProductsInput
    level: LevelCreateNestedOneWithoutOrderProductsInput
    tool: ToolsCreateNestedOneWithoutOrderProductsInput
  }

  export type OrderProductsUncheckedCreateWithoutOrderInput = {
    id?: string
    productId: string
    levelId: string
    toolId: string
    count: number
    price: number
    workingTime: number
    timeUnit: $Enums.MasterDaily
  }

  export type OrderProductsCreateOrConnectWithoutOrderInput = {
    where: OrderProductsWhereUniqueInput
    create: XOR<OrderProductsCreateWithoutOrderInput, OrderProductsUncheckedCreateWithoutOrderInput>
  }

  export type OrderProductsCreateManyOrderInputEnvelope = {
    data: OrderProductsCreateManyOrderInput | OrderProductsCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type OrderMastersCreateWithoutOrderInput = {
    id?: string
    master: MasterCreateNestedOneWithoutOrderMastersInput
  }

  export type OrderMastersUncheckedCreateWithoutOrderInput = {
    id?: string
    masterId: string
  }

  export type OrderMastersCreateOrConnectWithoutOrderInput = {
    where: OrderMastersWhereUniqueInput
    create: XOR<OrderMastersCreateWithoutOrderInput, OrderMastersUncheckedCreateWithoutOrderInput>
  }

  export type OrderMastersCreateManyOrderInputEnvelope = {
    data: OrderMastersCreateManyOrderInput | OrderMastersCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutOrderInput = {
    id?: string
    text: string
    user: UserCreateNestedOneWithoutCommentInput
    MasterRatings?: MasterRatingsCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutOrderInput = {
    id?: string
    text: string
    userId: string
    MasterRatings?: MasterRatingsUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutOrderInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutOrderInput, CommentUncheckedCreateWithoutOrderInput>
  }

  export type CommentCreateManyOrderInputEnvelope = {
    data: CommentCreateManyOrderInput | CommentCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutOrderInput = {
    update: XOR<UserUpdateWithoutOrderInput, UserUncheckedUpdateWithoutOrderInput>
    create: XOR<UserCreateWithoutOrderInput, UserUncheckedCreateWithoutOrderInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrderInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrderInput, UserUncheckedUpdateWithoutOrderInput>
  }

  export type UserUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    IIN?: NullableStringFieldUpdateOperationsInput | string | null
    MFO?: NullableStringFieldUpdateOperationsInput | string | null
    RS?: NullableStringFieldUpdateOperationsInput | string | null
    Bank?: NullableStringFieldUpdateOperationsInput | string | null
    OKED?: NullableStringFieldUpdateOperationsInput | string | null
    ADDRESS?: StringFieldUpdateOperationsInput | string
    role?: EnumuserRoleFieldUpdateOperationsInput | $Enums.userRole
    status?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    region?: RegionUpdateOneRequiredWithoutUserNestedInput
    Basket?: BasketUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    regionId?: StringFieldUpdateOperationsInput | string
    IIN?: NullableStringFieldUpdateOperationsInput | string | null
    MFO?: NullableStringFieldUpdateOperationsInput | string | null
    RS?: NullableStringFieldUpdateOperationsInput | string | null
    Bank?: NullableStringFieldUpdateOperationsInput | string | null
    OKED?: NullableStringFieldUpdateOperationsInput | string | null
    ADDRESS?: StringFieldUpdateOperationsInput | string
    role?: EnumuserRoleFieldUpdateOperationsInput | $Enums.userRole
    status?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    Basket?: BasketUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrderProductsUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderProductsWhereUniqueInput
    update: XOR<OrderProductsUpdateWithoutOrderInput, OrderProductsUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderProductsCreateWithoutOrderInput, OrderProductsUncheckedCreateWithoutOrderInput>
  }

  export type OrderProductsUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderProductsWhereUniqueInput
    data: XOR<OrderProductsUpdateWithoutOrderInput, OrderProductsUncheckedUpdateWithoutOrderInput>
  }

  export type OrderProductsUpdateManyWithWhereWithoutOrderInput = {
    where: OrderProductsScalarWhereInput
    data: XOR<OrderProductsUpdateManyMutationInput, OrderProductsUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderMastersUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderMastersWhereUniqueInput
    update: XOR<OrderMastersUpdateWithoutOrderInput, OrderMastersUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderMastersCreateWithoutOrderInput, OrderMastersUncheckedCreateWithoutOrderInput>
  }

  export type OrderMastersUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderMastersWhereUniqueInput
    data: XOR<OrderMastersUpdateWithoutOrderInput, OrderMastersUncheckedUpdateWithoutOrderInput>
  }

  export type OrderMastersUpdateManyWithWhereWithoutOrderInput = {
    where: OrderMastersScalarWhereInput
    data: XOR<OrderMastersUpdateManyMutationInput, OrderMastersUncheckedUpdateManyWithoutOrderInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutOrderInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutOrderInput, CommentUncheckedUpdateWithoutOrderInput>
    create: XOR<CommentCreateWithoutOrderInput, CommentUncheckedCreateWithoutOrderInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutOrderInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutOrderInput, CommentUncheckedUpdateWithoutOrderInput>
  }

  export type CommentUpdateManyWithWhereWithoutOrderInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderCreateWithoutOrderProductsInput = {
    id?: string
    productCount: number
    quantity: number
    measure: number
    tool: number
    total: number
    location: string
    address: string
    date: Date | string
    paymentType: $Enums.paymentType
    withDelivery: boolean
    status: $Enums.orderStatus
    commentToDelivery: string
    user: UserCreateNestedOneWithoutOrderInput
    OrderMasters?: OrderMastersCreateNestedManyWithoutOrderInput
    Comment?: CommentCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutOrderProductsInput = {
    id?: string
    productCount: number
    quantity: number
    measure: number
    tool: number
    total: number
    location: string
    address: string
    date: Date | string
    paymentType: $Enums.paymentType
    withDelivery: boolean
    status: $Enums.orderStatus
    commentToDelivery: string
    userId: string
    OrderMasters?: OrderMastersUncheckedCreateNestedManyWithoutOrderInput
    Comment?: CommentUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutOrderProductsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutOrderProductsInput, OrderUncheckedCreateWithoutOrderProductsInput>
  }

  export type ProductCreateWithoutOrderProductsInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    image: string
    isActive: boolean
    MasterProd?: MasterProdCreateNestedManyWithoutProductInput
    Basket?: BasketCreateNestedManyWithoutProductInput
    productLevels?: ProductLevelsCreateNestedManyWithoutProductInput
    ProductTools?: ProductToolsCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutOrderProductsInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    image: string
    isActive: boolean
    MasterProd?: MasterProdUncheckedCreateNestedManyWithoutProductInput
    Basket?: BasketUncheckedCreateNestedManyWithoutProductInput
    productLevels?: ProductLevelsUncheckedCreateNestedManyWithoutProductInput
    ProductTools?: ProductToolsUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutOrderProductsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutOrderProductsInput, ProductUncheckedCreateWithoutOrderProductsInput>
  }

  export type LevelCreateWithoutOrderProductsInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    MasterProd?: MasterProdCreateNestedManyWithoutLevelInput
    productLevels?: ProductLevelsCreateNestedManyWithoutLevelInput
    Basket?: BasketCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateWithoutOrderProductsInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    MasterProd?: MasterProdUncheckedCreateNestedManyWithoutLevelInput
    productLevels?: ProductLevelsUncheckedCreateNestedManyWithoutLevelInput
    Basket?: BasketUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelCreateOrConnectWithoutOrderProductsInput = {
    where: LevelWhereUniqueInput
    create: XOR<LevelCreateWithoutOrderProductsInput, LevelUncheckedCreateWithoutOrderProductsInput>
  }

  export type ToolsCreateWithoutOrderProductsInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    price: number
    quantity: number
    code: number
    image: string
    isActive: boolean
    brand: BrandCreateNestedOneWithoutToolsInput
    capacity: CapacityCreateNestedOneWithoutToolsInput
    size: SizeCreateNestedOneWithoutToolsInput
    Basket?: BasketCreateNestedManyWithoutToolInput
    ProductTools?: ProductToolsCreateNestedManyWithoutToolInput
  }

  export type ToolsUncheckedCreateWithoutOrderProductsInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    price: number
    quantity: number
    code: number
    image: string
    brandId: string
    isActive: boolean
    capacityId: string
    sizeId: string
    Basket?: BasketUncheckedCreateNestedManyWithoutToolInput
    ProductTools?: ProductToolsUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolsCreateOrConnectWithoutOrderProductsInput = {
    where: ToolsWhereUniqueInput
    create: XOR<ToolsCreateWithoutOrderProductsInput, ToolsUncheckedCreateWithoutOrderProductsInput>
  }

  export type OrderUpsertWithoutOrderProductsInput = {
    update: XOR<OrderUpdateWithoutOrderProductsInput, OrderUncheckedUpdateWithoutOrderProductsInput>
    create: XOR<OrderCreateWithoutOrderProductsInput, OrderUncheckedCreateWithoutOrderProductsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutOrderProductsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutOrderProductsInput, OrderUncheckedUpdateWithoutOrderProductsInput>
  }

  export type OrderUpdateWithoutOrderProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    tool?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumpaymentTypeFieldUpdateOperationsInput | $Enums.paymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumorderStatusFieldUpdateOperationsInput | $Enums.orderStatus
    commentToDelivery?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutOrderNestedInput
    OrderMasters?: OrderMastersUpdateManyWithoutOrderNestedInput
    Comment?: CommentUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutOrderProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    tool?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumpaymentTypeFieldUpdateOperationsInput | $Enums.paymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumorderStatusFieldUpdateOperationsInput | $Enums.orderStatus
    commentToDelivery?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    OrderMasters?: OrderMastersUncheckedUpdateManyWithoutOrderNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type ProductUpsertWithoutOrderProductsInput = {
    update: XOR<ProductUpdateWithoutOrderProductsInput, ProductUncheckedUpdateWithoutOrderProductsInput>
    create: XOR<ProductCreateWithoutOrderProductsInput, ProductUncheckedCreateWithoutOrderProductsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutOrderProductsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutOrderProductsInput, ProductUncheckedUpdateWithoutOrderProductsInput>
  }

  export type ProductUpdateWithoutOrderProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    MasterProd?: MasterProdUpdateManyWithoutProductNestedInput
    Basket?: BasketUpdateManyWithoutProductNestedInput
    productLevels?: ProductLevelsUpdateManyWithoutProductNestedInput
    ProductTools?: ProductToolsUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutOrderProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    MasterProd?: MasterProdUncheckedUpdateManyWithoutProductNestedInput
    Basket?: BasketUncheckedUpdateManyWithoutProductNestedInput
    productLevels?: ProductLevelsUncheckedUpdateManyWithoutProductNestedInput
    ProductTools?: ProductToolsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type LevelUpsertWithoutOrderProductsInput = {
    update: XOR<LevelUpdateWithoutOrderProductsInput, LevelUncheckedUpdateWithoutOrderProductsInput>
    create: XOR<LevelCreateWithoutOrderProductsInput, LevelUncheckedCreateWithoutOrderProductsInput>
    where?: LevelWhereInput
  }

  export type LevelUpdateToOneWithWhereWithoutOrderProductsInput = {
    where?: LevelWhereInput
    data: XOR<LevelUpdateWithoutOrderProductsInput, LevelUncheckedUpdateWithoutOrderProductsInput>
  }

  export type LevelUpdateWithoutOrderProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    MasterProd?: MasterProdUpdateManyWithoutLevelNestedInput
    productLevels?: ProductLevelsUpdateManyWithoutLevelNestedInput
    Basket?: BasketUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateWithoutOrderProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    MasterProd?: MasterProdUncheckedUpdateManyWithoutLevelNestedInput
    productLevels?: ProductLevelsUncheckedUpdateManyWithoutLevelNestedInput
    Basket?: BasketUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type ToolsUpsertWithoutOrderProductsInput = {
    update: XOR<ToolsUpdateWithoutOrderProductsInput, ToolsUncheckedUpdateWithoutOrderProductsInput>
    create: XOR<ToolsCreateWithoutOrderProductsInput, ToolsUncheckedCreateWithoutOrderProductsInput>
    where?: ToolsWhereInput
  }

  export type ToolsUpdateToOneWithWhereWithoutOrderProductsInput = {
    where?: ToolsWhereInput
    data: XOR<ToolsUpdateWithoutOrderProductsInput, ToolsUncheckedUpdateWithoutOrderProductsInput>
  }

  export type ToolsUpdateWithoutOrderProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    brand?: BrandUpdateOneRequiredWithoutToolsNestedInput
    capacity?: CapacityUpdateOneRequiredWithoutToolsNestedInput
    size?: SizeUpdateOneRequiredWithoutToolsNestedInput
    Basket?: BasketUpdateManyWithoutToolNestedInput
    ProductTools?: ProductToolsUpdateManyWithoutToolNestedInput
  }

  export type ToolsUncheckedUpdateWithoutOrderProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacityId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    Basket?: BasketUncheckedUpdateManyWithoutToolNestedInput
    ProductTools?: ProductToolsUncheckedUpdateManyWithoutToolNestedInput
  }

  export type OrderCreateWithoutOrderMastersInput = {
    id?: string
    productCount: number
    quantity: number
    measure: number
    tool: number
    total: number
    location: string
    address: string
    date: Date | string
    paymentType: $Enums.paymentType
    withDelivery: boolean
    status: $Enums.orderStatus
    commentToDelivery: string
    user: UserCreateNestedOneWithoutOrderInput
    OrderProducts?: OrderProductsCreateNestedManyWithoutOrderInput
    Comment?: CommentCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutOrderMastersInput = {
    id?: string
    productCount: number
    quantity: number
    measure: number
    tool: number
    total: number
    location: string
    address: string
    date: Date | string
    paymentType: $Enums.paymentType
    withDelivery: boolean
    status: $Enums.orderStatus
    commentToDelivery: string
    userId: string
    OrderProducts?: OrderProductsUncheckedCreateNestedManyWithoutOrderInput
    Comment?: CommentUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutOrderMastersInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutOrderMastersInput, OrderUncheckedCreateWithoutOrderMastersInput>
  }

  export type MasterCreateWithoutOrderMastersInput = {
    id?: string
    fullName: string
    phone: string
    isActive: boolean
    year: number
    image: string
    passportImage: string
    about: string
    MasterProd?: MasterProdCreateNestedManyWithoutMasterInput
    MasterRatings?: MasterRatingsCreateNestedManyWithoutMasterInput
  }

  export type MasterUncheckedCreateWithoutOrderMastersInput = {
    id?: string
    fullName: string
    phone: string
    isActive: boolean
    year: number
    image: string
    passportImage: string
    about: string
    MasterProd?: MasterProdUncheckedCreateNestedManyWithoutMasterInput
    MasterRatings?: MasterRatingsUncheckedCreateNestedManyWithoutMasterInput
  }

  export type MasterCreateOrConnectWithoutOrderMastersInput = {
    where: MasterWhereUniqueInput
    create: XOR<MasterCreateWithoutOrderMastersInput, MasterUncheckedCreateWithoutOrderMastersInput>
  }

  export type OrderUpsertWithoutOrderMastersInput = {
    update: XOR<OrderUpdateWithoutOrderMastersInput, OrderUncheckedUpdateWithoutOrderMastersInput>
    create: XOR<OrderCreateWithoutOrderMastersInput, OrderUncheckedCreateWithoutOrderMastersInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutOrderMastersInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutOrderMastersInput, OrderUncheckedUpdateWithoutOrderMastersInput>
  }

  export type OrderUpdateWithoutOrderMastersInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    tool?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumpaymentTypeFieldUpdateOperationsInput | $Enums.paymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumorderStatusFieldUpdateOperationsInput | $Enums.orderStatus
    commentToDelivery?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutOrderNestedInput
    OrderProducts?: OrderProductsUpdateManyWithoutOrderNestedInput
    Comment?: CommentUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutOrderMastersInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    tool?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumpaymentTypeFieldUpdateOperationsInput | $Enums.paymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumorderStatusFieldUpdateOperationsInput | $Enums.orderStatus
    commentToDelivery?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    OrderProducts?: OrderProductsUncheckedUpdateManyWithoutOrderNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type MasterUpsertWithoutOrderMastersInput = {
    update: XOR<MasterUpdateWithoutOrderMastersInput, MasterUncheckedUpdateWithoutOrderMastersInput>
    create: XOR<MasterCreateWithoutOrderMastersInput, MasterUncheckedCreateWithoutOrderMastersInput>
    where?: MasterWhereInput
  }

  export type MasterUpdateToOneWithWhereWithoutOrderMastersInput = {
    where?: MasterWhereInput
    data: XOR<MasterUpdateWithoutOrderMastersInput, MasterUncheckedUpdateWithoutOrderMastersInput>
  }

  export type MasterUpdateWithoutOrderMastersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    passportImage?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    MasterProd?: MasterProdUpdateManyWithoutMasterNestedInput
    MasterRatings?: MasterRatingsUpdateManyWithoutMasterNestedInput
  }

  export type MasterUncheckedUpdateWithoutOrderMastersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    passportImage?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    MasterProd?: MasterProdUncheckedUpdateManyWithoutMasterNestedInput
    MasterRatings?: MasterRatingsUncheckedUpdateManyWithoutMasterNestedInput
  }

  export type UserCreateWithoutCommentInput = {
    id?: string
    fullName: string
    password: string
    phoneNumber: string
    IIN?: string | null
    MFO?: string | null
    RS?: string | null
    Bank?: string | null
    OKED?: string | null
    ADDRESS: string
    role: $Enums.userRole
    status: $Enums.userStatus
    region: RegionCreateNestedOneWithoutUserInput
    Basket?: BasketCreateNestedManyWithoutUserInput
    Order?: OrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentInput = {
    id?: string
    fullName: string
    password: string
    phoneNumber: string
    regionId: string
    IIN?: string | null
    MFO?: string | null
    RS?: string | null
    Bank?: string | null
    OKED?: string | null
    ADDRESS: string
    role: $Enums.userRole
    status: $Enums.userStatus
    Basket?: BasketUncheckedCreateNestedManyWithoutUserInput
    Order?: OrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
  }

  export type OrderCreateWithoutCommentInput = {
    id?: string
    productCount: number
    quantity: number
    measure: number
    tool: number
    total: number
    location: string
    address: string
    date: Date | string
    paymentType: $Enums.paymentType
    withDelivery: boolean
    status: $Enums.orderStatus
    commentToDelivery: string
    user: UserCreateNestedOneWithoutOrderInput
    OrderProducts?: OrderProductsCreateNestedManyWithoutOrderInput
    OrderMasters?: OrderMastersCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutCommentInput = {
    id?: string
    productCount: number
    quantity: number
    measure: number
    tool: number
    total: number
    location: string
    address: string
    date: Date | string
    paymentType: $Enums.paymentType
    withDelivery: boolean
    status: $Enums.orderStatus
    commentToDelivery: string
    userId: string
    OrderProducts?: OrderProductsUncheckedCreateNestedManyWithoutOrderInput
    OrderMasters?: OrderMastersUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutCommentInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutCommentInput, OrderUncheckedCreateWithoutCommentInput>
  }

  export type MasterRatingsCreateWithoutCommentInput = {
    id?: string
    star: number
    master: MasterCreateNestedOneWithoutMasterRatingsInput
  }

  export type MasterRatingsUncheckedCreateWithoutCommentInput = {
    id?: string
    star: number
    masterId: string
  }

  export type MasterRatingsCreateOrConnectWithoutCommentInput = {
    where: MasterRatingsWhereUniqueInput
    create: XOR<MasterRatingsCreateWithoutCommentInput, MasterRatingsUncheckedCreateWithoutCommentInput>
  }

  export type MasterRatingsCreateManyCommentInputEnvelope = {
    data: MasterRatingsCreateManyCommentInput | MasterRatingsCreateManyCommentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCommentInput = {
    update: XOR<UserUpdateWithoutCommentInput, UserUncheckedUpdateWithoutCommentInput>
    create: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentInput, UserUncheckedUpdateWithoutCommentInput>
  }

  export type UserUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    IIN?: NullableStringFieldUpdateOperationsInput | string | null
    MFO?: NullableStringFieldUpdateOperationsInput | string | null
    RS?: NullableStringFieldUpdateOperationsInput | string | null
    Bank?: NullableStringFieldUpdateOperationsInput | string | null
    OKED?: NullableStringFieldUpdateOperationsInput | string | null
    ADDRESS?: StringFieldUpdateOperationsInput | string
    role?: EnumuserRoleFieldUpdateOperationsInput | $Enums.userRole
    status?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    region?: RegionUpdateOneRequiredWithoutUserNestedInput
    Basket?: BasketUpdateManyWithoutUserNestedInput
    Order?: OrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    regionId?: StringFieldUpdateOperationsInput | string
    IIN?: NullableStringFieldUpdateOperationsInput | string | null
    MFO?: NullableStringFieldUpdateOperationsInput | string | null
    RS?: NullableStringFieldUpdateOperationsInput | string | null
    Bank?: NullableStringFieldUpdateOperationsInput | string | null
    OKED?: NullableStringFieldUpdateOperationsInput | string | null
    ADDRESS?: StringFieldUpdateOperationsInput | string
    role?: EnumuserRoleFieldUpdateOperationsInput | $Enums.userRole
    status?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    Basket?: BasketUncheckedUpdateManyWithoutUserNestedInput
    Order?: OrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrderUpsertWithoutCommentInput = {
    update: XOR<OrderUpdateWithoutCommentInput, OrderUncheckedUpdateWithoutCommentInput>
    create: XOR<OrderCreateWithoutCommentInput, OrderUncheckedCreateWithoutCommentInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutCommentInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutCommentInput, OrderUncheckedUpdateWithoutCommentInput>
  }

  export type OrderUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    tool?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumpaymentTypeFieldUpdateOperationsInput | $Enums.paymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumorderStatusFieldUpdateOperationsInput | $Enums.orderStatus
    commentToDelivery?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutOrderNestedInput
    OrderProducts?: OrderProductsUpdateManyWithoutOrderNestedInput
    OrderMasters?: OrderMastersUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    tool?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumpaymentTypeFieldUpdateOperationsInput | $Enums.paymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumorderStatusFieldUpdateOperationsInput | $Enums.orderStatus
    commentToDelivery?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    OrderProducts?: OrderProductsUncheckedUpdateManyWithoutOrderNestedInput
    OrderMasters?: OrderMastersUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type MasterRatingsUpsertWithWhereUniqueWithoutCommentInput = {
    where: MasterRatingsWhereUniqueInput
    update: XOR<MasterRatingsUpdateWithoutCommentInput, MasterRatingsUncheckedUpdateWithoutCommentInput>
    create: XOR<MasterRatingsCreateWithoutCommentInput, MasterRatingsUncheckedCreateWithoutCommentInput>
  }

  export type MasterRatingsUpdateWithWhereUniqueWithoutCommentInput = {
    where: MasterRatingsWhereUniqueInput
    data: XOR<MasterRatingsUpdateWithoutCommentInput, MasterRatingsUncheckedUpdateWithoutCommentInput>
  }

  export type MasterRatingsUpdateManyWithWhereWithoutCommentInput = {
    where: MasterRatingsScalarWhereInput
    data: XOR<MasterRatingsUpdateManyMutationInput, MasterRatingsUncheckedUpdateManyWithoutCommentInput>
  }

  export type CommentCreateWithoutMasterRatingsInput = {
    id?: string
    text: string
    user: UserCreateNestedOneWithoutCommentInput
    order: OrderCreateNestedOneWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutMasterRatingsInput = {
    id?: string
    text: string
    userId: string
    orderId: string
  }

  export type CommentCreateOrConnectWithoutMasterRatingsInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutMasterRatingsInput, CommentUncheckedCreateWithoutMasterRatingsInput>
  }

  export type MasterCreateWithoutMasterRatingsInput = {
    id?: string
    fullName: string
    phone: string
    isActive: boolean
    year: number
    image: string
    passportImage: string
    about: string
    MasterProd?: MasterProdCreateNestedManyWithoutMasterInput
    OrderMasters?: OrderMastersCreateNestedManyWithoutMasterInput
  }

  export type MasterUncheckedCreateWithoutMasterRatingsInput = {
    id?: string
    fullName: string
    phone: string
    isActive: boolean
    year: number
    image: string
    passportImage: string
    about: string
    MasterProd?: MasterProdUncheckedCreateNestedManyWithoutMasterInput
    OrderMasters?: OrderMastersUncheckedCreateNestedManyWithoutMasterInput
  }

  export type MasterCreateOrConnectWithoutMasterRatingsInput = {
    where: MasterWhereUniqueInput
    create: XOR<MasterCreateWithoutMasterRatingsInput, MasterUncheckedCreateWithoutMasterRatingsInput>
  }

  export type CommentUpsertWithoutMasterRatingsInput = {
    update: XOR<CommentUpdateWithoutMasterRatingsInput, CommentUncheckedUpdateWithoutMasterRatingsInput>
    create: XOR<CommentCreateWithoutMasterRatingsInput, CommentUncheckedCreateWithoutMasterRatingsInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutMasterRatingsInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutMasterRatingsInput, CommentUncheckedUpdateWithoutMasterRatingsInput>
  }

  export type CommentUpdateWithoutMasterRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutCommentNestedInput
    order?: OrderUpdateOneRequiredWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutMasterRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
  }

  export type MasterUpsertWithoutMasterRatingsInput = {
    update: XOR<MasterUpdateWithoutMasterRatingsInput, MasterUncheckedUpdateWithoutMasterRatingsInput>
    create: XOR<MasterCreateWithoutMasterRatingsInput, MasterUncheckedCreateWithoutMasterRatingsInput>
    where?: MasterWhereInput
  }

  export type MasterUpdateToOneWithWhereWithoutMasterRatingsInput = {
    where?: MasterWhereInput
    data: XOR<MasterUpdateWithoutMasterRatingsInput, MasterUncheckedUpdateWithoutMasterRatingsInput>
  }

  export type MasterUpdateWithoutMasterRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    passportImage?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    MasterProd?: MasterProdUpdateManyWithoutMasterNestedInput
    OrderMasters?: OrderMastersUpdateManyWithoutMasterNestedInput
  }

  export type MasterUncheckedUpdateWithoutMasterRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    passportImage?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    MasterProd?: MasterProdUncheckedUpdateManyWithoutMasterNestedInput
    OrderMasters?: OrderMastersUncheckedUpdateManyWithoutMasterNestedInput
  }

  export type ProductCreateWithoutBasketInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    image: string
    isActive: boolean
    MasterProd?: MasterProdCreateNestedManyWithoutProductInput
    productLevels?: ProductLevelsCreateNestedManyWithoutProductInput
    ProductTools?: ProductToolsCreateNestedManyWithoutProductInput
    OrderProducts?: OrderProductsCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutBasketInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    image: string
    isActive: boolean
    MasterProd?: MasterProdUncheckedCreateNestedManyWithoutProductInput
    productLevels?: ProductLevelsUncheckedCreateNestedManyWithoutProductInput
    ProductTools?: ProductToolsUncheckedCreateNestedManyWithoutProductInput
    OrderProducts?: OrderProductsUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutBasketInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutBasketInput, ProductUncheckedCreateWithoutBasketInput>
  }

  export type ToolsCreateWithoutBasketInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    price: number
    quantity: number
    code: number
    image: string
    isActive: boolean
    brand: BrandCreateNestedOneWithoutToolsInput
    capacity: CapacityCreateNestedOneWithoutToolsInput
    size: SizeCreateNestedOneWithoutToolsInput
    OrderProducts?: OrderProductsCreateNestedManyWithoutToolInput
    ProductTools?: ProductToolsCreateNestedManyWithoutToolInput
  }

  export type ToolsUncheckedCreateWithoutBasketInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    price: number
    quantity: number
    code: number
    image: string
    brandId: string
    isActive: boolean
    capacityId: string
    sizeId: string
    OrderProducts?: OrderProductsUncheckedCreateNestedManyWithoutToolInput
    ProductTools?: ProductToolsUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolsCreateOrConnectWithoutBasketInput = {
    where: ToolsWhereUniqueInput
    create: XOR<ToolsCreateWithoutBasketInput, ToolsUncheckedCreateWithoutBasketInput>
  }

  export type UserCreateWithoutBasketInput = {
    id?: string
    fullName: string
    password: string
    phoneNumber: string
    IIN?: string | null
    MFO?: string | null
    RS?: string | null
    Bank?: string | null
    OKED?: string | null
    ADDRESS: string
    role: $Enums.userRole
    status: $Enums.userStatus
    region: RegionCreateNestedOneWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Order?: OrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBasketInput = {
    id?: string
    fullName: string
    password: string
    phoneNumber: string
    regionId: string
    IIN?: string | null
    MFO?: string | null
    RS?: string | null
    Bank?: string | null
    OKED?: string | null
    ADDRESS: string
    role: $Enums.userRole
    status: $Enums.userStatus
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Order?: OrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBasketInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBasketInput, UserUncheckedCreateWithoutBasketInput>
  }

  export type LevelCreateWithoutBasketInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    MasterProd?: MasterProdCreateNestedManyWithoutLevelInput
    productLevels?: ProductLevelsCreateNestedManyWithoutLevelInput
    OrderProducts?: OrderProductsCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateWithoutBasketInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    MasterProd?: MasterProdUncheckedCreateNestedManyWithoutLevelInput
    productLevels?: ProductLevelsUncheckedCreateNestedManyWithoutLevelInput
    OrderProducts?: OrderProductsUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelCreateOrConnectWithoutBasketInput = {
    where: LevelWhereUniqueInput
    create: XOR<LevelCreateWithoutBasketInput, LevelUncheckedCreateWithoutBasketInput>
  }

  export type ProductUpsertWithoutBasketInput = {
    update: XOR<ProductUpdateWithoutBasketInput, ProductUncheckedUpdateWithoutBasketInput>
    create: XOR<ProductCreateWithoutBasketInput, ProductUncheckedCreateWithoutBasketInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutBasketInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutBasketInput, ProductUncheckedUpdateWithoutBasketInput>
  }

  export type ProductUpdateWithoutBasketInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    MasterProd?: MasterProdUpdateManyWithoutProductNestedInput
    productLevels?: ProductLevelsUpdateManyWithoutProductNestedInput
    ProductTools?: ProductToolsUpdateManyWithoutProductNestedInput
    OrderProducts?: OrderProductsUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutBasketInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    MasterProd?: MasterProdUncheckedUpdateManyWithoutProductNestedInput
    productLevels?: ProductLevelsUncheckedUpdateManyWithoutProductNestedInput
    ProductTools?: ProductToolsUncheckedUpdateManyWithoutProductNestedInput
    OrderProducts?: OrderProductsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ToolsUpsertWithoutBasketInput = {
    update: XOR<ToolsUpdateWithoutBasketInput, ToolsUncheckedUpdateWithoutBasketInput>
    create: XOR<ToolsCreateWithoutBasketInput, ToolsUncheckedCreateWithoutBasketInput>
    where?: ToolsWhereInput
  }

  export type ToolsUpdateToOneWithWhereWithoutBasketInput = {
    where?: ToolsWhereInput
    data: XOR<ToolsUpdateWithoutBasketInput, ToolsUncheckedUpdateWithoutBasketInput>
  }

  export type ToolsUpdateWithoutBasketInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    brand?: BrandUpdateOneRequiredWithoutToolsNestedInput
    capacity?: CapacityUpdateOneRequiredWithoutToolsNestedInput
    size?: SizeUpdateOneRequiredWithoutToolsNestedInput
    OrderProducts?: OrderProductsUpdateManyWithoutToolNestedInput
    ProductTools?: ProductToolsUpdateManyWithoutToolNestedInput
  }

  export type ToolsUncheckedUpdateWithoutBasketInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacityId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    OrderProducts?: OrderProductsUncheckedUpdateManyWithoutToolNestedInput
    ProductTools?: ProductToolsUncheckedUpdateManyWithoutToolNestedInput
  }

  export type UserUpsertWithoutBasketInput = {
    update: XOR<UserUpdateWithoutBasketInput, UserUncheckedUpdateWithoutBasketInput>
    create: XOR<UserCreateWithoutBasketInput, UserUncheckedCreateWithoutBasketInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBasketInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBasketInput, UserUncheckedUpdateWithoutBasketInput>
  }

  export type UserUpdateWithoutBasketInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    IIN?: NullableStringFieldUpdateOperationsInput | string | null
    MFO?: NullableStringFieldUpdateOperationsInput | string | null
    RS?: NullableStringFieldUpdateOperationsInput | string | null
    Bank?: NullableStringFieldUpdateOperationsInput | string | null
    OKED?: NullableStringFieldUpdateOperationsInput | string | null
    ADDRESS?: StringFieldUpdateOperationsInput | string
    role?: EnumuserRoleFieldUpdateOperationsInput | $Enums.userRole
    status?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    region?: RegionUpdateOneRequiredWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Order?: OrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBasketInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    regionId?: StringFieldUpdateOperationsInput | string
    IIN?: NullableStringFieldUpdateOperationsInput | string | null
    MFO?: NullableStringFieldUpdateOperationsInput | string | null
    RS?: NullableStringFieldUpdateOperationsInput | string | null
    Bank?: NullableStringFieldUpdateOperationsInput | string | null
    OKED?: NullableStringFieldUpdateOperationsInput | string | null
    ADDRESS?: StringFieldUpdateOperationsInput | string
    role?: EnumuserRoleFieldUpdateOperationsInput | $Enums.userRole
    status?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Order?: OrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LevelUpsertWithoutBasketInput = {
    update: XOR<LevelUpdateWithoutBasketInput, LevelUncheckedUpdateWithoutBasketInput>
    create: XOR<LevelCreateWithoutBasketInput, LevelUncheckedCreateWithoutBasketInput>
    where?: LevelWhereInput
  }

  export type LevelUpdateToOneWithWhereWithoutBasketInput = {
    where?: LevelWhereInput
    data: XOR<LevelUpdateWithoutBasketInput, LevelUncheckedUpdateWithoutBasketInput>
  }

  export type LevelUpdateWithoutBasketInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    MasterProd?: MasterProdUpdateManyWithoutLevelNestedInput
    productLevels?: ProductLevelsUpdateManyWithoutLevelNestedInput
    OrderProducts?: OrderProductsUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateWithoutBasketInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    MasterProd?: MasterProdUncheckedUpdateManyWithoutLevelNestedInput
    productLevels?: ProductLevelsUncheckedUpdateManyWithoutLevelNestedInput
    OrderProducts?: OrderProductsUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type UserCreateManyRegionInput = {
    id?: string
    fullName: string
    password: string
    phoneNumber: string
    IIN?: string | null
    MFO?: string | null
    RS?: string | null
    Bank?: string | null
    OKED?: string | null
    ADDRESS: string
    role: $Enums.userRole
    status: $Enums.userStatus
  }

  export type UserUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    IIN?: NullableStringFieldUpdateOperationsInput | string | null
    MFO?: NullableStringFieldUpdateOperationsInput | string | null
    RS?: NullableStringFieldUpdateOperationsInput | string | null
    Bank?: NullableStringFieldUpdateOperationsInput | string | null
    OKED?: NullableStringFieldUpdateOperationsInput | string | null
    ADDRESS?: StringFieldUpdateOperationsInput | string
    role?: EnumuserRoleFieldUpdateOperationsInput | $Enums.userRole
    status?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    Basket?: BasketUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Order?: OrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    IIN?: NullableStringFieldUpdateOperationsInput | string | null
    MFO?: NullableStringFieldUpdateOperationsInput | string | null
    RS?: NullableStringFieldUpdateOperationsInput | string | null
    Bank?: NullableStringFieldUpdateOperationsInput | string | null
    OKED?: NullableStringFieldUpdateOperationsInput | string | null
    ADDRESS?: StringFieldUpdateOperationsInput | string
    role?: EnumuserRoleFieldUpdateOperationsInput | $Enums.userRole
    status?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    Basket?: BasketUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Order?: OrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    IIN?: NullableStringFieldUpdateOperationsInput | string | null
    MFO?: NullableStringFieldUpdateOperationsInput | string | null
    RS?: NullableStringFieldUpdateOperationsInput | string | null
    Bank?: NullableStringFieldUpdateOperationsInput | string | null
    OKED?: NullableStringFieldUpdateOperationsInput | string | null
    ADDRESS?: StringFieldUpdateOperationsInput | string
    role?: EnumuserRoleFieldUpdateOperationsInput | $Enums.userRole
    status?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
  }

  export type ToolsCreateManyBrandInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    price: number
    quantity: number
    code: number
    image: string
    isActive: boolean
    capacityId: string
    sizeId: string
  }

  export type ToolsUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacity?: CapacityUpdateOneRequiredWithoutToolsNestedInput
    size?: SizeUpdateOneRequiredWithoutToolsNestedInput
    Basket?: BasketUpdateManyWithoutToolNestedInput
    OrderProducts?: OrderProductsUpdateManyWithoutToolNestedInput
    ProductTools?: ProductToolsUpdateManyWithoutToolNestedInput
  }

  export type ToolsUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacityId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
    Basket?: BasketUncheckedUpdateManyWithoutToolNestedInput
    OrderProducts?: OrderProductsUncheckedUpdateManyWithoutToolNestedInput
    ProductTools?: ProductToolsUncheckedUpdateManyWithoutToolNestedInput
  }

  export type ToolsUncheckedUpdateManyWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacityId?: StringFieldUpdateOperationsInput | string
    sizeId?: StringFieldUpdateOperationsInput | string
  }

  export type ToolsCreateManyCapacityInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    price: number
    quantity: number
    code: number
    image: string
    brandId: string
    isActive: boolean
    sizeId: string
  }

  export type ToolsUpdateWithoutCapacityInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    brand?: BrandUpdateOneRequiredWithoutToolsNestedInput
    size?: SizeUpdateOneRequiredWithoutToolsNestedInput
    Basket?: BasketUpdateManyWithoutToolNestedInput
    OrderProducts?: OrderProductsUpdateManyWithoutToolNestedInput
    ProductTools?: ProductToolsUpdateManyWithoutToolNestedInput
  }

  export type ToolsUncheckedUpdateWithoutCapacityInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sizeId?: StringFieldUpdateOperationsInput | string
    Basket?: BasketUncheckedUpdateManyWithoutToolNestedInput
    OrderProducts?: OrderProductsUncheckedUpdateManyWithoutToolNestedInput
    ProductTools?: ProductToolsUncheckedUpdateManyWithoutToolNestedInput
  }

  export type ToolsUncheckedUpdateManyWithoutCapacityInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sizeId?: StringFieldUpdateOperationsInput | string
  }

  export type ToolsCreateManySizeInput = {
    id?: string
    nameUz: string
    nameRU: string
    nameEng: string
    descriptionUz: string
    descriptionRU: string
    descriptionEng: string
    price: number
    quantity: number
    code: number
    image: string
    brandId: string
    isActive: boolean
    capacityId: string
  }

  export type ToolsUpdateWithoutSizeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    brand?: BrandUpdateOneRequiredWithoutToolsNestedInput
    capacity?: CapacityUpdateOneRequiredWithoutToolsNestedInput
    Basket?: BasketUpdateManyWithoutToolNestedInput
    OrderProducts?: OrderProductsUpdateManyWithoutToolNestedInput
    ProductTools?: ProductToolsUpdateManyWithoutToolNestedInput
  }

  export type ToolsUncheckedUpdateWithoutSizeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacityId?: StringFieldUpdateOperationsInput | string
    Basket?: BasketUncheckedUpdateManyWithoutToolNestedInput
    OrderProducts?: OrderProductsUncheckedUpdateManyWithoutToolNestedInput
    ProductTools?: ProductToolsUncheckedUpdateManyWithoutToolNestedInput
  }

  export type ToolsUncheckedUpdateManyWithoutSizeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nameUz?: StringFieldUpdateOperationsInput | string
    nameRU?: StringFieldUpdateOperationsInput | string
    nameEng?: StringFieldUpdateOperationsInput | string
    descriptionUz?: StringFieldUpdateOperationsInput | string
    descriptionRU?: StringFieldUpdateOperationsInput | string
    descriptionEng?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacityId?: StringFieldUpdateOperationsInput | string
  }

  export type BasketCreateManyUserInput = {
    id?: string
    productId: string
    productCount: number
    quantity: number
    measure: number
    toolId: string
    total: number
    timeUnit: $Enums.MasterDaily
    levelId: string
  }

  export type CommentCreateManyUserInput = {
    id?: string
    text: string
    orderId: string
  }

  export type OrderCreateManyUserInput = {
    id?: string
    productCount: number
    quantity: number
    measure: number
    tool: number
    total: number
    location: string
    address: string
    date: Date | string
    paymentType: $Enums.paymentType
    withDelivery: boolean
    status: $Enums.orderStatus
    commentToDelivery: string
  }

  export type BasketUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
    product?: ProductUpdateOneRequiredWithoutBasketNestedInput
    tool?: ToolsUpdateOneRequiredWithoutBasketNestedInput
    level?: LevelUpdateOneRequiredWithoutBasketNestedInput
  }

  export type BasketUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    toolId?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
    levelId?: StringFieldUpdateOperationsInput | string
  }

  export type BasketUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    toolId?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
    levelId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    order?: OrderUpdateOneRequiredWithoutCommentNestedInput
    MasterRatings?: MasterRatingsUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    MasterRatings?: MasterRatingsUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
  }

  export type OrderUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    tool?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumpaymentTypeFieldUpdateOperationsInput | $Enums.paymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumorderStatusFieldUpdateOperationsInput | $Enums.orderStatus
    commentToDelivery?: StringFieldUpdateOperationsInput | string
    OrderProducts?: OrderProductsUpdateManyWithoutOrderNestedInput
    OrderMasters?: OrderMastersUpdateManyWithoutOrderNestedInput
    Comment?: CommentUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    tool?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumpaymentTypeFieldUpdateOperationsInput | $Enums.paymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumorderStatusFieldUpdateOperationsInput | $Enums.orderStatus
    commentToDelivery?: StringFieldUpdateOperationsInput | string
    OrderProducts?: OrderProductsUncheckedUpdateManyWithoutOrderNestedInput
    OrderMasters?: OrderMastersUncheckedUpdateManyWithoutOrderNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    tool?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumpaymentTypeFieldUpdateOperationsInput | $Enums.paymentType
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumorderStatusFieldUpdateOperationsInput | $Enums.orderStatus
    commentToDelivery?: StringFieldUpdateOperationsInput | string
  }

  export type BasketCreateManyToolInput = {
    id?: string
    productId: string
    productCount: number
    quantity: number
    measure: number
    total: number
    userId: string
    timeUnit: $Enums.MasterDaily
    levelId: string
  }

  export type OrderProductsCreateManyToolInput = {
    id?: string
    orderId: string
    productId: string
    levelId: string
    count: number
    price: number
    workingTime: number
    timeUnit: $Enums.MasterDaily
  }

  export type ProductToolsCreateManyToolInput = {
    id?: string
    productId: string
  }

  export type BasketUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
    product?: ProductUpdateOneRequiredWithoutBasketNestedInput
    user?: UserUpdateOneRequiredWithoutBasketNestedInput
    level?: LevelUpdateOneRequiredWithoutBasketNestedInput
  }

  export type BasketUncheckedUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
    levelId?: StringFieldUpdateOperationsInput | string
  }

  export type BasketUncheckedUpdateManyWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
    levelId?: StringFieldUpdateOperationsInput | string
  }

  export type OrderProductsUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    workingTime?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
    order?: OrderUpdateOneRequiredWithoutOrderProductsNestedInput
    product?: ProductUpdateOneRequiredWithoutOrderProductsNestedInput
    level?: LevelUpdateOneRequiredWithoutOrderProductsNestedInput
  }

  export type OrderProductsUncheckedUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    levelId?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    workingTime?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
  }

  export type OrderProductsUncheckedUpdateManyWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    levelId?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    workingTime?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
  }

  export type ProductToolsUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    product?: ProductUpdateOneRequiredWithoutProductToolsNestedInput
  }

  export type ProductToolsUncheckedUpdateWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductToolsUncheckedUpdateManyWithoutToolInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type MasterProdCreateManyMasterInput = {
    id?: string
    productId: string
    minWorkingHour: number
    levelId: string
    priceHourly: number
    priceDaily: number
    experience: number
  }

  export type OrderMastersCreateManyMasterInput = {
    id?: string
    orderId: string
  }

  export type MasterRatingsCreateManyMasterInput = {
    id?: string
    star: number
    commentId: string
  }

  export type MasterProdUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutMasterProdNestedInput
    level?: LevelUpdateOneRequiredWithoutMasterProdNestedInput
  }

  export type MasterProdUncheckedUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    levelId?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
  }

  export type MasterProdUncheckedUpdateManyWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    levelId?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
  }

  export type OrderMastersUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: OrderUpdateOneRequiredWithoutOrderMastersNestedInput
  }

  export type OrderMastersUncheckedUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
  }

  export type OrderMastersUncheckedUpdateManyWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
  }

  export type MasterRatingsUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    comment?: CommentUpdateOneRequiredWithoutMasterRatingsNestedInput
  }

  export type MasterRatingsUncheckedUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    commentId?: StringFieldUpdateOperationsInput | string
  }

  export type MasterRatingsUncheckedUpdateManyWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    commentId?: StringFieldUpdateOperationsInput | string
  }

  export type MasterProdCreateManyProductInput = {
    id?: string
    masterId: string
    minWorkingHour: number
    levelId: string
    priceHourly: number
    priceDaily: number
    experience: number
  }

  export type BasketCreateManyProductInput = {
    id?: string
    productCount: number
    quantity: number
    measure: number
    toolId: string
    total: number
    userId: string
    timeUnit: $Enums.MasterDaily
    levelId: string
  }

  export type ProductLevelsCreateManyProductInput = {
    id?: string
    levelId: string
    priceHourly: number
    priceDaily: number
    minWorkingHour: number
  }

  export type ProductToolsCreateManyProductInput = {
    id?: string
    toolId: string
  }

  export type OrderProductsCreateManyProductInput = {
    id?: string
    orderId: string
    levelId: string
    toolId: string
    count: number
    price: number
    workingTime: number
    timeUnit: $Enums.MasterDaily
  }

  export type MasterProdUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    master?: MasterUpdateOneRequiredWithoutMasterProdNestedInput
    level?: LevelUpdateOneRequiredWithoutMasterProdNestedInput
  }

  export type MasterProdUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    masterId?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    levelId?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
  }

  export type MasterProdUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    masterId?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    levelId?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
  }

  export type BasketUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
    tool?: ToolsUpdateOneRequiredWithoutBasketNestedInput
    user?: UserUpdateOneRequiredWithoutBasketNestedInput
    level?: LevelUpdateOneRequiredWithoutBasketNestedInput
  }

  export type BasketUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    toolId?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
    levelId?: StringFieldUpdateOperationsInput | string
  }

  export type BasketUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    toolId?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
    levelId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductLevelsUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    level?: LevelUpdateOneRequiredWithoutProductLevelsNestedInput
  }

  export type ProductLevelsUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    levelId?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    minWorkingHour?: IntFieldUpdateOperationsInput | number
  }

  export type ProductLevelsUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    levelId?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    minWorkingHour?: IntFieldUpdateOperationsInput | number
  }

  export type ProductToolsUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    tool?: ToolsUpdateOneRequiredWithoutProductToolsNestedInput
  }

  export type ProductToolsUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    toolId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductToolsUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    toolId?: StringFieldUpdateOperationsInput | string
  }

  export type OrderProductsUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    workingTime?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
    order?: OrderUpdateOneRequiredWithoutOrderProductsNestedInput
    level?: LevelUpdateOneRequiredWithoutOrderProductsNestedInput
    tool?: ToolsUpdateOneRequiredWithoutOrderProductsNestedInput
  }

  export type OrderProductsUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    levelId?: StringFieldUpdateOperationsInput | string
    toolId?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    workingTime?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
  }

  export type OrderProductsUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    levelId?: StringFieldUpdateOperationsInput | string
    toolId?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    workingTime?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
  }

  export type MasterProdCreateManyLevelInput = {
    id?: string
    masterId: string
    productId: string
    minWorkingHour: number
    priceHourly: number
    priceDaily: number
    experience: number
  }

  export type ProductLevelsCreateManyLevelInput = {
    id?: string
    productId: string
    priceHourly: number
    priceDaily: number
    minWorkingHour: number
  }

  export type OrderProductsCreateManyLevelInput = {
    id?: string
    orderId: string
    productId: string
    toolId: string
    count: number
    price: number
    workingTime: number
    timeUnit: $Enums.MasterDaily
  }

  export type BasketCreateManyLevelInput = {
    id?: string
    productId: string
    productCount: number
    quantity: number
    measure: number
    toolId: string
    total: number
    userId: string
    timeUnit: $Enums.MasterDaily
  }

  export type MasterProdUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    master?: MasterUpdateOneRequiredWithoutMasterProdNestedInput
    product?: ProductUpdateOneRequiredWithoutMasterProdNestedInput
  }

  export type MasterProdUncheckedUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    masterId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
  }

  export type MasterProdUncheckedUpdateManyWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    masterId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
  }

  export type ProductLevelsUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    minWorkingHour?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutProductLevelsNestedInput
  }

  export type ProductLevelsUncheckedUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    minWorkingHour?: IntFieldUpdateOperationsInput | number
  }

  export type ProductLevelsUncheckedUpdateManyWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    priceHourly?: IntFieldUpdateOperationsInput | number
    priceDaily?: IntFieldUpdateOperationsInput | number
    minWorkingHour?: IntFieldUpdateOperationsInput | number
  }

  export type OrderProductsUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    workingTime?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
    order?: OrderUpdateOneRequiredWithoutOrderProductsNestedInput
    product?: ProductUpdateOneRequiredWithoutOrderProductsNestedInput
    tool?: ToolsUpdateOneRequiredWithoutOrderProductsNestedInput
  }

  export type OrderProductsUncheckedUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    toolId?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    workingTime?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
  }

  export type OrderProductsUncheckedUpdateManyWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    toolId?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    workingTime?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
  }

  export type BasketUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
    product?: ProductUpdateOneRequiredWithoutBasketNestedInput
    tool?: ToolsUpdateOneRequiredWithoutBasketNestedInput
    user?: UserUpdateOneRequiredWithoutBasketNestedInput
  }

  export type BasketUncheckedUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    toolId?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
  }

  export type BasketUncheckedUpdateManyWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    productCount?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    measure?: IntFieldUpdateOperationsInput | number
    toolId?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
  }

  export type OrderProductsCreateManyOrderInput = {
    id?: string
    productId: string
    levelId: string
    toolId: string
    count: number
    price: number
    workingTime: number
    timeUnit: $Enums.MasterDaily
  }

  export type OrderMastersCreateManyOrderInput = {
    id?: string
    masterId: string
  }

  export type CommentCreateManyOrderInput = {
    id?: string
    text: string
    userId: string
  }

  export type OrderProductsUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    workingTime?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
    product?: ProductUpdateOneRequiredWithoutOrderProductsNestedInput
    level?: LevelUpdateOneRequiredWithoutOrderProductsNestedInput
    tool?: ToolsUpdateOneRequiredWithoutOrderProductsNestedInput
  }

  export type OrderProductsUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    levelId?: StringFieldUpdateOperationsInput | string
    toolId?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    workingTime?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
  }

  export type OrderProductsUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    levelId?: StringFieldUpdateOperationsInput | string
    toolId?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    workingTime?: IntFieldUpdateOperationsInput | number
    timeUnit?: EnumMasterDailyFieldUpdateOperationsInput | $Enums.MasterDaily
  }

  export type OrderMastersUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    master?: MasterUpdateOneRequiredWithoutOrderMastersNestedInput
  }

  export type OrderMastersUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    masterId?: StringFieldUpdateOperationsInput | string
  }

  export type OrderMastersUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    masterId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutCommentNestedInput
    MasterRatings?: MasterRatingsUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    MasterRatings?: MasterRatingsUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type MasterRatingsCreateManyCommentInput = {
    id?: string
    star: number
    masterId: string
  }

  export type MasterRatingsUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    master?: MasterUpdateOneRequiredWithoutMasterRatingsNestedInput
  }

  export type MasterRatingsUncheckedUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    masterId?: StringFieldUpdateOperationsInput | string
  }

  export type MasterRatingsUncheckedUpdateManyWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
    masterId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}